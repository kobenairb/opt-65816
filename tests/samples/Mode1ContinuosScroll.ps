.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __updateBG1_locals 0
.define __updateBG2_locals 0
.define __updatePos_locals 0
.define __handleScroll_locals 2
.define __handleScrollSub_locals 2
.define __myconsoleVblank_locals 0
.define __main_locals 0

.SECTION ".text_0x0" SUPERFREE

updateBG1:
; sub sp,#__updateBG1_locals
.ifgr __updateBG1_locals 0
tsa
sec
sbc #__updateBG1_locals
tas
.endif
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [bg_mutex,0]
sep #$20
lda.b tcc__r0
sta.l bg_mutex + 0
rep #$20
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __updateBG1_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x4
; st2 tcc__r0, [bgInfo,4]
lda.b tcc__r0
sta.l bgInfo + 4
; load 0
; type 4 reg 0x1f2 extra 0x0
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __updateBG1_locals + 1,s
sta.b tcc__r0
lda 5 + __updateBG1_locals + 1,s
sta.b tcc__r0h
; store r 0x0 fr 0x3f0 ft 0x4 fc 0x0
; st4 tcc__r0, [bgInfo,0]
lda.b tcc__r0
sta.l bgInfo + 0
lda.b tcc__r0h
sta.l bgInfo + 0 + 2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,9],tcc__r0
; stack adjust: fc + disp - loc 11
lda 9 + __updateBG1_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x6
; st2 tcc__r0, [bgInfo,6]
lda.b tcc__r0
sta.l bgInfo + 6
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #255,tcc__r0
lda.w #255
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x10
; st1 tcc__r0, [bgInfo,16]
sep #$20
lda.b tcc__r0
sta.l bgInfo + 16
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [bg_mutex,0]
sep #$20
lda.b tcc__r0
sta.l bg_mutex + 0
rep #$20
; gsym_addr t 0 a 1525 ind 1525
; ERROR no jump found to patch
; add sp, #__updateBG1_locals
.ifgr __updateBG1_locals 0
tsa
clc
adc #__updateBG1_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x1" SUPERFREE

updateBG2:
; sub sp,#__updateBG2_locals
.ifgr __updateBG2_locals 0
tsa
sec
sbc #__updateBG2_locals
tas
.endif
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [bg_mutex,0]
sep #$20
lda.b tcc__r0
sta.l bg_mutex + 0
rep #$20
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __updateBG2_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0xc
; st2 tcc__r0, [bgInfo,12]
lda.b tcc__r0
sta.l bgInfo + 12
; load 0
; type 4 reg 0x1f2 extra 0x0
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __updateBG2_locals + 1,s
sta.b tcc__r0
lda 5 + __updateBG2_locals + 1,s
sta.b tcc__r0h
; store r 0x0 fr 0x3f0 ft 0x4 fc 0x8
; st4 tcc__r0, [bgInfo,8]
lda.b tcc__r0
sta.l bgInfo + 8
lda.b tcc__r0h
sta.l bgInfo + 8 + 2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,9],tcc__r0
; stack adjust: fc + disp - loc 11
lda 9 + __updateBG2_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0xe
; st2 tcc__r0, [bgInfo,14]
lda.b tcc__r0
sta.l bgInfo + 14
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #255,tcc__r0
lda.w #255
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x11
; st1 tcc__r0, [bgInfo,17]
sep #$20
lda.b tcc__r0
sta.l bgInfo + 17
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [bg_mutex,0]
sep #$20
lda.b tcc__r0
sta.l bg_mutex + 0
rep #$20
; gsym_addr t 0 a 3227 ind 3227
; ERROR no jump found to patch
; add sp, #__updateBG2_locals
.ifgr __updateBG2_locals 0
tsa
clc
adc #__updateBG2_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x2" SUPERFREE

updatePos:
; sub sp,#__updatePos_locals
.ifgr __updatePos_locals 0
tsa
sec
sbc #__updatePos_locals
tas
.endif
; load 0
; type 16 reg 0x1f2 extra 0x26
; ld2 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __updatePos_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 7 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #2048
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 3851 ind 3851
; gsym_addr t 0 a 3888 ind 3888
; ERROR no jump found to patch
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 4007 ind 4007
; cmp op 0x95 inv 1 v 243 r 4007
; cmp ne
bne +
; gsym_addr t 0 a 4094 ind 4094
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 4007
; load 0
; type 4 reg 0x1f2 extra 0x746e6572
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __updatePos_locals + 1,s
sta.b tcc__r0
lda 5 + __updatePos_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 3 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; load 1
; type 0 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c 3 r type 0x0)
; length xxy 2 vtop->type 0x0
dec.b tcc__r1
dec.b tcc__r1
; store r 0x1 fr 0x100 ft 0x0 fc 0x3
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
__local_0:
; gsym_addr t 4007 a 4885 ind 4885
; load 0
; type 16 reg 0x1f2 extra 0x26
; ld2 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __updatePos_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 7 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #1024
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 5228 ind 5228
; gsym_addr t 0 a 5265 ind 5265
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 5353 ind 5353
; cmp op 0x95 inv 1 v 243 r 5353
; cmp ne
bne +
; gsym_addr t 0 a 5440 ind 5440
brl __local_1
+
; gtst finished; t 5353
; load 0
; type 4 reg 0x1f2 extra 0x746e6572
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __updatePos_locals + 1,s
sta.b tcc__r0
lda 5 + __updatePos_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 3 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; load 1
; type 0 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c 3 r type 0x0)
; length xxy 2 vtop->type 0x0
inc.b tcc__r1
inc.b tcc__r1
; store r 0x1 fr 0x100 ft 0x0 fc 0x3
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
__local_1:
; gsym_addr t 5353 a 6200 ind 6200
; load 0
; type 16 reg 0x1f2 extra 0x26
; ld2 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __updatePos_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 7 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #512
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 6542 ind 6542
; gsym_addr t 0 a 6579 ind 6579
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 6667 ind 6667
; cmp op 0x95 inv 1 v 243 r 6667
; cmp ne
bne +
; gsym_addr t 0 a 6754 ind 6754
brl __local_2
+
; gtst finished; t 6667
; load 0
; type 4 reg 0x1f2 extra 0x746e6572
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __updatePos_locals + 1,s
sta.b tcc__r0
lda 5 + __updatePos_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 3 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 0 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c 3 r type 0x0)
; length xxy 2 vtop->type 0x0
dec.b tcc__r1
dec.b tcc__r1
; store r 0x1 fr 0x100 ft 0x0 fc 0x3
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
__local_2:
; gsym_addr t 6667 a 7501 ind 7501
; load 0
; type 16 reg 0x1f2 extra 0x26
; ld2 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __updatePos_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 7 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #256
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 7843 ind 7843
; gsym_addr t 0 a 7880 ind 7880
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 7968 ind 7968
; cmp op 0x95 inv 1 v 243 r 7968
; cmp ne
bne +
; gsym_addr t 0 a 8055 ind 8055
brl __local_3
+
; gtst finished; t 7968
; load 0
; type 4 reg 0x1f2 extra 0x746e6572
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __updatePos_locals + 1,s
sta.b tcc__r0
lda 5 + __updatePos_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 3 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 0 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c 3 r type 0x0)
; length xxy 2 vtop->type 0x0
inc.b tcc__r1
inc.b tcc__r1
; store r 0x1 fr 0x100 ft 0x0 fc 0x3
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
__local_3:
; gsym_addr t 7968 a 8802 ind 8802
; load 0
; type 4 reg 0x1f2 extra 0x746e6572
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __updatePos_locals + 1,s
sta.b tcc__r0
lda 5 + __updatePos_locals + 1,s
sta.b tcc__r0h
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; load 0
; type 4 reg 0x1f2 extra 0x746e6572
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __updatePos_locals + 1,s
sta.b tcc__r0
lda 5 + __updatePos_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 3 r type 0x10)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 2
; type 4 reg 0x1f2 extra 0x746e6572
; ld4 [sp,3],tcc__r2
; stack adjust: fc + disp - loc 5
lda 3 + __updatePos_locals + 1,s
sta.b tcc__r2
lda 5 + __updatePos_locals + 1,s
sta.b tcc__r2h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r2 (0x2) (fr type 0x4 c 3 r type 0x10)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r2
adc.w #4
sta.b tcc__r2
; ldpush before load type 0x10 reg 0x102
; load 3
; type 16 reg 0x102 extra 0x0
; ld2 [tcc__r2,0],tcc__r3
lda.b [tcc__r2]
sta.b tcc__r3
; ldpush2 (type 0x10 reg 0x3) tcc__r3
pei (tcc__r3)
; ldpush before load type 0x10 reg 0x100
; load 2
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r2
lda.b [tcc__r0]
sta.b tcc__r2
; ldpush2 (type 0x10 reg 0x2) tcc__r2
pei (tcc__r2)
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; gsym_addr t 0 a 10381 ind 10381
; add sp, #__updatePos_locals
.ifgr __updatePos_locals 0
tsa
clc
adc #__updatePos_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x3" SUPERFREE

handleScroll:
; sub sp,#__handleScroll_locals
.ifgr __handleScroll_locals 0
tsa
sec
sbc #__handleScroll_locals
tas
.endif
; load 0
; type 4 reg 0x1f2 extra 0x68433231
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __handleScroll_locals + 1,s
sta.b tcc__r0
lda 5 + __handleScroll_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 3 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 0 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op 0x9f
; cmpcd tcc__r1, #94
ldx #1
lda.b tcc__r1
sec
sbc.w #94
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 11264 ind 11264
; gsym_addr t 0 a 11303 ind 11303
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 11393 ind 11393
; cmp op 0x95 inv 1 v 243 r 11393
; cmp ne
bne +
; gsym_addr t 0 a 11483 ind 11483
brl __local_4
+
; gtst finished; t 11393
; load 0
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 9
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r1
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x10)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; load 2
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r2
lda.b [tcc__r0]
sta.b tcc__r2
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op 0x92
; ucmpcd tcc__r2, tcc__r0
ldx #1
lda.b tcc__r2
sec
sbc.b tcc__r0
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 12593 ind 12593
; gsym_addr t 0 a 12632 ind 12632
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 12722 ind 12722
; cmp op 0x95 inv 1 v 243 r 12722
; cmp ne
bne +
; gsym_addr t 0 a 12812 ind 12812
brl __local_5
+
; gtst finished; t 12722
; load 0
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; load 1
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 7 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x7
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; load 0
; type 4 reg 0x1f2 extra 0x68433231
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __handleScroll_locals + 1,s
sta.b tcc__r0
lda 5 + __handleScroll_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 3 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 0 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c 3 r type 0x0)
; length xxy 2 vtop->type 0x0
dec.b tcc__r1
; store r 0x1 fr 0x100 ft 0x0 fc 0x3
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
__local_5:
; gsym_addr t 12722 a 14239 ind 14239
; load 0
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 9
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r1
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x10)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #12
sta.b tcc__r1
; load 2
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r2
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r2
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r2 (0x2) (fr type 0x0 c 7 r type 0x10)
; length xxy 2 vtop->type 0x0
inc.b tcc__r2
; gen_opi len 2 op 
; shl tcc__r2, #8
lda.b tcc__r2
xba
and #$ff00
sta.b tcc__r2
; load 1
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op 0x93
; ucmpcd tcc__r1, tcc__r2
ldx #1
lda.b tcc__r1
sec
sbc.b tcc__r2
tay
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 15555 ind 15555
; gsym_addr t 0 a 15594 ind 15594
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 15684 ind 15684
; cmp op 0x95 inv 1 v 243 r 15684
; cmp ne
bne +
; gsym_addr t 0 a 15774 ind 15774
brl __local_6
+
; gtst finished; t 15684
; load 0
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #12
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c 7 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0x7
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #13
sta.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 9
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r1
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x11)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #13
sta.b tcc__r1
; gtst inv 1 t 0 v 1 r 17303 ind 17303
; load 2
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r2
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r2
; gsym_addr t 0 a 17465 ind 17465
; tcc__r2 to compare reg
lda.b tcc__r2 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 17555 ind 17555
; cmp op 0x95 inv 1 v 243 r 17555
; cmp ne
bne +
; gsym_addr t 0 a 17645 ind 17645
brl __local_7
+
; gtst finished; t 17555
; load 1
; type 17 reg 0xf4 extra 0x9b78ff1
; jmpr(i) v 0xf4 r 0x1 fc 0x4493
lda #0
bra +
__local_7:
; gsym_addr t 17555 a 17810 ind 17810
lda #1
+
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0x7
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 11
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; store r 0x1 fr 0xf2 ft 0x10 fc 0xfffffffe
; st2 tcc__r1, [sp,-2]
; stack adjust: fc + disp - loc 2
lda.b tcc__r1
sta -2 + __handleScroll_locals + 1,s
; load 0
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 11
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #13
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r1, #0
ldx #1
lda.b tcc__r1
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 19175 ind 19175
; gsym_addr t 0 a 19214 ind 19214
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 19304 ind 19304
; cmp op 0x95 inv 1 v 243 r 19304
; cmp ne
bne +
; gsym_addr t 0 a 19394 ind 19394
brl __local_8
+
; gtst finished; t 19304
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __handleScroll_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -2 + __handleScroll_locals + 1,s
__local_8:
; gsym_addr t 19304 a 19934 ind 19934
; load 0
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 11
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x6)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #8
sta.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 11
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r1
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #12
sta.b tcc__r1
; load 2
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r2
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r2
; gen_opi len 2 op 
; shl tcc__r2, #11
lda.b tcc__r2
ldy.w #11
-
asl a
dey
bne -
+
sta.b tcc__r2
; load 1
; type 4 reg 0x100 extra 0x0
; ld4 [tcc__r0,0],tcc__r1
ldy #0
lda.b [tcc__r0],y
sta.b tcc__r1
iny
iny
lda.b [tcc__r0],y
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r2 (0x2), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x6)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.b tcc__r2
sta.b tcc__r1
; push2 imm r 0xf0
pea.w 2048
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 4
lda 0 + __handleScroll_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x4 reg 0x1
; ldpush4 (type 0x4 reg 0x1) tcc__r1
pei (tcc__r1h)
pei (tcc__r1)
; call r 0x2f0
jsr.l updateBG1
; add sp, #8
tsa
clc
adc #8
tas
__local_6:
; gsym_addr t 15684 a 21656 ind 21656
; load 0
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 11
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r0h
; load 1
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 11
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r1
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x11)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #4
sta.b tcc__r1
; load 2
; type 16 reg 0x101 extra 0x1
; ld2 [tcc__r1,0],tcc__r2
lda.b [tcc__r1]
sta.b tcc__r2
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r2 (0x2) (fr type 0x10 c 7 r type 0x11)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r2
sbc.w #255
sta.b tcc__r2
; load 1
; type 4 reg 0x1f2 extra 0x72616765
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 11
lda 7 + __handleScroll_locals + 1,s
sta.b tcc__r1
lda 9 + __handleScroll_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x10)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #6
sta.b tcc__r1
; load 3
; type 16 reg 0x101 extra 0x2
; ld2 [tcc__r1,0],tcc__r3
lda.b [tcc__r1]
sta.b tcc__r3
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r3 (0x3) (fr type 0x10 c 7 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r3
sbc.w #223
sta.b tcc__r3
; ldpush before load type 0x10 reg 0x3
; ldpush2 (type 0x10 reg 0x3) tcc__r3
pei (tcc__r3)
; ldpush before load type 0x10 reg 0x2
; ldpush2 (type 0x10 reg 0x2) tcc__r2
pei (tcc__r2)
; ldpush before load type 0x11 reg 0x5100
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; ldpush1 (type 0x11 reg 0x1) tcc__r1
sep #$20
lda.b tcc__r1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetScroll
; add sp, #5
tsa
clc
adc #5
tas
__local_4:
; gsym_addr t 11393 a 23624 ind 23624
; gsym_addr t 0 a 23662 ind 23662
; add sp, #__handleScroll_locals
.ifgr __handleScroll_locals 0
tsa
clc
adc #__handleScroll_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x4" SUPERFREE

handleScrollSub:
; sub sp,#__handleScrollSub_locals
.ifgr __handleScrollSub_locals 0
tsa
sec
sbc #__handleScrollSub_locals
tas
.endif
; load 0
; type 4 reg 0x1f2 extra 0x20302d33
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __handleScrollSub_locals + 1,s
sta.b tcc__r0
lda 5 + __handleScrollSub_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 3 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 0 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op 0x9f
; cmpcd tcc__r1, #94
ldx #1
lda.b tcc__r1
sec
sbc.w #94
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 24572 ind 24572
; gsym_addr t 0 a 24611 ind 24611
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 24701 ind 24701
; cmp op 0x95 inv 1 v 243 r 24701
; cmp ne
bne +
; gsym_addr t 0 a 24791 ind 24791
brl __local_9
+
; gtst finished; t 24701
; load 0
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 9
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r1
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x10)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; load 2
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r2
lda.b [tcc__r0]
sta.b tcc__r2
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op 0x92
; ucmpcd tcc__r2, tcc__r0
ldx #1
lda.b tcc__r2
sec
sbc.b tcc__r0
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 25913 ind 25913
; gsym_addr t 0 a 25952 ind 25952
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 26042 ind 26042
; cmp op 0x95 inv 1 v 243 r 26042
; cmp ne
bne +
; gsym_addr t 0 a 26132 ind 26132
brl __local_10
+
; gtst finished; t 26042
; load 0
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; load 1
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 7 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r1
inc.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x7
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
__local_10:
; gsym_addr t 26042 a 26913 ind 26913
; load 0
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 9
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r1
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x10)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #12
sta.b tcc__r1
; load 2
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r2
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r2
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r2 (0x2) (fr type 0x0 c 7 r type 0x10)
; length xxy 2 vtop->type 0x0
inc.b tcc__r2
; gen_opi len 2 op 
; shl tcc__r2, #8
lda.b tcc__r2
xba
and #$ff00
sta.b tcc__r2
; load 1
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op 0x93
; ucmpcd tcc__r1, tcc__r2
ldx #1
lda.b tcc__r1
sec
sbc.b tcc__r2
tay
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 28241 ind 28241
; gsym_addr t 0 a 28280 ind 28280
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 28370 ind 28370
; cmp op 0x95 inv 1 v 243 r 28370
; cmp ne
bne +
; gsym_addr t 0 a 28460 ind 28460
brl __local_11
+
; gtst finished; t 28370
; load 0
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #12
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c 7 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0x7
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #13
sta.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 9
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r1
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x11)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #13
sta.b tcc__r1
; gtst inv 1 t 0 v 1 r 30008 ind 30008
; load 2
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r2
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r2
; gsym_addr t 0 a 30170 ind 30170
; tcc__r2 to compare reg
lda.b tcc__r2 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 30260 ind 30260
; cmp op 0x95 inv 1 v 243 r 30260
; cmp ne
bne +
; gsym_addr t 0 a 30350 ind 30350
brl __local_12
+
; gtst finished; t 30260
; load 1
; type 17 reg 0xf4 extra 0x9b79286
; jmpr(i) v 0xf4 r 0x1 fc 0x7634
lda #0
bra +
__local_12:
; gsym_addr t 30260 a 30516 ind 30516
lda #1
+
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0x7
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 11
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; store r 0x1 fr 0xf2 ft 0x10 fc 0xfffffffe
; st2 tcc__r1, [sp,-2]
; stack adjust: fc + disp - loc 2
lda.b tcc__r1
sta -2 + __handleScrollSub_locals + 1,s
; load 0
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 11
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #13
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r1, #0
ldx #1
lda.b tcc__r1
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 31896 ind 31896
; gsym_addr t 0 a 31935 ind 31935
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 32025 ind 32025
; cmp op 0x95 inv 1 v 243 r 32025
; cmp ne
bne +
; gsym_addr t 0 a 32115 ind 32115
brl __local_13
+
; gtst finished; t 32025
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __handleScrollSub_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -2 + __handleScrollSub_locals + 1,s
__local_13:
; gsym_addr t 32025 a 32662 ind 32662
; load 0
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 11
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 7 r type 0x6)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #8
sta.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 11
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r1
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #12
sta.b tcc__r1
; load 2
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r2
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r2
; gen_opi len 2 op 
; shl tcc__r2, #11
lda.b tcc__r2
ldy.w #11
-
asl a
dey
bne -
+
sta.b tcc__r2
; load 1
; type 4 reg 0x100 extra 0x0
; ld4 [tcc__r0,0],tcc__r1
ldy #0
lda.b [tcc__r0],y
sta.b tcc__r1
iny
iny
lda.b [tcc__r0],y
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r2 (0x2), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x6)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.b tcc__r2
sta.b tcc__r1
; push2 imm r 0xf0
pea.w 2048
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x33313278
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 4
lda 0 + __handleScrollSub_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x4 reg 0x1
; ldpush4 (type 0x4 reg 0x1) tcc__r1
pei (tcc__r1h)
pei (tcc__r1)
; call r 0x2f0
jsr.l updateBG2
; add sp, #8
tsa
clc
adc #8
tas
__local_11:
; gsym_addr t 28370 a 34406 ind 34406
; load 0
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 11
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r0
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r0h
; load 1
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 11
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r1
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x11)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #4
sta.b tcc__r1
; load 2
; type 16 reg 0x101 extra 0x1
; ld2 [tcc__r1,0],tcc__r2
lda.b [tcc__r1]
sta.b tcc__r2
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r2 (0x2) (fr type 0x10 c 7 r type 0x11)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r2
sbc.w #255
sta.b tcc__r2
; load 1
; type 4 reg 0x1f2 extra 0x73612065
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 11
lda 7 + __handleScrollSub_locals + 1,s
sta.b tcc__r1
lda 9 + __handleScrollSub_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x10)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #6
sta.b tcc__r1
; load 3
; type 16 reg 0x101 extra 0x2
; ld2 [tcc__r1,0],tcc__r3
lda.b [tcc__r1]
sta.b tcc__r3
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r3 (0x3) (fr type 0x10 c 7 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r3
sbc.w #223
sta.b tcc__r3
; ldpush before load type 0x10 reg 0x3
; ldpush2 (type 0x10 reg 0x3) tcc__r3
pei (tcc__r3)
; ldpush before load type 0x10 reg 0x2
; ldpush2 (type 0x10 reg 0x2) tcc__r2
pei (tcc__r2)
; ldpush before load type 0x11 reg 0x5100
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; ldpush1 (type 0x11 reg 0x1) tcc__r1
sep #$20
lda.b tcc__r1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetScroll
; add sp, #5
tsa
clc
adc #5
tas
__local_9:
; gsym_addr t 24701 a 36392 ind 36392
; gsym_addr t 0 a 36430 ind 36430
; add sp, #__handleScrollSub_locals
.ifgr __handleScrollSub_locals 0
tsa
clc
adc #__handleScrollSub_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x5" SUPERFREE

myconsoleVblank:
; sub sp,#__myconsoleVblank_locals
.ifgr __myconsoleVblank_locals 0
tsa
sec
sbc #__myconsoleVblank_locals
tas
.endif
; push2 imm r 0xf0
pea.w 544
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :oamMemory
pea.w oamMemory + 0
; call r 0x2f0
jsr.l dmaCopyOAram
; add sp, #8
tsa
clc
adc #8
tas
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [bg_mutex + 0], tcc__r0
lda.w #0
sep #$20
lda.l bg_mutex + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 37178 ind 37178
; gsym_addr t 0 a 37217 ind 37217
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 37307 ind 37307
; cmp op 0x95 inv 1 v 243 r 37307
; cmp ne
bne +
; gsym_addr t 0 a 37397 ind 37397
brl __local_14
+
; gtst finished; t 37307
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [bgInfo + 16], tcc__r0
lda.w #0
sep #$20
lda.l bgInfo + 16
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #255
ldx #1
lda.b tcc__r0
sec
sbc #255
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 37715 ind 37715
; gsym_addr t 0 a 37754 ind 37754
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 37844 ind 37844
; cmp op 0x95 inv 1 v 243 r 37844
; cmp ne
bne +
; gsym_addr t 0 a 37934 ind 37934
brl __local_15
+
; gtst finished; t 37844
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [bgInfo + 6], tcc__r0
lda.l bgInfo + 6
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [bgInfo + 4], tcc__r0
lda.l bgInfo + 4
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x4 reg 0x3f0
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [bgInfo + 0], tcc__r0
lda.l bgInfo + 0
sta.b tcc__r0
lda.l bgInfo + 0 + 2
sta.b tcc__r0h
; ldpush4 (type 0x4 reg 0x0) tcc__r0
pei (tcc__r0h)
pei (tcc__r0)
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x10
; st1 tcc__r0, [bgInfo,16]
sep #$20
lda.b tcc__r0
sta.l bgInfo + 16
rep #$20
__local_15:
; gsym_addr t 37844 a 38891 ind 38891
__local_14:
; gsym_addr t 37307 a 38929 ind 38929
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [bg_mutex + 0], tcc__r0
lda.w #0
sep #$20
lda.l bg_mutex + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 39207 ind 39207
; gsym_addr t 0 a 39246 ind 39246
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 39336 ind 39336
; cmp op 0x95 inv 1 v 243 r 39336
; cmp ne
bne +
; gsym_addr t 0 a 39426 ind 39426
brl __local_16
+
; gtst finished; t 39336
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [bgInfo + 17], tcc__r0
lda.w #0
sep #$20
lda.l bgInfo + 17
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #255
ldx #1
lda.b tcc__r0
sec
sbc #255
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 39744 ind 39744
; gsym_addr t 0 a 39783 ind 39783
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 39873 ind 39873
; cmp op 0x95 inv 1 v 243 r 39873
; cmp ne
bne +
; gsym_addr t 0 a 39963 ind 39963
brl __local_17
+
; gtst finished; t 39873
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [bgInfo + 14], tcc__r0
lda.l bgInfo + 14
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [bgInfo + 12], tcc__r0
lda.l bgInfo + 12
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x4 reg 0x3f0
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [bgInfo + 8], tcc__r0
lda.l bgInfo + 8
sta.b tcc__r0
lda.l bgInfo + 8 + 2
sta.b tcc__r0h
; ldpush4 (type 0x4 reg 0x0) tcc__r0
pei (tcc__r0h)
pei (tcc__r0)
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x11
; st1 tcc__r0, [bgInfo,17]
sep #$20
lda.b tcc__r0
sta.l bgInfo + 17
rep #$20
__local_17:
; gsym_addr t 39873 a 40924 ind 40924
__local_16:
; gsym_addr t 39336 a 40962 ind 40962
; gsym_addr t 0 a 41000 ind 41000
; add sp, #__myconsoleVblank_locals
.ifgr __myconsoleVblank_locals 0
tsa
clc
adc #__myconsoleVblank_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x6" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; call r 0x2f0
jsr.l consoleInit
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgSetMapPtr
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 2048
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetMapPtr
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 4096
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetMapPtr
; add sp, #4
tsa
clc
adc #4
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #BG1_tiles_end + 0, tcc__r0 (type 0x84)
lda.w #:BG1_tiles_end
sta.b tcc__r0h
lda.w #BG1_tiles_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #BG1_tiles + 0, tcc__r1 (type 0x84)
lda.w #:BG1_tiles
sta.b tcc__r1h
lda.w #BG1_tiles + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 8192
; push2 imm r 0xf0
pea.w 16
; push2 imm r 0xf0
pea.w 64
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; push4 imm r 0x12f0
pea.w :BG1_pal
pea.w BG1_pal + 0
; push4 imm r 0x12f0
pea.w :BG1_tiles
pea.w BG1_tiles + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #BG2_tiles_end + 0, tcc__r0 (type 0x84)
lda.w #:BG2_tiles_end
sta.b tcc__r0h
lda.w #BG2_tiles_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #BG2_tiles + 0, tcc__r1 (type 0x84)
lda.w #:BG2_tiles
sta.b tcc__r1h
lda.w #BG2_tiles + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 12288
; push2 imm r 0xf0
pea.w 16
; push2 imm r 0xf0
pea.w 64
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #4
pha
rep #$20
; push4 imm r 0x12f0
pea.w :BG2_pal
pea.w BG2_pal + 0
; push4 imm r 0x12f0
pea.w :BG2_tiles
pea.w BG2_tiles + 0
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #BG3_tiles_end + 0, tcc__r0 (type 0x84)
lda.w #:BG3_tiles_end
sta.b tcc__r0h
lda.w #BG3_tiles_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #BG3_tiles + 0, tcc__r1 (type 0x84)
lda.w #:BG3_tiles
sta.b tcc__r1h
lda.w #BG3_tiles + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 16384
; push2 imm r 0xf0
pea.w 4
; push2 imm r 0xf0
pea.w 64
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push4 imm r 0x12f0
pea.w :BG3_pal
pea.w BG3_pal + 0
; push4 imm r 0x12f0
pea.w :BG3_tiles
pea.w BG3_tiles + 0
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [bg_mutex,0]
sep #$20
lda.b tcc__r0
sta.l bg_mutex + 0
rep #$20
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x12f0
pea.w :BG1_map
pea.w BG1_map + 0
; call r 0x2f0
jsr.l updateBG1
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 2048
; push4 imm r 0x12f0
pea.w :BG2_map
pea.w BG2_map + 0
; call r 0x2f0
jsr.l updateBG2
; add sp, #8
tsa
clc
adc #8
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 4096
; push4 imm r 0x12f0
pea.w :BG3_map
pea.w BG3_map + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push1 imm r 0xf0
sep #$20
lda #8
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #20,tcc__r0
lda.w #20
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [player1,2]
lda.b tcc__r0
sta.l player1 + 2
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #100,tcc__r0
lda.w #100
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x4
; st2 tcc__r0, [player1,4]
lda.b tcc__r0
sta.l player1 + 4
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [player1,0]
sep #$20
lda.b tcc__r0
sta.l player1 + 0
rep #$20
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [player1 + 0], tcc__r0
lda.w #0
sep #$20
lda.l player1 + 0
rep #$20
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSetVisible
; add sp, #3
tsa
clc
adc #3
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #character_tiles_end + 0, tcc__r0 (type 0x84)
lda.w #:character_tiles_end
sta.b tcc__r0h
lda.w #character_tiles_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #character_tiles + 0, tcc__r1 (type 0x84)
lda.w #:character_tiles
sta.b tcc__r1h
lda.w #character_tiles + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #character_pal_end + 0, tcc__r1 (type 0x84)
lda.w #:character_pal_end
sta.b tcc__r1h
lda.w #character_pal_end + 0
sta.b tcc__r1
; load 2
; type 132 reg 0x12f0 extra 0x0
; ld4 #character_pal + 0, tcc__r2 (type 0x84)
lda.w #:character_pal
sta.b tcc__r2h
lda.w #character_pal + 0
sta.b tcc__r2
; gen_opi len 4 op -
; sbc tcc__r2 (0x2), tcc__r1 (0x1) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r1
sbc.b tcc__r2
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #96
pha
rep #$20
; push2 imm r 0xf0
pea.w 24576
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; push4 imm r 0x12f0
pea.w :character_pal
pea.w character_pal + 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :character_tiles
pea.w character_tiles + 0
; call r 0x2f0
jsr.l oamInitGfxSet
; add sp, #16
tsa
clc
adc #16
tas
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [player1 + 0], tcc__r0
lda.w #0
sep #$20
lda.l player1 + 0
rep #$20
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; ldpush before load type 0x10 reg 0x3f0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [player1 + 4], tcc__r1
lda.l player1 + 4
sta.b tcc__r1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x3f0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [player1 + 2], tcc__r1
lda.l player1 + 2
sta.b tcc__r1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [player1 + 0], tcc__r0
lda.w #0
sep #$20
lda.l player1 + 0
rep #$20
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; call r 0x2f0
jsr.l setScreenOn
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [bgMain,0]
sep #$20
lda.b tcc__r0
sta.l bgMain + 0
rep #$20
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #255,tcc__r0
lda.w #255
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x4
; st2 tcc__r0, [bgMain,4]
lda.b tcc__r0
sta.l bgMain + 4
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #255,tcc__r0
lda.w #255
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x6
; st2 tcc__r0, [bgMain,6]
lda.b tcc__r0
sta.l bgMain + 6
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x2
; st2 tcc__r0, [bgMain,2]
lda.b tcc__r0
sta.l bgMain + 2
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #255,tcc__r0
lda.w #255
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xd
; st1 tcc__r0, [bgMain,13]
sep #$20
lda.b tcc__r0
sta.l bgMain + 13
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xc
; st1 tcc__r0, [bgMain,12]
sep #$20
lda.b tcc__r0
sta.l bgMain + 12
rep #$20
; load 0
; type 4 reg 0x12f0 extra 0x0
; ld4 #BG1_map + 0, tcc__r0 (type 0x4)
lda.w #:BG1_map
sta.b tcc__r0h
lda.w #BG1_map + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x4 fc 0x8
; st4 tcc__r0, [bgMain,8]
lda.b tcc__r0
sta.l bgMain + 8
lda.b tcc__r0h
sta.l bgMain + 8 + 2
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #768,tcc__r0
lda.w #768
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x10
; st2 tcc__r0, [bgMain,16]
lda.b tcc__r0
sta.l bgMain + 16
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [bgSub,0]
sep #$20
lda.b tcc__r0
sta.l bgSub + 0
rep #$20
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #255,tcc__r0
lda.w #255
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x4
; st2 tcc__r0, [bgSub,4]
lda.b tcc__r0
sta.l bgSub + 4
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #255,tcc__r0
lda.w #255
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x6
; st2 tcc__r0, [bgSub,6]
lda.b tcc__r0
sta.l bgSub + 6
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #2048,tcc__r0
lda.w #2048
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x2
; st2 tcc__r0, [bgSub,2]
lda.b tcc__r0
sta.l bgSub + 2
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #255,tcc__r0
lda.w #255
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xd
; st1 tcc__r0, [bgSub,13]
sep #$20
lda.b tcc__r0
sta.l bgSub + 13
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xc
; st1 tcc__r0, [bgSub,12]
sep #$20
lda.b tcc__r0
sta.l bgSub + 12
rep #$20
; load 0
; type 4 reg 0x12f0 extra 0x0
; ld4 #BG2_map + 0, tcc__r0 (type 0x4)
lda.w #:BG2_map
sta.b tcc__r0h
lda.w #BG2_map + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x4 fc 0x8
; st4 tcc__r0, [bgSub,8]
lda.b tcc__r0
sta.l bgSub + 8
lda.b tcc__r0h
sta.l bgSub + 8 + 2
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #1152,tcc__r0
lda.w #1152
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x10
; st2 tcc__r0, [bgSub,16]
lda.b tcc__r0
sta.l bgSub + 16
; push2 imm r 0xf0
pea.w 32
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgSetScroll
; add sp, #5
tsa
clc
adc #5
tas
; push2 imm r 0xf0
pea.w 32
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetScroll
; add sp, #5
tsa
clc
adc #5
tas
; load 0
; type 132 reg 0x2f0 extra 0x0
; ld4 #myconsoleVblank + 0, tcc__r0 (type 0x84)
lda.w #:myconsoleVblank
sta.b tcc__r0h
lda.w #myconsoleVblank + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x84 fc 0x0
; st4 tcc__r0, [nmi_handler,0]
lda.b tcc__r0
sta.l nmi_handler + 0
lda.b tcc__r0h
sta.l nmi_handler + 0 + 2
__local_18:
; gtst inv 1 t 0 v 240 r 53174 ind 53174
; uncond jump: nop
; gtst finished; t 0
; call r 0x2f0
jsr.l scanPads
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [pad0,0]
lda.b tcc__r0
sta.l pad0 + 0
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x6f203255
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x2f0
pea.w :player1
pea.w player1 + 0
; call r 0x2f0
jsr.l updatePos
; add sp, #6
tsa
clc
adc #6
tas
; push4 imm r 0x2f0
pea.w :bgMain
pea.w bgMain + 0
; push4 imm r 0x2f0
pea.w :player1
pea.w player1 + 0
; call r 0x2f0
jsr.l handleScroll
; add sp, #8
tsa
clc
adc #8
tas
; push4 imm r 0x2f0
pea.w :bgSub
pea.w bgSub + 0
; push4 imm r 0x2f0
pea.w :player1
pea.w player1 + 0
; call r 0x2f0
jsr.l handleScrollSub
; add sp, #8
tsa
clc
adc #8
tas
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 53174 at 54164
jmp.w __local_18
; gsym_addr t 54208 a 53174 ind 54208
; gsym_addr t 0 a 54246 ind 54246
; gsym_addr t 0 a 53174 ind 54280
; load 0
; type 0 reg 0xf0 extra 0x73612065
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 54398
jmp.w __local_19
; gsym_addr t 54438 a 0 ind 54438
__local_19:
; gsym_addr t 54438 a 54472 ind 54472
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ramtmpxfileKyV2MA.data" APPENDTO "globram.data"
__local_dummytmpxfileKyV2MA.data dsb 1

.ENDS

.SECTION "tmpxfileKyV2MA.data" APPENDTO "glob.data"

__local_dummytmpxfileKyV2MA.data: .db 0
.ENDS

.SECTION ".rodata" SUPERFREE

__local_dummytmpxfileKyV2MA.rodata: .db 0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
bgMain dsb 20
bgSub dsb 20
player1 dsb 6
pad0 dsb 2
bg_mutex dsb 1
bgInfo dsb 20
.ENDS
