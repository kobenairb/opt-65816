.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __main_locals 0

.SECTION ".text_0x0" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; call r 0x2f0
jsr.l consoleInit
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #tilesetend + 0, tcc__r0 (type 0x84)
lda.w #:tilesetend
sta.b tcc__r0h
lda.w #tilesetend + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #tileset + 0, tcc__r1 (type 0x84)
lda.w #:tileset
sta.b tcc__r1h
lda.w #tileset + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 8192
; push2 imm r 0xf0
pea.w 16
; push2 imm r 0xf0
pea.w 32
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push4 imm r 0x12f0
pea.w :tilepal
pea.w tilepal + 0
; push4 imm r 0x12f0
pea.w :tileset
pea.w tileset + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 26624
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgSetMapPtr
; add sp, #4
tsa
clc
adc #4
tas
; push2 imm r 0xf0
pea.w 32
; push2 imm r 0xf0
pea.w 128
; push4 imm r 0x12f0
pea.w :pallink
pea.w pallink + 0
; call r 0x2f0
jsr.l dmaCopyCGram
; add sp, #8
tsa
clc
adc #8
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; push2 imm r 0xf0
pea.w 0
; push2 imm r 0xf0
pea.w 4096
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamInitDynamicSprite
; add sp, #9
tsa
clc
adc #9
tas
; call r 0x2f0
jsr.l objInitEngine
; push4 imm r 0xf0
pea.w 0
pea.w 0
; push4 imm r 0x2f0
pea.w :linkupdate
pea.w linkupdate + 0
; push4 imm r 0x2f0
pea.w :linkinit
pea.w linkinit + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l objInitFunctions
; add sp, #13
tsa
clc
adc #13
tas
; push4 imm r 0x12f0
pea.w :objzelda
pea.w objzelda + 0
; call r 0x2f0
jsr.l objLoadObjects
; add sp, #4
tsa
clc
adc #4
tas
; push4 imm r 0x12f0
pea.w :tilesetatt
pea.w tilesetatt + 0
; push4 imm r 0x12f0
pea.w :tilesetdef
pea.w tilesetdef + 0
; push4 imm r 0x12f0
pea.w :mapzelda
pea.w mapzelda + 0
; call r 0x2f0
jsr.l mapLoad
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l setScreenOn
__local_0:
; gtst inv 1 t 0 v 240 r 2741 ind 2741
; uncond jump: nop
; gtst finished; t 0
; load 0
; type 132 reg 0x3f0 extra 0x0
; ld4 [linkox + 0], tcc__r0
lda.l linkox + 0
sta.b tcc__r0
lda.l linkox + 0 + 2
sta.b tcc__r0h
; load 1
; type 132 reg 0x3f0 extra 0x0
; ld4 [linkoy + 0], tcc__r1
lda.l linkoy + 0
sta.b tcc__r1
lda.l linkoy + 0 + 2
sta.b tcc__r1h
; ldpush before load type 0x10 reg 0x101
; load 2
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r2
lda.b [tcc__r1]
sta.b tcc__r2
; ldpush2 (type 0x10 reg 0x2) tcc__r2
pei (tcc__r2)
; ldpush before load type 0x10 reg 0x100
; load 1
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; call r 0x2f0
jsr.l mapUpdateCamera
; add sp, #4
tsa
clc
adc #4
tas
; call r 0x2f0
jsr.l mapUpdate
; call r 0x2f0
jsr.l objUpdateAll
; call r 0x2f0
jsr.l oamInitDynamicSpriteEndFrame
; call r 0x2f0
jsr.l WaitForVBlank
; call r 0x2f0
jsr.l mapVblank
; call r 0x2f0
jsr.l oamVramQueueUpdate
; gjmp_addr 2741 at 3756
jmp.w __local_0
; gsym_addr t 3797 a 2741 ind 3797
; gsym_addr t 0 a 3832 ind 3832
; gsym_addr t 0 a 2741 ind 3864
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 3973
jmp.w __local_1
; gsym_addr t 4011 a 0 ind 4011
__local_1:
; gsym_addr t 4011 a 4043 ind 4043
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ramtmpxfilelPAIV8.data" APPENDTO "globram.data"
__local_dummytmpxfilelPAIV8.data dsb 1

.ENDS

.SECTION "tmpxfilelPAIV8.data" APPENDTO "glob.data"

__local_dummytmpxfilelPAIV8.data: .db 0
.ENDS

.SECTION ".rodata" SUPERFREE

__local_dummytmpxfilelPAIV8.rodata: .db 0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
sprnum dsb 2
.ENDS
