.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __clamp_locals 0
.define __writestring_locals 3
.define __writenum_locals 1
.define __draw_screen_locals 0
.define __new_level_locals 0
.define __die_locals 0
.define __handle_pause_locals 0
.define __run_frame_locals 0
.define __main_locals 0

.SECTION ".text_0x0" SUPERFREE

clamp:
; sub sp,#__clamp_locals
.ifgr __clamp_locals 0
tsa
sec
sbc #__clamp_locals
tas
.endif
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __clamp_locals + 1,s
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc 7
lda 5 + __clamp_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 524 ind 524
; gsym_addr t 0 a 559 ind 559
; ERROR no jump found to patch
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 676 ind 676
; cmp op 0x95 inv 1 v 243 r 676
; cmp ne
bne +
; gsym_addr t 0 a 760 ind 760
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 676
; load 0
; type 16 reg 0x1f2 extra 0x77282072
; ld2 [sp,5],tcc__r0
; stack adjust: fc + disp - loc 7
lda 5 + __clamp_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0x3
; st2 tcc__r0, [sp,3]
; stack adjust: fc + disp - loc 5
lda.b tcc__r0
sta 3 + __clamp_locals + 1,s
__local_0:
; gsym_addr t 676 a 1141 ind 1141
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __clamp_locals + 1,s
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 9
lda 7 + __clamp_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op 0x97
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
beq +
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 1578 ind 1578
; gsym_addr t 0 a 1615 ind 1615
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 1703 ind 1703
; cmp op 0x95 inv 1 v 243 r 1703
; cmp ne
bne +
; gsym_addr t 0 a 1790 ind 1790
brl __local_1
+
; gtst finished; t 1703
; load 0
; type 16 reg 0x1f2 extra 0x77282072
; ld2 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __clamp_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0x3
; st2 tcc__r0, [sp,3]
; stack adjust: fc + disp - loc 5
lda.b tcc__r0
sta 3 + __clamp_locals + 1,s
__local_1:
; gsym_addr t 1703 a 2143 ind 2143
; load 0
; type 16 reg 0x1f2 extra 0x74203832
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __clamp_locals + 1,s
sta.b tcc__r0
; gjmp_addr 0 at 2322
jmp.w __local_2
; gsym_addr t 2360 a 0 ind 2360
__local_2:
; gsym_addr t 2360 a 2392 ind 2392
; add sp, #__clamp_locals
.ifgr __clamp_locals 0
tsa
clc
adc #__clamp_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x1" SUPERFREE

writestring:
; sub sp,#__writestring_locals
.ifgr __writestring_locals 0
tsa
sec
sbc #__writestring_locals
tas
.endif
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,11],tcc__r0
; stack adjust: fc + disp - loc 15
lda 11 + __writestring_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0xf2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -2 + __writestring_locals + 1,s
__local_6:
; load 0
; type 4 reg 0x1f2 extra 0x6e692077
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 8
lda 3 + __writestring_locals + 1,s
sta.b tcc__r0
lda 5 + __writestring_locals + 1,s
sta.b tcc__r0h
; load 1
; type 1 reg 0x1100 extra 0x614d2047
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
xba
xba
bpl +
ora.w #$ff00
+
sta.b tcc__r1
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c 3 r type 0x11)
; length xxy 2 vtop->type 0x0
; nop
lda.b tcc__r1
and.w #255
sta.b tcc__r1
; store r 0x1 fr 0x51f2 ft 0x11 fc 0xfffffffd
; st1 tcc__r1, [sp,-3]
; stack adjust: fc + disp - loc 2
sep #$20
lda.b tcc__r1
sta -3 + __writestring_locals + 1,s
rep #$20
; gtst inv 1 t 0 v 1 r 3665 ind 3665
; gsym_addr t 0 a 3702 ind 3702
; tcc__r1 to compare reg
lda.b tcc__r1 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 3790 ind 3790
; cmp op 0x95 inv 1 v 243 r 3790
; cmp ne
bne +
; gsym_addr t 0 a 3877 ind 3877
brl __local_3
+
; gtst finished; t 3790
; load 0
; type 17 reg 0x51f2 extra 0x65697620
; ld1 [sp,-3],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -3 + __writestring_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #10
ldx #1
lda.b tcc__r0
sec
sbc #10
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 4241 ind 4241
; gsym_addr t 0 a 4278 ind 4278
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 4366 ind 4366
; cmp op 0x95 inv 1 v 243 r 4366
; cmp ne
bne +
; gsym_addr t 0 a 4453 ind 4453
brl __local_4
+
; gtst finished; t 4366
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 3
lda -2 + __writestring_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #32
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 3
lda.b tcc__r0
sta -2 + __writestring_locals + 1,s
; load 0
; type 16 reg 0x1f2 extra 0x75287468
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 3
lda -2 + __writestring_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xb
; st2 tcc__r0, [sp,11]
; stack adjust: fc + disp - loc 16
lda.b tcc__r0
sta 11 + __writestring_locals + 1,s
; gjmp_addr 0 at 5284
jmp.w __local_5
; gsym_addr t 5322 a 0 ind 5322
__local_4:
; gsym_addr t 4366 a 5354 ind 5354
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,11],tcc__r0
; stack adjust: fc + disp - loc 16
lda 11 + __writestring_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x6e612038
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 12
lda 7 + __writestring_locals + 1,s
sta.b tcc__r1
lda 9 + __writestring_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 17 reg 0x51f2 extra 0x65697620
; ld1 [sp,-3],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -3 + __writestring_locals + 1,s
rep #$20
sta.b tcc__r0
; load 2
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,13],tcc__r2
; stack adjust: fc + disp - loc 18
lda 13 + __writestring_locals + 1,s
sta.b tcc__r2
; gen_opi len 2 op +
; adc tcc__r2 (0x2), tcc__r0 (0x0) (fr type 0x10 c -3 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.b tcc__r2
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x7
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x1f2 extra 0x75287468
; ld2 [sp,11],tcc__r0
; stack adjust: fc + disp - loc 16
lda 11 + __writestring_locals + 1,s
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x3d
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 11 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xb
; st2 tcc__r0, [sp,11]
; stack adjust: fc + disp - loc 16
lda.b tcc__r0
sta 11 + __writestring_locals + 1,s
__local_5:
; gsym_addr t 5322 a 7088 ind 7088
; load 0
; type 4 reg 0x1f2 extra 0x6e692077
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 8
lda 3 + __writestring_locals + 1,s
sta.b tcc__r0
lda 5 + __writestring_locals + 1,s
sta.b tcc__r0h
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 3 r type 0x4)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x4 fc 0x3
; st4 tcc__r0, [sp,3]
; stack adjust: fc + disp - loc 8
lda.b tcc__r0
sta 3 + __writestring_locals + 1,s
lda.b tcc__r0h
sta 5 + __writestring_locals + 1,s
; gjmp_addr 2973 at 7763
jmp.w __local_6
; gsym_addr t 7804 a 2973 ind 7804
__local_3:
; gsym_addr t 3790 a 7839 ind 7839
; gsym_addr t 0 a 2973 ind 7874
; gsym_addr t 0 a 7906 ind 7906
; add sp, #__writestring_locals
.ifgr __writestring_locals 0
tsa
clc
adc #__writestring_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x2" SUPERFREE

writenum:
; sub sp,#__writenum_locals
.ifgr __writenum_locals 0
tsa
sec
sbc #__writenum_locals
tas
.endif
; load 0
; type 17 reg 0x1f2 extra 0x69727461
; ld1 [sp,5],tcc__r0
; stack adjust: fc + disp - loc 8
lda.w #0
sep #$20
lda 5 + __writenum_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 5 r type 0x10)
; length xxy 2 vtop->type 0x0
dec.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,10],tcc__r1
; stack adjust: fc + disp - loc 13
lda 10 + __writenum_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x10 c 10 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; store r 0x1 fr 0x1f2 ft 0x10 fc 0xa
; st2 tcc__r1, [sp,10]
; stack adjust: fc + disp - loc 13
lda.b tcc__r1
sta 10 + __writenum_locals + 1,s
; gtst inv 1 t 0 v 242 r 8951 ind 8951
; load 0
; type 16 reg 0x1f2 extra 0x760a2f2a
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 6
lda 3 + __writenum_locals + 1,s
sta.b tcc__r0
; gsym_addr t 0 a 9137 ind 9137
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 9225 ind 9225
; cmp op 0x95 inv 1 v 243 r 9225
; cmp ne
bne +
; gsym_addr t 0 a 9312 ind 9312
brl __local_7
+
; gtst finished; t 9225
; gtst inv 1 t 0 v 244 r 9384 ind 9384
; VT_jmp r 9384 t 0 ji 0 inv 1 vtop->c.i 9225
; gjmp_addr 0 at 9469
jmp.w __local_8
; gsym_addr t 9507 a 0 ind 9507
__local_7:
; gsym_addr t 9225 a 9539 ind 9539
; gtst finished; t 9507
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,10],tcc__r0
; stack adjust: fc + disp - loc 13
lda 10 + __writenum_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x776b6361
; ld4 [sp,6],tcc__r1
; stack adjust: fc + disp - loc 9
lda 6 + __writenum_locals + 1,s
sta.b tcc__r1
lda 8 + __writenum_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x4 c 6 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x1f2 extra 0x6e612038
; ld2 [sp,12],tcc__r0
; stack adjust: fc + disp - loc 15
lda 12 + __writenum_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x6
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; gjmp_addr 0 at 10393
jmp.w __local_9
; gsym_addr t 10432 a 0 ind 10432
__local_8:
; gsym_addr t 9507 a 10466 ind 10466
__local_15:
; gtst inv 1 t 0 v 242 r 10503 ind 10503
; load 0
; type 17 reg 0x1f2 extra 0x69727461
; ld1 [sp,5],tcc__r0
; stack adjust: fc + disp - loc 8
lda.w #0
sep #$20
lda 5 + __writenum_locals + 1,s
rep #$20
sta.b tcc__r0
; gsym_addr t 0 a 10718 ind 10718
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 10808 ind 10808
; cmp op 0x95 inv 1 v 243 r 10808
; cmp ne
bne +
; gsym_addr t 0 a 10898 ind 10898
brl __local_10
+
; gtst finished; t 10808
; gtst inv 1 t 10808 v 242 r 10974 ind 10974
; load 0
; type 16 reg 0x1f2 extra 0x760a2f2a
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 6
lda 3 + __writenum_locals + 1,s
sta.b tcc__r0
; gsym_addr t 10808 a 11166 ind 11166
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 10808 v 243 r 11260 ind 11260
; cmp op 0x95 inv 1 v 243 r 11260
; cmp ne
bne +
__local_10:
; gsym_addr t 10808 a 11354 ind 11354
brl __local_11
+
; gtst finished; t 11260
; gtst inv 1 t 0 v 245 r 11434 ind 11434
; VT_jmp r 11434 t 0 ji 1 inv 1 vtop->c.i 11260
; gsym_addr t 0 a 11523 ind 11523
; gtst finished; t 11260
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 6
lda 3 + __writenum_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 0xb1
; div #10, tcc__r0
ldx.b tcc__r0
lda.w #10
jsr.l tcc__udiv
stx.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xffffffff
; st1 tcc__r0, [sp,-1]
; stack adjust: fc + disp - loc 2
sep #$20
lda.b tcc__r0
sta -1 + __writenum_locals + 1,s
rep #$20
; gtst inv 0 t 0 v 242 r 11987 ind 11987
; load 0
; type 16 reg 0x1f2 extra 0x760a2f2a
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 6
lda 3 + __writenum_locals + 1,s
sta.b tcc__r0
; gsym_addr t 0 a 12175 ind 12175
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 0 t 0 v 243 r 12265 ind 12265
; cmp op 0x95 inv 0 v 243 r 12265
; cmp ne
beq +
; gsym_addr t 0 a 12355 ind 12355
brl __local_12
+
; gtst finished; t 12265
; gtst inv 0 t 12265 v 242 r 12431 ind 12431
; load 0
; type 17 reg 0x51f2 extra 0x4d746573
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __writenum_locals + 1,s
rep #$20
sta.b tcc__r0
; gsym_addr t 12265 a 12653 ind 12653
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 0 t 12265 v 243 r 12747 ind 12747
; cmp op 0x95 inv 0 v 243 r 12747
; cmp ne
beq +
__local_12:
; gsym_addr t 12265 a 12841 ind 12841
brl __local_13
+
; gtst finished; t 12747
; gtst inv 1 t 0 v 244 r 12921 ind 12921
; VT_jmp r 12921 t 0 ji 0 inv 1 vtop->c.i 12747
; gjmp_addr 0 at 13010
jmp.w __local_14
; gsym_addr t 13050 a 0 ind 13050
__local_13:
; gsym_addr t 12747 a 13084 ind 13084
; gtst finished; t 13050
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,10],tcc__r0
; stack adjust: fc + disp - loc 13
lda 10 + __writenum_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x776b6361
; ld4 [sp,6],tcc__r1
; stack adjust: fc + disp - loc 9
lda 6 + __writenum_locals + 1,s
sta.b tcc__r1
lda 8 + __writenum_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x4 c 6 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 17 reg 0x51f2 extra 0x4d746573
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __writenum_locals + 1,s
rep #$20
sta.b tcc__r0
; load 2
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,12],tcc__r2
; stack adjust: fc + disp - loc 15
lda 12 + __writenum_locals + 1,s
sta.b tcc__r2
; gen_opi len 2 op +
; adc tcc__r2 (0x2), tcc__r0 (0x0) (fr type 0x10 c -1 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.b tcc__r2
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x6
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
__local_14:
; gsym_addr t 13050 a 14277 ind 14277
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 6
lda 3 + __writenum_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 0xb0
; div #10, tcc__r0
ldx.b tcc__r0
lda.w #10
jsr.l tcc__udiv
lda.b tcc__r9
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0x3
; st2 tcc__r0, [sp,3]
; stack adjust: fc + disp - loc 6
lda.b tcc__r0
sta 3 + __writenum_locals + 1,s
; load 0
; type 16 reg 0x1f2 extra 0x43206665
; ld2 [sp,10],tcc__r0
; stack adjust: fc + disp - loc 13
lda 10 + __writenum_locals + 1,s
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x6
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 10 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #65535
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xa
; st2 tcc__r0, [sp,10]
; stack adjust: fc + disp - loc 13
lda.b tcc__r0
sta 10 + __writenum_locals + 1,s
; load 0
; type 17 reg 0x1f2 extra 0x69727461
; ld1 [sp,5],tcc__r0
; stack adjust: fc + disp - loc 8
lda.w #0
sep #$20
lda 5 + __writenum_locals + 1,s
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 5 r type 0x11)
; length xxy 2 vtop->type 0x0
dec.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x11 fc 0x5
; st1 tcc__r0, [sp,5]
; stack adjust: fc + disp - loc 8
sep #$20
lda.b tcc__r0
sta 5 + __writenum_locals + 1,s
rep #$20
; gjmp_addr 10503 at 15865
jmp.w __local_15
; gsym_addr t 15909 a 10503 ind 15909
__local_11:
; gsym_addr t 11260 a 15947 ind 15947
; gsym_addr t 0 a 10503 ind 15985
__local_9:
; gsym_addr t 10432 a 16019 ind 16019
; gsym_addr t 0 a 16057 ind 16057
; add sp, #__writenum_locals
.ifgr __writenum_locals 0
tsa
clc
adc #__writenum_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x3" SUPERFREE

draw_screen:
; sub sp,#__draw_screen_locals
.ifgr __draw_screen_locals 0
tsa
sec
sbc #__draw_screen_locals
tas
.endif
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 276
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 271
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; push2 imm r 0xf0
pea.w 200
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 4
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x1
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #8
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 272
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; push2 imm r 0xf0
pea.w 200
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 8
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x1
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #16
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 272
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; push2 imm r 0xf0
pea.w 200
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 12
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x1
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #24
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 273
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; push2 imm r 0xf0
pea.w 200
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 16
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 0 reg 0x3f0 extra 0x1
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x10)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.w #3
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0x2
; ld2 [pos + 2], tcc__r1
lda.l pos + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c 2 r type 0x10)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r1
adc.w #3
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 277
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 20
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x1
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 274
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 204
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 24
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x1
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #12
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 275
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 204
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 28
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x1
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #20
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 275
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 204
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 32
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x1
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #28
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 274
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 204
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 36
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; gsym_addr t 0 a 23331 ind 23331
; add sp, #__draw_screen_locals
.ifgr __draw_screen_locals 0
tsa
clc
adc #__draw_screen_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x4" SUPERFREE

new_level:
; sub sp,#__new_level_locals
.ifgr __new_level_locals 0
tsa
sec
sbc #__new_level_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x6163532f
; ld2 [level + 0], tcc__r0
lda.l level + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [level,0]
lda.b tcc__r0
sta.l level + 0
; load 0
; type 16 reg 0x3f0 extra 0x69757628
; ld2 [level2 + 0], tcc__r0
lda.l level2 + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [level2,0]
lda.b tcc__r0
sta.l level2 + 0
; load 0
; type 0 reg 0xf0 extra 0x64656e67
; ld2 #94,tcc__r0
lda.w #94
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [pos,0]
lda.b tcc__r0
sta.l pos + 0
; load 0
; type 0 reg 0xf0 extra 0x76282a28
; ld2 #109,tcc__r0
lda.w #109
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [pos,2]
lda.b tcc__r0
sta.l pos + 2
; load 0
; type 16 reg 0xf0 extra 0x69623820
; ld2 #80,tcc__r0
lda.w #80
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
; push2 imm r 0xf0
pea.w 1062
; push2 imm r 0xf0
pea.w 726
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push1 imm r 0xf0
sep #$20
lda #8
pha
rep #$20
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x2020200a
; ld2 [level2 + 0], tcc__r0
lda.l level2 + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l writenum
; add sp, #11
tsa
clc
adc #11
tas
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 584
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfilePR05sz9
pea.w tccs_L.tmpxfilePR05sz9 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [level + 0], tcc__r0
lda.l level + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #3
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #11
lda.b tcc__r0
ldy.w #11
-
asl a
dey
bne -
+
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x20212a2f
; ld4 #bg2map + 0, tcc__r1 (type 0x84)
lda.w #:bg2map
sta.b tcc__r1h
lda.w #bg2map + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; push2 imm r 0xf0
pea.w 2048
; ldpush before load type 0x4 reg 0x1
; ldpush4 (type 0x4 reg 0x1) tcc__r1
pei (tcc__r1h)
pei (tcc__r1)
; push4 imm r 0x2f0
pea.w :backmap
pea.w backmap + 0
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; push2 imm r 0xf0
pea.w 100
; push4 imm r 0x2f0
pea.w :map
pea.w map + 0
; push4 imm r 0x2f0
pea.w :blocks
pea.w blocks + 0
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [color + 0], tcc__r0
lda.l color + 0
sta.b tcc__r0
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, #6
ldx #1
lda.b tcc__r0
sec
sbc.w #6
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 27051 ind 27051
; gsym_addr t 0 a 27090 ind 27090
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 27180 ind 27180
; cmp op 0x95 inv 1 v 243 r 27180
; cmp ne
bne +
; gsym_addr t 0 a 27270 ind 27270
brl __local_16
+
; gtst finished; t 27180
; load 0
; type 16 reg 0x3f0 extra 0x706f2074
; ld2 [color + 0], tcc__r0
lda.l color + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0xffa01178
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [color,0]
lda.b tcc__r0
sta.l color + 0
; gjmp_addr 0 at 27801
jmp.w __local_17
; gsym_addr t 27841 a 0 ind 27841
__local_16:
; gsym_addr t 27180 a 27875 ind 27875
; load 0
; type 16 reg 0xf0 extra 0x706f2074
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [color,0]
lda.b tcc__r0
sta.l color + 0
__local_17:
; gsym_addr t 27841 a 28091 ind 28091
; load 0
; type 16 reg 0x3f0 extra 0x1
; ld2 [color + 0], tcc__r0
lda.l color + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #4
lda.b tcc__r0
asl a
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x31327830
; ld4 #backpal + 0, tcc__r1 (type 0x84)
lda.w #:backpal
sta.b tcc__r1h
lda.w #backpal + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; push2 imm r 0xf0
pea.w 16
; ldpush before load type 0x4 reg 0x1
; ldpush4 (type 0x4 reg 0x1) tcc__r1
pei (tcc__r1h)
pei (tcc__r1)
; push4 imm r 0x2f0
pea.w :pal
pea.w pal + 16
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; load 0
; type 16 reg 0xf0 extra 0x76282a28
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [b,0]
lda.b tcc__r0
sta.l b + 0
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [j,0]
sep #$20
lda.b tcc__r0
sta.l j + 0
rep #$20
__local_20:
; load 0
; type 17 reg 0x53f0 extra 0x230a2f2a
; ld1 [j + 0], tcc__r0
lda.w #0
sep #$20
lda.l j + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #10
ldx #1
lda.b tcc__r0
sec
sbc.w #10
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 29482 ind 29482
; gsym_addr t 0 a 29521 ind 29521
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 29611 ind 29611
; cmp op 0x95 inv 1 v 243 r 29611
; cmp ne
bne +
; gsym_addr t 0 a 29701 ind 29701
brl __local_18
+
; gtst finished; t 29611
; gjmp_addr 0 at 29777
jmp.w __local_19
; gsym_addr t 29817 a 0 ind 29817
__local_26:
; load 0
; type 17 reg 0x53f0 extra 0x230a2f2a
; ld1 [j + 0], tcc__r0
lda.w #0
sep #$20
lda.l j + 0
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0xffffffff
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [j,0]
sep #$20
lda.b tcc__r0
sta.l j + 0
rep #$20
; gjmp_addr 29223 at 30335
jmp.w __local_20
; gsym_addr t 30379 a 29223 ind 30379
__local_19:
; gsym_addr t 29817 a 30417 ind 30417
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
__local_23:
; load 0
; type 17 reg 0x53f0 extra 0x20202946
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #20
ldx #1
lda.b tcc__r0
sec
sbc.w #20
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 30896 ind 30896
; gsym_addr t 0 a 30935 ind 30935
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 31025 ind 31025
; cmp op 0x95 inv 1 v 243 r 31025
; cmp ne
bne +
; gsym_addr t 0 a 31115 ind 31115
brl __local_21
+
; gtst finished; t 31025
; gjmp_addr 0 at 31191
jmp.w __local_22
; gsym_addr t 31231 a 0 ind 31231
__local_25:
; load 0
; type 17 reg 0x53f0 extra 0x20202946
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0xffffffff
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
; load 0
; type 17 reg 0x53f0 extra 0x20202946
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x80d6ec0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
; gjmp_addr 30637 at 32232
jmp.w __local_23
; gsym_addr t 32276 a 30637 ind 32276
__local_22:
; gsym_addr t 31231 a 32314 ind 32314
; load 0
; type 36 reg 0x2f0 extra 0x65746e65
; ld100 #blocks + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blocks
sta.b tcc__r0h
lda.w #blocks + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [b + 0], tcc__r1
lda.l b + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x24 c 0 r type 0x10)
; length xxy 100 vtop->type 0x24
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x374d5f47
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; store r 0x1 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r1, [a,0]
lda.b tcc__r1
sta.l a + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [a + 0], tcc__r0
lda.l a + 0
sta.b tcc__r0
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, #8
ldx #1
lda.b tcc__r0
sec
sbc.w #8
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 33218 ind 33218
; gsym_addr t 0 a 33257 ind 33257
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 33347 ind 33347
; cmp op 0x95 inv 1 v 243 r 33347
; cmp ne
bne +
; gsym_addr t 0 a 33437 ind 33437
brl __local_24
+
; gtst finished; t 33347
; load 0
; type 17 reg 0x53f0 extra 0x230a2f2a
; ld1 [j + 0], tcc__r0
lda.w #0
sep #$20
lda.l j + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #5
lda.b tcc__r0
ldy.w #5
-
asl a
dey
bne -
+
sta.b tcc__r0
; load 1
; type 17 reg 0x53f0 extra 0x20202946
; ld1 [i + 0], tcc__r1
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x10)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [c,0]
lda.b tcc__r0
sta.l c + 0
; load 0
; type 16 reg 0x3f0 extra 0x656d6172
; ld2 [blockcount + 0], tcc__r0
lda.l blockcount + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x3d
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [blockcount,0]
lda.b tcc__r0
sta.l blockcount + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #98
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x68787831
; ld2048 #blockmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blockmap
sta.b tcc__r1h
lda.w #blockmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [a + 0], tcc__r0
lda.l a + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #10
lda.b tcc__r0
ldy.w #10
-
asl a
dey
bne -
+
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #13
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #99
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x68787831
; ld2048 #blockmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blockmap
sta.b tcc__r1h
lda.w #blockmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [a + 0], tcc__r0
lda.l a + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #10
lda.b tcc__r0
ldy.w #10
-
asl a
dey
bne -
+
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #14
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #131
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x20684231
; ld2048 #backmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:backmap
sta.b tcc__r1h
lda.w #backmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #132
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x20684231
; ld2048 #backmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:backmap
sta.b tcc__r1h
lda.w #backmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
__local_24:
; gsym_addr t 33347 a 38857 ind 38857
; load 0
; type 16 reg 0x3f0 extra 0x76282a28
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [b,0]
lda.b tcc__r0
sta.l b + 0
; gjmp_addr 31265 at 39327
jmp.w __local_25
; gsym_addr t 39371 a 31265 ind 39371
__local_21:
; gsym_addr t 31025 a 39409 ind 39409
; gsym_addr t 0 a 31265 ind 39447
; gjmp_addr 29851 at 39481
jmp.w __local_26
; gsym_addr t 39525 a 29851 ind 39525
__local_18:
; gsym_addr t 29611 a 39563 ind 39563
; gsym_addr t 0 a 29851 ind 39601
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 512
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :pal
pea.w pal + 0
; call r 0x2f0
jsr.l dmaCopyCGram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 1024
; push4 imm r 0x2f0
pea.w :backmap
pea.w backmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; call r 0x2f0
jsr.l draw_screen
__local_28:
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 40438 ind 40438
; gsym_addr t 0 a 40477 ind 40477
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 40567 ind 40567
; cmp op 0x95 inv 1 v 243 r 40567
; cmp ne
bne +
; gsym_addr t 0 a 40657 ind 40657
brl __local_27
+
; gtst finished; t 40567
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 40225 at 40768
jmp.w __local_28
; gsym_addr t 40812 a 40225 ind 40812
__local_27:
; gsym_addr t 40567 a 40850 ind 40850
; gsym_addr t 0 a 40225 ind 40888
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 584
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfilePR05sz10
pea.w tccs_L.tmpxfilePR05sz10 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 649
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfilePR05sz11
pea.w tccs_L.tmpxfilePR05sz11 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; gsym_addr t 0 a 41666 ind 41666
; add sp, #__new_level_locals
.ifgr __new_level_locals 0
tsa
clc
adc #__new_level_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x5" SUPERFREE

die:
; sub sp,#__die_locals
.ifgr __die_locals 0
tsa
sec
sbc #__die_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [lives + 0], tcc__r0
lda.l lives + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 42136 ind 42136
; gsym_addr t 0 a 42175 ind 42175
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 42265 ind 42265
; cmp op 0x95 inv 1 v 243 r 42265
; cmp ne
bne +
; gsym_addr t 0 a 42355 ind 42355
brl __local_29
+
; gtst finished; t 42265
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 615
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfilePR05sz12
pea.w tccs_L.tmpxfilePR05sz12 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
__local_30:
; gtst inv 1 t 0 v 240 r 42909 ind 42909
; uncond jump: nop
; gtst finished; t 0
; gjmp_addr 42909 at 42990
jmp.w __local_30
; gsym_addr t 43034 a 42909 ind 43034
; gsym_addr t 0 a 43072 ind 43072
; gsym_addr t 0 a 42909 ind 43106
__local_29:
; gsym_addr t 42265 a 43140 ind 43140
; load 0
; type 16 reg 0x3f0 extra 0x2a203874
; ld2 [lives + 0], tcc__r0
lda.l lives + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #65535
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [lives,0]
lda.b tcc__r0
sta.l lives + 0
; load 0
; type 0 reg 0xf0 extra 0x64656e67
; ld2 #94,tcc__r0
lda.w #94
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [pos,0]
lda.b tcc__r0
sta.l pos + 0
; load 0
; type 0 reg 0xf0 extra 0x76282a28
; ld2 #109,tcc__r0
lda.w #109
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [pos,2]
lda.b tcc__r0
sta.l pos + 2
; load 0
; type 16 reg 0xf0 extra 0x69623820
; ld2 #80,tcc__r0
lda.w #80
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
; push2 imm r 0xf0
pea.w 1062
; push2 imm r 0xf0
pea.w 310
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push1 imm r 0xf0
sep #$20
lda #8
pha
rep #$20
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x2020200a
; ld2 [lives + 0], tcc__r0
lda.l lives + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l writenum
; add sp, #11
tsa
clc
adc #11
tas
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 584
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfilePR05sz13
pea.w tccs_L.tmpxfilePR05sz13 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; call r 0x2f0
jsr.l draw_screen
__local_32:
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 45327 ind 45327
; gsym_addr t 0 a 45366 ind 45366
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 45456 ind 45456
; cmp op 0x95 inv 1 v 243 r 45456
; cmp ne
bne +
; gsym_addr t 0 a 45546 ind 45546
brl __local_31
+
; gtst finished; t 45456
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 45114 at 45657
jmp.w __local_32
; gsym_addr t 45701 a 45114 ind 45701
__local_31:
; gsym_addr t 45456 a 45739 ind 45739
; gsym_addr t 0 a 45114 ind 45777
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 584
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfilePR05sz14
pea.w tccs_L.tmpxfilePR05sz14 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 649
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfilePR05sz15
pea.w tccs_L.tmpxfilePR05sz15 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; gsym_addr t 0 a 46555 ind 46555
; add sp, #__die_locals
.ifgr __die_locals 0
tsa
clc
adc #__die_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x6" SUPERFREE

handle_pause:
; sub sp,#__handle_pause_locals
.ifgr __handle_pause_locals 0
tsa
sec
sbc #__handle_pause_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #4096
sta.b tcc__r0
; gen_opi len 2 op 0x95
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
bne +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 47207 ind 47207
; gsym_addr t 0 a 47246 ind 47246
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 47336 ind 47336
; cmp op 0x95 inv 1 v 243 r 47336
; cmp ne
bne +
; gsym_addr t 0 a 47426 ind 47426
brl __local_33
+
; gtst finished; t 47336
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 617
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfilePR05sz16
pea.w tccs_L.tmpxfilePR05sz16 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
__local_35:
; load 0
; type 16 reg 0x3f0 extra 0x95
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; gen_opi len 2 op 0x95
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
bne +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 48193 ind 48193
; gsym_addr t 0 a 48232 ind 48232
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 48322 ind 48322
; cmp op 0x95 inv 1 v 243 r 48322
; cmp ne
bne +
; gsym_addr t 0 a 48412 ind 48412
brl __local_34
+
; gtst finished; t 48322
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 47980 at 48523
jmp.w __local_35
; gsym_addr t 48567 a 47980 ind 48567
__local_34:
; gsym_addr t 48322 a 48605 ind 48605
; gsym_addr t 0 a 47980 ind 48643
__local_37:
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #4096
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 49056 ind 49056
; gsym_addr t 0 a 49095 ind 49095
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 49185 ind 49185
; cmp op 0x95 inv 1 v 243 r 49185
; cmp ne
bne +
; gsym_addr t 0 a 49275 ind 49275
brl __local_36
+
; gtst finished; t 49185
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 48677 at 49386
jmp.w __local_37
; gsym_addr t 49430 a 48677 ind 49430
__local_36:
; gsym_addr t 49185 a 49468 ind 49468
; gsym_addr t 0 a 48677 ind 49506
__local_39:
; load 0
; type 16 reg 0x3f0 extra 0x95
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; gen_opi len 2 op 0x95
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
bne +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 49753 ind 49753
; gsym_addr t 0 a 49792 ind 49792
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 49882 ind 49882
; cmp op 0x95 inv 1 v 243 r 49882
; cmp ne
bne +
; gsym_addr t 0 a 49972 ind 49972
brl __local_38
+
; gtst finished; t 49882
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 49540 at 50083
jmp.w __local_39
; gsym_addr t 50127 a 49540 ind 50127
__local_38:
; gsym_addr t 49882 a 50165 ind 50165
; gsym_addr t 0 a 49540 ind 50203
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 617
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfilePR05sz17
pea.w tccs_L.tmpxfilePR05sz17 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
__local_33:
; gsym_addr t 47336 a 50715 ind 50715
; gsym_addr t 0 a 50753 ind 50753
; add sp, #__handle_pause_locals
.ifgr __handle_pause_locals 0
tsa
clc
adc #__handle_pause_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x7" SUPERFREE

run_frame:
; sub sp,#__run_frame_locals
.ifgr __run_frame_locals 0
tsa
sec
sbc #__run_frame_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x28204c45
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [pad0,0]
lda.b tcc__r0
sta.l pad0 + 0
; call r 0x2f0
jsr.l handle_pause
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #128
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 51543 ind 51543
; gsym_addr t 0 a 51582 ind 51582
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 51672 ind 51672
; cmp op 0x95 inv 1 v 243 r 51672
; cmp ne
bne +
; gsym_addr t 0 a 51762 ind 51762
brl __local_40
+
; gtst finished; t 51672
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #256
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 52098 ind 52098
; gsym_addr t 0 a 52137 ind 52137
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 52227 ind 52227
; cmp op 0x95 inv 1 v 243 r 52227
; cmp ne
bne +
; gsym_addr t 0 a 52317 ind 52317
brl __local_41
+
; gtst finished; t 52227
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
__local_41:
; gsym_addr t 52227 a 52732 ind 52732
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #512
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 53030 ind 53030
; gsym_addr t 0 a 53069 ind 53069
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 53159 ind 53159
; cmp op 0x95 inv 1 v 243 r 53159
; cmp ne
bne +
; gsym_addr t 0 a 53249 ind 53249
brl __local_42
+
; gtst finished; t 53159
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #4
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
__local_42:
; gsym_addr t 53159 a 53664 ind 53664
; gjmp_addr 0 at 53702
jmp.w __local_43
; gsym_addr t 53742 a 0 ind 53742
__local_40:
; gsym_addr t 51672 a 53776 ind 53776
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #256
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 54074 ind 54074
; gsym_addr t 0 a 54113 ind 54113
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 54203 ind 54203
; cmp op 0x95 inv 1 v 243 r 54203
; cmp ne
bne +
; gsym_addr t 0 a 54293 ind 54293
brl __local_44
+
; gtst finished; t 54203
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
__local_44:
; gsym_addr t 54203 a 54695 ind 54695
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #512
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 54993 ind 54993
; gsym_addr t 0 a 55032 ind 55032
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 55122 ind 55122
; cmp op 0x95 inv 1 v 243 r 55122
; cmp ne
bne +
; gsym_addr t 0 a 55212 ind 55212
brl __local_45
+
; gtst finished; t 55122
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
dec.b tcc__r0
dec.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
__local_45:
; gsym_addr t 55122 a 55614 ind 55614
__local_43:
; gsym_addr t 53742 a 55652 ind 55652
; push2 imm r 0xf0
pea.w 144
; push2 imm r 0xf0
pea.w 16
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x656c6c69
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l clamp
; add sp, #6
tsa
clc
adc #6
tas
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0x0
; ld2 [vel + 0], tcc__r1
lda.l vel + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x0)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [pos,0]
lda.b tcc__r0
sta.l pos + 0
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0x0
; ld2 [vel + 2], tcc__r1
lda.l vel + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 2 r type 0x0)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [pos,2]
lda.b tcc__r0
sta.l pos + 2
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; gen_opi len 2 op 0x9f
; cmpcd tcc__r0, #171
ldx #1
lda.b tcc__r0
sec
sbc.w #171
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 57181 ind 57181
; gsym_addr t 0 a 57220 ind 57220
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 57310 ind 57310
; cmp op 0x95 inv 1 v 243 r 57310
; cmp ne
bne +
; gsym_addr t 0 a 57400 ind 57400
brl __local_46
+
; gtst finished; t 57310
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0x0
; ld2 [vel + 0], tcc__r1
lda.l vel + 0
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x0)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [vel,0]
lda.b tcc__r0
sta.l vel + 0
; load 0
; type 0 reg 0xf0 extra 0x64656e67
; ld2 #171,tcc__r0
lda.w #171
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [pos,0]
lda.b tcc__r0
sta.l pos + 0
; gjmp_addr 0 at 58069
jmp.w __local_47
; gsym_addr t 58109 a 0 ind 58109
__local_46:
; gsym_addr t 57310 a 58143 ind 58143
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #16
ldx #1
lda.b tcc__r0
sec
sbc.w #16
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 58408 ind 58408
; gsym_addr t 0 a 58447 ind 58447
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 58537 ind 58537
; cmp op 0x95 inv 1 v 243 r 58537
; cmp ne
bne +
; gsym_addr t 0 a 58627 ind 58627
brl __local_48
+
; gtst finished; t 58537
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0x0
; ld2 [vel + 0], tcc__r1
lda.l vel + 0
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x0)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [vel,0]
lda.b tcc__r0
sta.l vel + 0
; load 0
; type 0 reg 0xf0 extra 0x64656e67
; ld2 #16,tcc__r0
lda.w #16
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [pos,0]
lda.b tcc__r0
sta.l pos + 0
__local_48:
; gsym_addr t 58537 a 59294 ind 59294
__local_47:
; gsym_addr t 58109 a 59332 ind 59332
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #15
ldx #1
lda.b tcc__r0
sec
sbc.w #15
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 59597 ind 59597
; gsym_addr t 0 a 59636 ind 59636
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 59726 ind 59726
; cmp op 0x95 inv 1 v 243 r 59726
; cmp ne
bne +
; gsym_addr t 0 a 59816 ind 59816
brl __local_49
+
; gtst finished; t 59726
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0x0
; ld2 [vel + 2], tcc__r1
lda.l vel + 2
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x0)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [vel,2]
lda.b tcc__r0
sta.l vel + 2
; gjmp_addr 0 at 60309
jmp.w __local_50
; gsym_addr t 60349 a 0 ind 60349
__local_49:
; gsym_addr t 59726 a 60383 ind 60383
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; gen_opi len 2 op 0x9f
; cmpcd tcc__r0, #195
ldx #1
lda.b tcc__r0
sec
sbc.w #195
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 60657 ind 60657
; gsym_addr t 0 a 60696 ind 60696
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 60786 ind 60786
; cmp op 0x95 inv 1 v 243 r 60786
; cmp ne
bne +
; gsym_addr t 0 a 60876 ind 60876
brl __local_51
+
; gtst finished; t 60786
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #203
ldx #1
lda.b tcc__r0
sec
sbc.w #203
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 61181 ind 61181
; gsym_addr t 0 a 61220 ind 61220
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 61310 ind 61310
; cmp op 0x95 inv 1 v 243 r 61310
; cmp ne
bne +
; gsym_addr t 0 a 61400 ind 61400
brl __local_52
+
; gtst finished; t 61310
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [px + 0], tcc__r1
lda.l px + 0
sta.b tcc__r1
; gen_opi len 2 op 0x93
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 61781 ind 61781
; gsym_addr t 0 a 61820 ind 61820
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 61910 ind 61910
; cmp op 0x95 inv 1 v 243 r 61910
; cmp ne
bne +
; gsym_addr t 0 a 62000 ind 62000
brl __local_53
+
; gtst finished; t 61910
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #27
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [pos + 0], tcc__r1
lda.l pos + 0
sta.b tcc__r1
; gen_opi len 2 op 0x96
; ucmpcd tcc__r1, tcc__r0
ldx #1
lda.b tcc__r1
sec
sbc.b tcc__r0
tay
beq ++
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 61910 v 5 r 62550 ind 62550
; gsym_addr t 61910 a 62593 ind 62593
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 61910 v 243 r 62687 ind 62687
; cmp op 0x95 inv 1 v 243 r 62687
; cmp ne
bne +
__local_53:
; gsym_addr t 61910 a 62781 ind 62781
brl __local_54
+
; gtst finished; t 62687
; gtst inv 1 t 0 v 245 r 62861 ind 62861
; VT_jmp r 62861 t 0 ji 1 inv 1 vtop->c.i 62687
; gsym_addr t 0 a 62950 ind 62950
; gtst finished; t 62687
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [px + 0], tcc__r1
lda.l px + 0
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x11)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; gen_opi len 2 op 0xb0
; div #7, tcc__r0
ldx.b tcc__r0
lda.w #7
jsr.l tcc__udiv
lda.b tcc__r9
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [k,0]
sep #$20
lda.b tcc__r0
sta.l k + 0
rep #$20
; load 0
; type 17 reg 0x53f0 extra 0x72625c20
; ld1 [k + 0], tcc__r0
lda.w #0
sep #$20
lda.l k + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x20656e69
; ld16 #dir + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:dir
sta.b tcc__r1h
lda.w #dir + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 16 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 0 reg 0x101 extra 0x64656e67
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [vel,0]
lda.b tcc__r0
sta.l vel + 0
; load 0
; type 17 reg 0x53f0 extra 0x72625c20
; ld1 [k + 0], tcc__r0
lda.w #0
sep #$20
lda.l k + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x20656e69
; ld16 #dir + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:dir
sta.b tcc__r1h
lda.w #dir + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 16 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 0 reg 0x101 extra 0x76282a28
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [vel,2]
lda.b tcc__r0
sta.l vel + 2
__local_54:
; gsym_addr t 62687 a 65172 ind 65172
; gjmp_addr 0 at 65210
jmp.w __local_55
; gsym_addr t 65250 a 0 ind 65250
__local_52:
; gsym_addr t 61310 a 65284 ind 65284
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; gen_opi len 2 op 0x9f
; cmpcd tcc__r0, #224
ldx #1
lda.b tcc__r0
sec
sbc.w #224
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 65558 ind 65558
; gsym_addr t 0 a 65597 ind 65597
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 65687 ind 65687
; cmp op 0x95 inv 1 v 243 r 65687
; cmp ne
bne +
; gsym_addr t 0 a 65777 ind 65777
brl __local_56
+
; gtst finished; t 65687
; call r 0x2f0
jsr.l die
__local_56:
; gsym_addr t 65687 a 65878 ind 65878
__local_55:
; gsym_addr t 65250 a 65916 ind 65916
; gjmp_addr 0 at 65954
jmp.w __local_57
; gsym_addr t 65994 a 0 ind 65994
__local_51:
; gsym_addr t 60786 a 66028 ind 66028
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #112
ldx #1
lda.b tcc__r0
sec
sbc.w #112
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 66295 ind 66295
; gsym_addr t 0 a 66334 ind 66334
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 66424 ind 66424
; cmp op 0x95 inv 1 v 243 r 66424
; cmp ne
bne +
; gsym_addr t 0 a 66514 ind 66514
brl __local_58
+
; gtst finished; t 66424
; load 0
; type 16 reg 0x3f0 extra 0x6f522066
; ld2 [bx + 0], tcc__r0
lda.l bx + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [obx,0]
lda.b tcc__r0
sta.l obx + 0
; load 0
; type 16 reg 0x3f0 extra 0x28204337
; ld2 [by + 0], tcc__r0
lda.l by + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [oby,0]
lda.b tcc__r0
sta.l oby + 0
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x10)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.w #14
sta.b tcc__r0
; gen_opi len 2 op 
; sar tcc__r0, #4
lda.b tcc__r0
cmp #$8000
ror a
cmp #$8000
ror a
cmp #$8000
ror a
cmp #$8000
ror a
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [bx,0]
lda.b tcc__r0
sta.l bx + 0
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 2 r type 0x10)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.w #14
sta.b tcc__r0
; gen_opi len 2 op 
; sar tcc__r0, #3
lda.b tcc__r0
cmp #$8000
ror a
cmp #$8000
ror a
cmp #$8000
ror a
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [by,0]
lda.b tcc__r0
sta.l by + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [by + 0], tcc__r0
lda.l by + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #3
lda.b tcc__r0
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [bx + 0], tcc__r1
lda.l bx + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [by + 0], tcc__r0
lda.l by + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r1
sbc.w #10
sta.b tcc__r1
; store r 0x1 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r1, [b,0]
lda.b tcc__r1
sta.l b + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; gen_opi len 2 op 0x93
; ucmpcd tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc.w #0
tay
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 69078 ind 69078
; gsym_addr t 0 a 69117 ind 69117
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 69207 ind 69207
; cmp op 0x95 inv 1 v 243 r 69207
; cmp ne
bne +
; gsym_addr t 0 a 69297 ind 69297
brl __local_59
+
; gtst finished; t 69207
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, #100
ldx #1
lda.b tcc__r0
sec
sbc.w #100
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 69207 v 5 r 69578 ind 69578
; gsym_addr t 69207 a 69621 ind 69621
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 69207 v 243 r 69715 ind 69715
; cmp op 0x95 inv 1 v 243 r 69715
; cmp ne
bne +
__local_59:
; gsym_addr t 69207 a 69809 ind 69809
brl __local_60
+
; gtst finished; t 69715
; gtst inv 1 t 0 v 245 r 69889 ind 69889
; VT_jmp r 69889 t 0 ji 1 inv 1 vtop->c.i 69715
; gsym_addr t 0 a 69978 ind 69978
; gtst finished; t 69715
; load 0
; type 36 reg 0x2f0 extra 0x65746e65
; ld100 #blocks + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blocks
sta.b tcc__r0h
lda.w #blocks + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [b + 0], tcc__r1
lda.l b + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x24 c 0 r type 0x0)
; length xxy 100 vtop->type 0x24
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x374d5f47
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; gen_opi len 2 op 0x95
; cmpr(n)eq tcc__r1, #8
ldx #1
lda.b tcc__r1
sec
sbc #8
tay
bne +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 70726 ind 70726
; gsym_addr t 0 a 70765 ind 70765
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 70855 ind 70855
; cmp op 0x95 inv 1 v 243 r 70855
; cmp ne
bne +
; gsym_addr t 0 a 70945 ind 70945
brl __local_61
+
; gtst finished; t 70855
; load 0
; type 16 reg 0x3f0 extra 0x656d6172
; ld2 [blockcount + 0], tcc__r0
lda.l blockcount + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0xffffffff
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #65535
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [blockcount,0]
lda.b tcc__r0
sta.l blockcount + 0
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
__local_64:
; load 0
; type 17 reg 0x53f0 extra 0x20202946
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [level + 0], tcc__r1
lda.l level + 0
sta.b tcc__r1
; gen_opi len 2 op 0x96
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
beq ++
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 72058 ind 72058
; gsym_addr t 0 a 72097 ind 72097
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 72187 ind 72187
; cmp op 0x95 inv 1 v 243 r 72187
; cmp ne
bne +
; gsym_addr t 0 a 72277 ind 72277
brl __local_62
+
; gtst finished; t 72187
; gjmp_addr 0 at 72353
jmp.w __local_63
; gsym_addr t 72393 a 0 ind 72393
__local_65:
; load 0
; type 17 reg 0x53f0 extra 0x20202946
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0xffffffff
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
; gjmp_addr 71709 at 72911
jmp.w __local_64
; gsym_addr t 72955 a 71709 ind 72955
__local_63:
; gsym_addr t 72393 a 72993 ind 72993
; load 0
; type 36 reg 0x2f0 extra 0x65746e65
; ld100 #blocks + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blocks
sta.b tcc__r0h
lda.w #blocks + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [b + 0], tcc__r1
lda.l b + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x24 c 0 r type 0x10)
; length xxy 100 vtop->type 0x24
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x374d5f47
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c 0 r type 0x10)
; length xxy 2 vtop->type 0x0
inc.b tcc__r1
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [score + 0], tcc__r0
lda.l score + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [score,0]
lda.b tcc__r0
sta.l score + 0
; gjmp_addr 72427 at 74097
jmp.w __local_65
; gsym_addr t 74141 a 72427 ind 74141
__local_62:
; gsym_addr t 72187 a 74179 ind 74179
; gsym_addr t 0 a 72427 ind 74217
; load 0
; type 16 reg 0x3f0 extra 0x95
; ld2 [oby + 0], tcc__r0
lda.l oby + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x95
; ld2 [by + 0], tcc__r1
lda.l by + 0
sta.b tcc__r1
; gen_opi len 2 op 0x95
; cmpr(n)eq tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bne +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 74557 ind 74557
; gsym_addr t 0 a 74596 ind 74596
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 74686 ind 74686
; cmp op 0x95 inv 1 v 243 r 74686
; cmp ne
bne +
; gsym_addr t 0 a 74776 ind 74776
brl __local_66
+
; gtst finished; t 74686
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0x0
; ld2 [vel + 2], tcc__r1
lda.l vel + 2
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x0)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [vel,2]
lda.b tcc__r0
sta.l vel + 2
__local_66:
; gsym_addr t 74686 a 75269 ind 75269
; load 0
; type 16 reg 0x3f0 extra 0x95
; ld2 [obx + 0], tcc__r0
lda.l obx + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x95
; ld2 [bx + 0], tcc__r1
lda.l bx + 0
sta.b tcc__r1
; gen_opi len 2 op 0x95
; cmpr(n)eq tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bne +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 75613 ind 75613
; gsym_addr t 0 a 75652 ind 75652
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 75742 ind 75742
; cmp op 0x95 inv 1 v 243 r 75742
; cmp ne
bne +
; gsym_addr t 0 a 75832 ind 75832
brl __local_67
+
; gtst finished; t 75742
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0x0
; ld2 [vel + 0], tcc__r1
lda.l vel + 0
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x0)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [vel,0]
lda.b tcc__r0
sta.l vel + 0
__local_67:
; gsym_addr t 75742 a 76325 ind 76325
; load 0
; type 36 reg 0x2f0 extra 0x65746e65
; ld100 #blocks + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blocks
sta.b tcc__r0h
lda.w #blocks + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [b + 0], tcc__r1
lda.l b + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x24 c 0 r type 0x0)
; length xxy 100 vtop->type 0x24
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #8,tcc__r1
lda.w #8
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0x0
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [by + 0], tcc__r0
lda.l by + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #5
lda.b tcc__r0
ldy.w #5
-
asl a
dey
bne -
+
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [bx + 0], tcc__r1
lda.l bx + 0
sta.b tcc__r1
; gen_opi len 2 op 
; shl tcc__r1, #1
asl.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [b,0]
lda.b tcc__r0
sta.l b + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #66
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x68787831
; ld2048 #blockmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blockmap
sta.b tcc__r1h
lda.w #blockmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0xf0 extra 0x20656874
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #67
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x68787831
; ld2048 #blockmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blockmap
sta.b tcc__r1h
lda.w #blockmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0xf0 extra 0x20656874
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #99
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x20684231
; ld2048 #backmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:backmap
sta.b tcc__r1h
lda.w #backmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #100
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x20684231
; ld2048 #backmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:backmap
sta.b tcc__r1h
lda.w #backmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; push2 imm r 0xf0
pea.w 1062
; push2 imm r 0xf0
pea.w 245
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push1 imm r 0xf0
sep #$20
lda #8
pha
rep #$20
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x2020200a
; ld2 [score + 0], tcc__r0
lda.l score + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l writenum
; add sp, #11
tsa
clc
adc #11
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [score + 0], tcc__r0
lda.l score + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [hiscore + 0], tcc__r1
lda.l hiscore + 0
sta.b tcc__r1
; gen_opi len 2 op 0x97
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
beq +
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 82086 ind 82086
; gsym_addr t 0 a 82125 ind 82125
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 82215 ind 82215
; cmp op 0x95 inv 1 v 243 r 82215
; cmp ne
bne +
; gsym_addr t 0 a 82305 ind 82305
brl __local_68
+
; gtst finished; t 82215
; load 0
; type 16 reg 0x3f0 extra 0x6f697461
; ld2 [score + 0], tcc__r0
lda.l score + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [hiscore,0]
lda.b tcc__r0
sta.l hiscore + 0
; push2 imm r 0xf0
pea.w 1062
; push2 imm r 0xf0
pea.w 149
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push1 imm r 0xf0
sep #$20
lda #8
pha
rep #$20
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x2020200a
; ld2 [score + 0], tcc__r0
lda.l score + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l writenum
; add sp, #11
tsa
clc
adc #11
tas
__local_68:
; gsym_addr t 82215 a 83003 ind 83003
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 1024
; push4 imm r 0x2f0
pea.w :backmap
pea.w backmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [blockcount + 0], tcc__r0
lda.l blockcount + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 83648 ind 83648
; gsym_addr t 0 a 83687 ind 83687
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 83777 ind 83777
; cmp op 0x95 inv 1 v 243 r 83777
; cmp ne
bne +
; gsym_addr t 0 a 83867 ind 83867
brl __local_69
+
; gtst finished; t 83777
; call r 0x2f0
jsr.l new_level
__local_69:
; gsym_addr t 83777 a 83974 ind 83974
__local_61:
; gsym_addr t 70855 a 84012 ind 84012
__local_60:
; gsym_addr t 69715 a 84050 ind 84050
__local_58:
; gsym_addr t 66424 a 84088 ind 84088
__local_57:
; gsym_addr t 65994 a 84126 ind 84126
__local_50:
; gsym_addr t 60349 a 84164 ind 84164
; call r 0x2f0
jsr.l draw_screen
; call r 0x2f0
jsr.l WaitForVBlank
; gsym_addr t 0 a 84270 ind 84270
; add sp, #__run_frame_locals
.ifgr __run_frame_locals 0
tsa
clc
adc #__run_frame_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x8" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; call r 0x2f0
jsr.l consoleInit
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l setBrightness
; add sp, #1
tsa
clc
adc #1
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 3840
; push2 imm r 0xf0
pea.w 4096
; push4 imm r 0x12f0
pea.w :tiles1
pea.w tiles1 + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 592
; push2 imm r 0xf0
pea.w 8192
; push4 imm r 0x12f0
pea.w :tiles2
pea.w tiles2 + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 2048
; push4 imm r 0x12f0
pea.w :bg1map
pea.w bg1map + 0
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; push2 imm r 0xf0
pea.w 2048
; push4 imm r 0x12f0
pea.w :bg2map
pea.w bg2map + 0
; push4 imm r 0x2f0
pea.w :backmap
pea.w backmap + 0
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; push2 imm r 0xf0
pea.w 100
; push4 imm r 0x2f0
pea.w :map
pea.w map + 0
; push4 imm r 0x2f0
pea.w :blocks
pea.w blocks + 0
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; push2 imm r 0xf0
pea.w 512
; push4 imm r 0x12f0
pea.w :palette
pea.w palette + 0
; push4 imm r 0x2f0
pea.w :pal
pea.w pal + 0
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; load 0
; type 16 reg 0xf0 extra 0x656d6172
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [blockcount,0]
lda.b tcc__r0
sta.l blockcount + 0
; load 0
; type 16 reg 0xf0 extra 0x20202029
; ld2 #5,tcc__r0
lda.w #5
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [bx,0]
lda.b tcc__r0
sta.l bx + 0
; load 0
; type 16 reg 0xf0 extra 0x64230a2f
; ld2 #11,tcc__r0
lda.w #11
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [by,0]
lda.b tcc__r0
sta.l by + 0
; load 0
; type 16 reg 0xf0 extra 0x62363120
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [score,0]
lda.b tcc__r0
sta.l score + 0
; load 0
; type 16 reg 0xf0 extra 0x6f697461
; ld2 #50000,tcc__r0
lda.w #50000
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [hiscore,0]
lda.b tcc__r0
sta.l hiscore + 0
; load 0
; type 16 reg 0xf0 extra 0x69757628
; ld2 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [level2,0]
lda.b tcc__r0
sta.l level2 + 0
; load 0
; type 16 reg 0xf0 extra 0x706f2074
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [color,0]
lda.b tcc__r0
sta.l color + 0
; load 0
; type 16 reg 0xf0 extra 0x6163532f
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [level,0]
lda.b tcc__r0
sta.l level + 0
; load 0
; type 16 reg 0xf0 extra 0x2a203874
; ld2 #4,tcc__r0
lda.w #4
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [lives,0]
lda.b tcc__r0
sta.l lives + 0
; load 0
; type 16 reg 0xf0 extra 0x69623820
; ld2 #80,tcc__r0
lda.w #80
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
; load 0
; type 0 reg 0xf0 extra 0x64656e67
; ld2 #2,tcc__r0
lda.w #2
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [vel,0]
lda.b tcc__r0
sta.l vel + 0
; load 0
; type 0 reg 0xf0 extra 0x76282a28
; ld2 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [vel,2]
lda.b tcc__r0
sta.l vel + 2
; load 0
; type 0 reg 0xf0 extra 0x64656e67
; ld2 #94,tcc__r0
lda.w #94
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [pos,0]
lda.b tcc__r0
sta.l pos + 0
; load 0
; type 0 reg 0xf0 extra 0x76282a28
; ld2 #109,tcc__r0
lda.w #109
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [pos,2]
lda.b tcc__r0
sta.l pos + 2
; load 0
; type 16 reg 0xf0 extra 0x76282a28
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [b,0]
lda.b tcc__r0
sta.l b + 0
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [j,0]
sep #$20
lda.b tcc__r0
sta.l j + 0
rep #$20
__local_72:
; load 0
; type 17 reg 0x53f0 extra 0x230a2f2a
; ld1 [j + 0], tcc__r0
lda.w #0
sep #$20
lda.l j + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #10
ldx #1
lda.b tcc__r0
sec
sbc.w #10
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 88941 ind 88941
; gsym_addr t 0 a 88980 ind 88980
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 89070 ind 89070
; cmp op 0x95 inv 1 v 243 r 89070
; cmp ne
bne +
; gsym_addr t 0 a 89160 ind 89160
brl __local_70
+
; gtst finished; t 89070
; gjmp_addr 0 at 89236
jmp.w __local_71
; gsym_addr t 89276 a 0 ind 89276
__local_78:
; load 0
; type 17 reg 0x53f0 extra 0x230a2f2a
; ld1 [j + 0], tcc__r0
lda.w #0
sep #$20
lda.l j + 0
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0xffffffff
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [j,0]
sep #$20
lda.b tcc__r0
sta.l j + 0
rep #$20
; gjmp_addr 88682 at 89794
jmp.w __local_72
; gsym_addr t 89838 a 88682 ind 89838
__local_71:
; gsym_addr t 89276 a 89876 ind 89876
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
__local_75:
; load 0
; type 17 reg 0x53f0 extra 0x20202946
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #20
ldx #1
lda.b tcc__r0
sec
sbc.w #20
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 90355 ind 90355
; gsym_addr t 0 a 90394 ind 90394
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 90484 ind 90484
; cmp op 0x95 inv 1 v 243 r 90484
; cmp ne
bne +
; gsym_addr t 0 a 90574 ind 90574
brl __local_73
+
; gtst finished; t 90484
; gjmp_addr 0 at 90650
jmp.w __local_74
; gsym_addr t 90690 a 0 ind 90690
__local_77:
; load 0
; type 17 reg 0x53f0 extra 0x20202946
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
; gjmp_addr 90096 at 91098
jmp.w __local_75
; gsym_addr t 91142 a 90096 ind 91142
__local_74:
; gsym_addr t 90690 a 91180 ind 91180
; load 0
; type 16 reg 0x3f0 extra 0x76282a28
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0xf7d824ef
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [b,0]
lda.b tcc__r0
sta.l b + 0
; load 0
; type 36 reg 0x2f0 extra 0x65746e65
; ld100 #blocks + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blocks
sta.b tcc__r0h
lda.w #blocks + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x24 c 0 r type 0x10)
; length xxy 100 vtop->type 0x24
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x374d5f47
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; store r 0x1 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r1, [a,0]
lda.b tcc__r1
sta.l a + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [a + 0], tcc__r0
lda.l a + 0
sta.b tcc__r0
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, #8
ldx #1
lda.b tcc__r0
sec
sbc.w #8
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 92435 ind 92435
; gsym_addr t 0 a 92474 ind 92474
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 92564 ind 92564
; cmp op 0x95 inv 1 v 243 r 92564
; cmp ne
bne +
; gsym_addr t 0 a 92654 ind 92654
brl __local_76
+
; gtst finished; t 92564
; load 0
; type 17 reg 0x53f0 extra 0x230a2f2a
; ld1 [j + 0], tcc__r0
lda.w #0
sep #$20
lda.l j + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #5
lda.b tcc__r0
ldy.w #5
-
asl a
dey
bne -
+
sta.b tcc__r0
; load 1
; type 17 reg 0x53f0 extra 0x20202946
; ld1 [i + 0], tcc__r1
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x10)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [c,0]
lda.b tcc__r0
sta.l c + 0
; load 0
; type 16 reg 0x3f0 extra 0x656d6172
; ld2 [blockcount + 0], tcc__r0
lda.l blockcount + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x3d
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [blockcount,0]
lda.b tcc__r0
sta.l blockcount + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #98
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x68787831
; ld2048 #blockmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blockmap
sta.b tcc__r1h
lda.w #blockmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [a + 0], tcc__r0
lda.l a + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #10
lda.b tcc__r0
ldy.w #10
-
asl a
dey
bne -
+
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #13
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #99
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x68787831
; ld2048 #blockmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blockmap
sta.b tcc__r1h
lda.w #blockmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [a + 0], tcc__r0
lda.l a + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #10
lda.b tcc__r0
ldy.w #10
-
asl a
dey
bne -
+
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #14
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #131
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x20684231
; ld2048 #backmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:backmap
sta.b tcc__r1h
lda.w #backmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #132
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x20684231
; ld2048 #backmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:backmap
sta.b tcc__r1h
lda.w #backmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
__local_76:
; gsym_addr t 92564 a 98074 ind 98074
; gjmp_addr 90724 at 98112
jmp.w __local_77
; gsym_addr t 98156 a 90724 ind 98156
__local_73:
; gsym_addr t 90484 a 98194 ind 98194
; gsym_addr t 0 a 90724 ind 98232
; gjmp_addr 89310 at 98266
jmp.w __local_78
; gsym_addr t 98310 a 89310 ind 98310
__local_70:
; gsym_addr t 89070 a 98348 ind 98348
; gsym_addr t 0 a 89310 ind 98386
; push2 imm r 0xf0
pea.w 1062
; push2 imm r 0xf0
pea.w 310
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push1 imm r 0xf0
sep #$20
lda #8
pha
rep #$20
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x2020200a
; ld2 [lives + 0], tcc__r0
lda.l lives + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l writenum
; add sp, #11
tsa
clc
adc #11
tas
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 584
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfilePR05sz18
pea.w tccs_L.tmpxfilePR05sz18 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 2048
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; push2 imm r 0xf0
pea.w 1024
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 2048
; push4 imm r 0x2f0
pea.w :backmap
pea.w backmap + 0
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; push2 imm r 0xf0
pea.w 512
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :pal
pea.w pal + 0
; call r 0x2f0
jsr.l dmaCopyCGram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 4096
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgSetGfxPtr
; add sp, #3
tsa
clc
adc #3
tas
; push2 imm r 0xf0
pea.w 8192
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetGfxPtr
; add sp, #3
tsa
clc
adc #3
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; call r 0x2f0
jsr.l setScreenOn
; call r 0x2f0
jsr.l draw_screen
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
__local_81:
; load 0
; type 17 reg 0x53f0 extra 0x20202946
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #40
ldx #1
lda.b tcc__r0
sec
sbc.w #40
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 100912 ind 100912
; gsym_addr t 0 a 100953 ind 100953
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 101045 ind 101045
; cmp op 0x95 inv 1 v 243 r 101045
; cmp ne
bne +
; gsym_addr t 0 a 101138 ind 101138
brl __local_79
+
; gtst finished; t 101045
; gjmp_addr 0 at 101217
jmp.w __local_80
; gsym_addr t 101258 a 0 ind 101258
__local_82:
; load 0
; type 17 reg 0x53f0 extra 0x20202946
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
; gjmp_addr 100653 at 101681
jmp.w __local_81
; gsym_addr t 101727 a 100653 ind 101727
__local_80:
; gsym_addr t 101258 a 101768 ind 101768
; load 0
; type 17 reg 0x53f0 extra 0x20202946
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; gjmp_addr 101294 at 102181
jmp.w __local_82
; gsym_addr t 102227 a 101294 ind 102227
__local_79:
; gsym_addr t 101045 a 102268 ind 102268
; gsym_addr t 0 a 101294 ind 102309
__local_84:
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 102558 ind 102558
; gsym_addr t 0 a 102599 ind 102599
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 102691 ind 102691
; cmp op 0x95 inv 1 v 243 r 102691
; cmp ne
bne +
; gsym_addr t 0 a 102784 ind 102784
brl __local_83
+
; gtst finished; t 102691
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 102345 at 102898
jmp.w __local_84
; gsym_addr t 102944 a 102345 ind 102944
__local_83:
; gsym_addr t 102691 a 102985 ind 102985
; gsym_addr t 0 a 102345 ind 103026
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 584
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfilePR05sz19
pea.w tccs_L.tmpxfilePR05sz19 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 649
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfilePR05sz20
pea.w tccs_L.tmpxfilePR05sz20 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
__local_85:
; gtst inv 1 t 0 v 240 r 103806 ind 103806
; uncond jump: nop
; gtst finished; t 0
; call r 0x2f0
jsr.l run_frame
; gjmp_addr 103806 at 103920
jmp.w __local_85
; gsym_addr t 103966 a 103806 ind 103966
; gsym_addr t 0 a 104007 ind 104007
; gsym_addr t 0 a 103806 ind 104043
; load 0
; type 0 reg 0xf0 extra 0x61507465
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 104163
jmp.w __local_86
; gsym_addr t 104204 a 0 ind 104204
__local_86:
; gsym_addr t 104204 a 104240 ind 104240
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ramtmpxfilePR05sz.data" APPENDTO "globram.data"

dir dsb 16
map dsb 100

.ENDS

.SECTION "tmpxfilePR05sz.data" APPENDTO "glob.data"

.db $fe,$ff,$ff,$ff,$ff,$ff,$fe,$ff,$1,$0,$fe,$ff,$2,$0,$ff,$ff
.db $7,$8,$8,$8,$8,$8,$8,$8,$8,$7,$8,$7,$8,$7,$8,$8,$7,$8,$7,$8,$8,$8,$7,$8,$7,$7,$8,$7,$8,$8,$8,$8,$8,$1,$3,$3,$1,$8,$8,$8,$8,$0,$4,$8,$8,$8,$8,$4,$0,$8,$8,$0,$8,$8,$5,$5,$8,$8,$0,$8,$8,$0,$4,$8,$8,$8,$8,$4,$0,$8,$8,$8,$8,$1,$3,$3,$1,$8,$8,$8,$8,$8,$6,$8,$6,$6,$8,$6,$8,$8,$7,$7,$7,$7,$8,$8,$7,$7,$7,$7
.ENDS

.SECTION ".rodata" SUPERFREE

tccs_L.tmpxfilePR05sz9: .db $50,$4c,$41,$59,$45,$52,$20,$31,$a,$a,$20,$52,$45,$41,$44,$59,$0
tccs_L.tmpxfilePR05sz10: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
tccs_L.tmpxfilePR05sz11: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
tccs_L.tmpxfilePR05sz12: .db $47,$41,$4d,$45,$20,$4f,$56,$45,$52,$0
tccs_L.tmpxfilePR05sz13: .db $50,$4c,$41,$59,$45,$52,$20,$31,$a,$a,$20,$52,$45,$41,$44,$59,$0
tccs_L.tmpxfilePR05sz14: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
tccs_L.tmpxfilePR05sz15: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
tccs_L.tmpxfilePR05sz16: .db $50,$41,$55,$53,$45,$0
tccs_L.tmpxfilePR05sz17: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
tccs_L.tmpxfilePR05sz18: .db $50,$4c,$41,$59,$45,$52,$20,$31,$a,$a,$20,$52,$45,$41,$44,$59,$0
tccs_L.tmpxfilePR05sz19: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
tccs_L.tmpxfilePR05sz20: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
blockmap dsb 2048
backmap dsb 2048
pal dsb 512
blocks dsb 100
i dsb 1
j dsb 1
k dsb 1
a dsb 2
c dsb 2
b dsb 2
blockcount dsb 2
bx dsb 2
by dsb 2
obx dsb 2
oby dsb 2
score dsb 2
hiscore dsb 2
level2 dsb 2
color dsb 2
level dsb 2
lives dsb 2
px dsb 2
vel dsb 4
pos dsb 4
pad0 dsb 2
.ENDS
