.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __clamp_locals 0
.define __writestring_locals 3
.define __writenum_locals 1
.define __draw_screen_locals 0
.define __new_level_locals 0
.define __die_locals 0
.define __handle_pause_locals 0
.define __run_frame_locals 0
.define __main_locals 0

.SECTION ".text_0x0" SUPERFREE

clamp:
; sub sp,#__clamp_locals
.ifgr __clamp_locals 0
tsa
sec
sbc #__clamp_locals
tas
.endif
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __clamp_locals + 1,s
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc 7
lda 5 + __clamp_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 524 ind 524
; gsym_addr t 0 a 559 ind 559
; ERROR no jump found to patch
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 676 ind 676
; cmp op 0x95 inv 1 v 243 r 676
; cmp ne
bne +
; gsym_addr t 0 a 760 ind 760
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 676
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,5],tcc__r0
; stack adjust: fc + disp - loc 7
lda 5 + __clamp_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0x3
; st2 tcc__r0, [sp,3]
; stack adjust: fc + disp - loc 5
lda.b tcc__r0
sta 3 + __clamp_locals + 1,s
__local_0:
; gsym_addr t 676 a 1134 ind 1134
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __clamp_locals + 1,s
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 9
lda 7 + __clamp_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op 0x97
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
beq +
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 1571 ind 1571
; gsym_addr t 0 a 1608 ind 1608
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 1696 ind 1696
; cmp op 0x95 inv 1 v 243 r 1696
; cmp ne
bne +
; gsym_addr t 0 a 1783 ind 1783
brl __local_1
+
; gtst finished; t 1696
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __clamp_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0x3
; st2 tcc__r0, [sp,3]
; stack adjust: fc + disp - loc 5
lda.b tcc__r0
sta 3 + __clamp_locals + 1,s
__local_1:
; gsym_addr t 1696 a 2129 ind 2129
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __clamp_locals + 1,s
sta.b tcc__r0
; gjmp_addr 0 at 2301
jmp.w __local_2
; gsym_addr t 2339 a 0 ind 2339
__local_2:
; gsym_addr t 2339 a 2371 ind 2371
; add sp, #__clamp_locals
.ifgr __clamp_locals 0
tsa
clc
adc #__clamp_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x1" SUPERFREE

writestring:
; sub sp,#__writestring_locals
.ifgr __writestring_locals 0
tsa
sec
sbc #__writestring_locals
tas
.endif
; load 0
; type 16 reg 0x1f2 extra 0xf0
; ld2 [sp,11],tcc__r0
; stack adjust: fc + disp - loc 15
lda 11 + __writestring_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -2 + __writestring_locals + 1,s
__local_6:
; load 0
; type 4 reg 0x1f2 extra 0x0
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 8
lda 3 + __writestring_locals + 1,s
sta.b tcc__r0
lda 5 + __writestring_locals + 1,s
sta.b tcc__r0h
; load 1
; type 1 reg 0x1100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
xba
xba
bpl +
ora.w #$ff00
+
sta.b tcc__r1
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c 3 r type 0x11)
; length xxy 2 vtop->type 0x0
; nop
lda.b tcc__r1
and.w #255
sta.b tcc__r1
; store r 0x1 fr 0x51f2 ft 0x11 fc 0xfffffffd
; st1 tcc__r1, [sp,-3]
; stack adjust: fc + disp - loc 2
sep #$20
lda.b tcc__r1
sta -3 + __writestring_locals + 1,s
rep #$20
; gtst inv 1 t 0 v 1 r 3632 ind 3632
; gsym_addr t 0 a 3669 ind 3669
; tcc__r1 to compare reg
lda.b tcc__r1 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 3757 ind 3757
; cmp op 0x95 inv 1 v 243 r 3757
; cmp ne
bne +
; gsym_addr t 0 a 3844 ind 3844
brl __local_3
+
; gtst finished; t 3757
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-3],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -3 + __writestring_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #10
ldx #1
lda.b tcc__r0
sec
sbc #10
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 4201 ind 4201
; gsym_addr t 0 a 4238 ind 4238
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 4326 ind 4326
; cmp op 0x95 inv 1 v 243 r 4326
; cmp ne
bne +
; gsym_addr t 0 a 4413 ind 4413
brl __local_4
+
; gtst finished; t 4326
; load 0
; type 16 reg 0x1f2 extra 0x490b40
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 3
lda -2 + __writestring_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #32
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 3
lda.b tcc__r0
sta -2 + __writestring_locals + 1,s
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 3
lda -2 + __writestring_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xb
; st2 tcc__r0, [sp,11]
; stack adjust: fc + disp - loc 16
lda.b tcc__r0
sta 11 + __writestring_locals + 1,s
; gjmp_addr 0 at 5242
jmp.w __local_5
; gsym_addr t 5280 a 0 ind 5280
__local_4:
; gsym_addr t 4326 a 5312 ind 5312
; load 0
; type 16 reg 0x1f2 extra 0xcd81451c
; ld2 [sp,11],tcc__r0
; stack adjust: fc + disp - loc 16
lda 11 + __writestring_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x0
; ld4 [sp,7],tcc__r1
; stack adjust: fc + disp - loc 12
lda 7 + __writestring_locals + 1,s
sta.b tcc__r1
lda 9 + __writestring_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x4 c 7 r type 0x6)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-3],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -3 + __writestring_locals + 1,s
rep #$20
sta.b tcc__r0
; load 2
; type 16 reg 0x1f2 extra 0xffffffff
; ld2 [sp,13],tcc__r2
; stack adjust: fc + disp - loc 18
lda 13 + __writestring_locals + 1,s
sta.b tcc__r2
; gen_opi len 2 op +
; adc tcc__r2 (0x2), tcc__r0 (0x0) (fr type 0x10 c -3 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.b tcc__r2
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x7
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,11],tcc__r0
; stack adjust: fc + disp - loc 16
lda 11 + __writestring_locals + 1,s
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x1
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 11 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xb
; st2 tcc__r0, [sp,11]
; stack adjust: fc + disp - loc 16
lda.b tcc__r0
sta 11 + __writestring_locals + 1,s
__local_5:
; gsym_addr t 5280 a 7038 ind 7038
; load 0
; type 4 reg 0x1f2 extra 0x0
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 8
lda 3 + __writestring_locals + 1,s
sta.b tcc__r0
lda 5 + __writestring_locals + 1,s
sta.b tcc__r0h
; load 1
; type 0 reg 0x0 extra 0xcd814280
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 3 r type 0x4)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x4 fc 0x3
; st4 tcc__r0, [sp,3]
; stack adjust: fc + disp - loc 8
lda.b tcc__r0
sta 3 + __writestring_locals + 1,s
lda.b tcc__r0h
sta 5 + __writestring_locals + 1,s
; gjmp_addr 2954 at 7713
jmp.w __local_6
; gsym_addr t 7754 a 2954 ind 7754
__local_3:
; gsym_addr t 3757 a 7789 ind 7789
; gsym_addr t 0 a 2954 ind 7824
; gsym_addr t 0 a 7856 ind 7856
; add sp, #__writestring_locals
.ifgr __writestring_locals 0
tsa
clc
adc #__writestring_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x2" SUPERFREE

writenum:
; sub sp,#__writenum_locals
.ifgr __writenum_locals 0
tsa
sec
sbc #__writenum_locals
tas
.endif
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,5],tcc__r0
; stack adjust: fc + disp - loc 8
lda.w #0
sep #$20
lda 5 + __writenum_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 5 r type 0x10)
; length xxy 2 vtop->type 0x0
dec.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,10],tcc__r1
; stack adjust: fc + disp - loc 13
lda 10 + __writenum_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x10 c 10 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; store r 0x1 fr 0x1f2 ft 0x10 fc 0xa
; st2 tcc__r1, [sp,10]
; stack adjust: fc + disp - loc 13
lda.b tcc__r1
sta 10 + __writenum_locals + 1,s
; gtst inv 1 t 0 v 242 r 8894 ind 8894
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 6
lda 3 + __writenum_locals + 1,s
sta.b tcc__r0
; gsym_addr t 0 a 9073 ind 9073
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 9161 ind 9161
; cmp op 0x95 inv 1 v 243 r 9161
; cmp ne
bne +
; gsym_addr t 0 a 9248 ind 9248
brl __local_7
+
; gtst finished; t 9161
; gtst inv 1 t 0 v 244 r 9320 ind 9320
; VT_jmp r 9320 t 0 ji 0 inv 1 vtop->c.i 9161
; gjmp_addr 0 at 9405
jmp.w __local_8
; gsym_addr t 9443 a 0 ind 9443
__local_7:
; gsym_addr t 9161 a 9475 ind 9475
; gtst finished; t 9443
; load 0
; type 16 reg 0x1f2 extra 0xffffffff
; ld2 [sp,10],tcc__r0
; stack adjust: fc + disp - loc 13
lda 10 + __writenum_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x0
; ld4 [sp,6],tcc__r1
; stack adjust: fc + disp - loc 9
lda 6 + __writenum_locals + 1,s
sta.b tcc__r1
lda 8 + __writenum_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x4 c 6 r type 0x6)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,12],tcc__r0
; stack adjust: fc + disp - loc 15
lda 12 + __writenum_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x6
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; gjmp_addr 0 at 10322
jmp.w __local_9
; gsym_addr t 10361 a 0 ind 10361
__local_8:
; gsym_addr t 9443 a 10395 ind 10395
__local_15:
; gtst inv 1 t 0 v 242 r 10432 ind 10432
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,5],tcc__r0
; stack adjust: fc + disp - loc 8
lda.w #0
sep #$20
lda 5 + __writenum_locals + 1,s
rep #$20
sta.b tcc__r0
; gsym_addr t 0 a 10640 ind 10640
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 10730 ind 10730
; cmp op 0x95 inv 1 v 243 r 10730
; cmp ne
bne +
; gsym_addr t 0 a 10820 ind 10820
brl __local_10
+
; gtst finished; t 10730
; gtst inv 1 t 10730 v 242 r 10896 ind 10896
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 6
lda 3 + __writenum_locals + 1,s
sta.b tcc__r0
; gsym_addr t 10730 a 11081 ind 11081
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 10730 v 243 r 11175 ind 11175
; cmp op 0x95 inv 1 v 243 r 11175
; cmp ne
bne +
__local_10:
; gsym_addr t 10730 a 11269 ind 11269
brl __local_11
+
; gtst finished; t 11175
; gtst inv 1 t 0 v 245 r 11349 ind 11349
; VT_jmp r 11349 t 0 ji 1 inv 1 vtop->c.i 11175
; gsym_addr t 0 a 11438 ind 11438
; gtst finished; t 11175
; load 0
; type 16 reg 0x1f2 extra 0xffffffff
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 6
lda 3 + __writenum_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 0xb1
; div #10, tcc__r0
ldx.b tcc__r0
lda.w #10
jsr.l tcc__udiv
stx.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xffffffff
; st1 tcc__r0, [sp,-1]
; stack adjust: fc + disp - loc 2
sep #$20
lda.b tcc__r0
sta -1 + __writenum_locals + 1,s
rep #$20
; gtst inv 0 t 0 v 242 r 11909 ind 11909
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 6
lda 3 + __writenum_locals + 1,s
sta.b tcc__r0
; gsym_addr t 0 a 12090 ind 12090
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 0 t 0 v 243 r 12180 ind 12180
; cmp op 0x95 inv 0 v 243 r 12180
; cmp ne
beq +
; gsym_addr t 0 a 12270 ind 12270
brl __local_12
+
; gtst finished; t 12180
; gtst inv 0 t 12180 v 242 r 12346 ind 12346
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __writenum_locals + 1,s
rep #$20
sta.b tcc__r0
; gsym_addr t 12180 a 12561 ind 12561
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 0 t 12180 v 243 r 12655 ind 12655
; cmp op 0x95 inv 0 v 243 r 12655
; cmp ne
beq +
__local_12:
; gsym_addr t 12180 a 12749 ind 12749
brl __local_13
+
; gtst finished; t 12655
; gtst inv 1 t 0 v 244 r 12829 ind 12829
; VT_jmp r 12829 t 0 ji 0 inv 1 vtop->c.i 12655
; gjmp_addr 0 at 12918
jmp.w __local_14
; gsym_addr t 12958 a 0 ind 12958
__local_13:
; gsym_addr t 12655 a 12992 ind 12992
; gtst finished; t 12958
; load 0
; type 16 reg 0x1f2 extra 0xfbad8001
; ld2 [sp,10],tcc__r0
; stack adjust: fc + disp - loc 13
lda 10 + __writenum_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 4 reg 0x1f2 extra 0x0
; ld4 [sp,6],tcc__r1
; stack adjust: fc + disp - loc 9
lda 6 + __writenum_locals + 1,s
sta.b tcc__r1
lda 8 + __writenum_locals + 1,s
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x4 c 6 r type 0x6)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __writenum_locals + 1,s
rep #$20
sta.b tcc__r0
; load 2
; type 16 reg 0x1f2 extra 0xffffffff
; ld2 [sp,12],tcc__r2
; stack adjust: fc + disp - loc 15
lda 12 + __writenum_locals + 1,s
sta.b tcc__r2
; gen_opi len 2 op +
; adc tcc__r2 (0x2), tcc__r0 (0x0) (fr type 0x10 c -1 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.b tcc__r2
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x6
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
__local_14:
; gsym_addr t 12958 a 14185 ind 14185
; load 0
; type 16 reg 0x1f2 extra 0xcd8143c0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 6
lda 3 + __writenum_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 0xb0
; div #10, tcc__r0
ldx.b tcc__r0
lda.w #10
jsr.l tcc__udiv
lda.b tcc__r9
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0x3
; st2 tcc__r0, [sp,3]
; stack adjust: fc + disp - loc 6
lda.b tcc__r0
sta 3 + __writenum_locals + 1,s
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,10],tcc__r0
; stack adjust: fc + disp - loc 13
lda 10 + __writenum_locals + 1,s
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x3
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 10 r type 0x10)
; length xxy 2 vtop->type 0x10
dec.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xa
; st2 tcc__r0, [sp,10]
; stack adjust: fc + disp - loc 13
lda.b tcc__r0
sta 10 + __writenum_locals + 1,s
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,5],tcc__r0
; stack adjust: fc + disp - loc 8
lda.w #0
sep #$20
lda 5 + __writenum_locals + 1,s
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x1997cd8
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 5 r type 0x11)
; length xxy 2 vtop->type 0x0
dec.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x11 fc 0x5
; st1 tcc__r0, [sp,5]
; stack adjust: fc + disp - loc 8
sep #$20
lda.b tcc__r0
sta 5 + __writenum_locals + 1,s
rep #$20
; gjmp_addr 10432 at 15741
jmp.w __local_15
; gsym_addr t 15785 a 10432 ind 15785
__local_11:
; gsym_addr t 11175 a 15823 ind 15823
; gsym_addr t 0 a 10432 ind 15861
__local_9:
; gsym_addr t 10361 a 15895 ind 15895
; gsym_addr t 0 a 15933 ind 15933
; add sp, #__writenum_locals
.ifgr __writenum_locals 0
tsa
clc
adc #__writenum_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x3" SUPERFREE

draw_screen:
; sub sp,#__draw_screen_locals
.ifgr __draw_screen_locals 0
tsa
sec
sbc #__draw_screen_locals
tas
.endif
; load 0
; type 17 reg 0x3f0 extra 0x0
; ld1 [pos + 0], tcc__r0
lda.w #0
sep #$20
lda.l pos + 0
rep #$20
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [oamMemory,0]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 0
rep #$20
; load 0
; type 17 reg 0x3f0 extra 0x0
; ld1 [pos + 2], tcc__r0
lda.w #0
sep #$20
lda.l pos + 2
rep #$20
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x1
; st1 tcc__r0, [oamMemory,1]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 1
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xfbad8001
; ld1 #276,tcc__r0
lda.w #20
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x2
; st1 tcc__r0, [oamMemory,2]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 2
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xa4
; ld1 #49,tcc__r0
lda.w #49
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x3
; st1 tcc__r0, [oamMemory,3]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 3
rep #$20
; load 0
; type 17 reg 0x3f0 extra 0xffffffff
; ld1 [px + 0], tcc__r0
lda.w #0
sep #$20
lda.l px + 0
rep #$20
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x4
; st1 tcc__r0, [oamMemory,4]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 4
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #200,tcc__r0
lda.w #200
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x5
; st1 tcc__r0, [oamMemory,5]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 5
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xfbad8001
; ld1 #271,tcc__r0
lda.w #15
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x6
; st1 tcc__r0, [oamMemory,6]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 6
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xa4
; ld1 #49,tcc__r0
lda.w #49
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x7
; st1 tcc__r0, [oamMemory,7]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 7
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x11)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #8
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x8
; st1 tcc__r0, [oamMemory,8]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 8
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #200,tcc__r0
lda.w #200
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x9
; st1 tcc__r0, [oamMemory,9]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 9
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xfbad8001
; ld1 #272,tcc__r0
lda.w #16
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xa
; st1 tcc__r0, [oamMemory,10]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 10
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xa4
; ld1 #49,tcc__r0
lda.w #49
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xb
; st1 tcc__r0, [oamMemory,11]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 11
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x11)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #16
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xc
; st1 tcc__r0, [oamMemory,12]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 12
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #200,tcc__r0
lda.w #200
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xd
; st1 tcc__r0, [oamMemory,13]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 13
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xfbad8001
; ld1 #272,tcc__r0
lda.w #16
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xe
; st1 tcc__r0, [oamMemory,14]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 14
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xa4
; ld1 #113,tcc__r0
lda.w #113
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xf
; st1 tcc__r0, [oamMemory,15]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 15
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x11)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #24
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x10
; st1 tcc__r0, [oamMemory,16]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 16
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #200,tcc__r0
lda.w #200
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x11
; st1 tcc__r0, [oamMemory,17]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 17
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xfbad8001
; ld1 #273,tcc__r0
lda.w #17
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x12
; st1 tcc__r0, [oamMemory,18]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 18
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xa4
; ld1 #49,tcc__r0
lda.w #49
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x13
; st1 tcc__r0, [oamMemory,19]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 19
rep #$20
; load 0
; type 0 reg 0x3f0 extra 0xffffffff
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.w #3
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x14
; st1 tcc__r0, [oamMemory,20]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 20
rep #$20
; load 0
; type 0 reg 0x3f0 extra 0xffffffff
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 2 r type 0x11)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.w #3
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x15
; st1 tcc__r0, [oamMemory,21]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 21
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xfbad8001
; ld1 #277,tcc__r0
lda.w #21
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x16
; st1 tcc__r0, [oamMemory,22]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 22
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xa4
; ld1 #17,tcc__r0
lda.w #17
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x17
; st1 tcc__r0, [oamMemory,23]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 23
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x11)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x18
; st1 tcc__r0, [oamMemory,24]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 24
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #204,tcc__r0
lda.w #204
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x19
; st1 tcc__r0, [oamMemory,25]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 25
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xfbad8001
; ld1 #274,tcc__r0
lda.w #18
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x1a
; st1 tcc__r0, [oamMemory,26]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 26
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xa4
; ld1 #17,tcc__r0
lda.w #17
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x1b
; st1 tcc__r0, [oamMemory,27]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 27
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x11)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #12
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x1c
; st1 tcc__r0, [oamMemory,28]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 28
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #204,tcc__r0
lda.w #204
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x1d
; st1 tcc__r0, [oamMemory,29]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 29
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xfbad8001
; ld1 #275,tcc__r0
lda.w #19
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x1e
; st1 tcc__r0, [oamMemory,30]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 30
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xa4
; ld1 #17,tcc__r0
lda.w #17
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x1f
; st1 tcc__r0, [oamMemory,31]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 31
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x11)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #20
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x20
; st1 tcc__r0, [oamMemory,32]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 32
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #204,tcc__r0
lda.w #204
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x21
; st1 tcc__r0, [oamMemory,33]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 33
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xfbad8001
; ld1 #275,tcc__r0
lda.w #19
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x22
; st1 tcc__r0, [oamMemory,34]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 34
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xa4
; ld1 #81,tcc__r0
lda.w #81
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x23
; st1 tcc__r0, [oamMemory,35]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 35
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x11)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #28
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x24
; st1 tcc__r0, [oamMemory,36]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 36
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #204,tcc__r0
lda.w #204
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x25
; st1 tcc__r0, [oamMemory,37]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 37
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xfbad8001
; ld1 #274,tcc__r0
lda.w #18
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x26
; st1 tcc__r0, [oamMemory,38]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 38
rep #$20
; load 0
; type 17 reg 0xf0 extra 0xa4
; ld1 #17,tcc__r0
lda.w #17
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x27
; st1 tcc__r0, [oamMemory,39]
sep #$20
lda.b tcc__r0
sta.l oamMemory + 39
rep #$20
; gsym_addr t 0 a 26153 ind 26153
; add sp, #__draw_screen_locals
.ifgr __draw_screen_locals 0
tsa
clc
adc #__draw_screen_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x4" SUPERFREE

new_level:
; sub sp,#__new_level_locals
.ifgr __new_level_locals 0
tsa
sec
sbc #__new_level_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [level + 0], tcc__r0
lda.l level + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [level,0]
lda.b tcc__r0
sta.l level + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [level2 + 0], tcc__r0
lda.l level2 + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x1998590
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [level2,0]
lda.b tcc__r0
sta.l level2 + 0
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #94,tcc__r0
lda.w #94
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [pos,0]
lda.b tcc__r0
sta.l pos + 0
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #109,tcc__r0
lda.w #109
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [pos,2]
lda.b tcc__r0
sta.l pos + 2
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #80,tcc__r0
lda.w #80
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
; push2 imm r 0xf0
pea.w 1062
; push2 imm r 0xf0
pea.w 726
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push1 imm r 0xf0
sep #$20
lda #8
pha
rep #$20
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [level2 + 0], tcc__r0
lda.l level2 + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l writenum
; add sp, #11
tsa
clc
adc #11
tas
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 584
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x12f0
pea.w :tccs_L.8
pea.w tccs_L.8 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [level + 0], tcc__r0
lda.l level + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #3
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #11
lda.b tcc__r0
ldy.w #11
-
asl a
dey
bne -
+
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #bg2map + 0, tcc__r1 (type 0x84)
lda.w #:bg2map
sta.b tcc__r1h
lda.w #bg2map + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; push2 imm r 0xf0
pea.w 2048
; ldpush before load type 0x4 reg 0x1
; ldpush4 (type 0x4 reg 0x1) tcc__r1
pei (tcc__r1h)
pei (tcc__r1)
; push4 imm r 0x2f0
pea.w :backmap
pea.w backmap + 0
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; push2 imm r 0xf0
pea.w 100
; push4 imm r 0x2f0
pea.w :map
pea.w map + 0
; push4 imm r 0x2f0
pea.w :blocks
pea.w blocks + 0
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [color + 0], tcc__r0
lda.l color + 0
sta.b tcc__r0
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, #6
ldx #1
lda.b tcc__r0
sec
sbc.w #6
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 29803 ind 29803
; gsym_addr t 0 a 29842 ind 29842
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 29932 ind 29932
; cmp op 0x95 inv 1 v 243 r 29932
; cmp ne
bne +
; gsym_addr t 0 a 30022 ind 30022
brl __local_16
+
; gtst finished; t 29932
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [color + 0], tcc__r0
lda.l color + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [color,0]
lda.b tcc__r0
sta.l color + 0
; gjmp_addr 0 at 30539
jmp.w __local_17
; gsym_addr t 30579 a 0 ind 30579
__local_16:
; gsym_addr t 29932 a 30613 ind 30613
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [color,0]
lda.b tcc__r0
sta.l color + 0
__local_17:
; gsym_addr t 30579 a 30822 ind 30822
; load 0
; type 16 reg 0x3f0 extra 0x2a
; ld2 [color + 0], tcc__r0
lda.l color + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #4
lda.b tcc__r0
asl a
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #backpal + 0, tcc__r1 (type 0x84)
lda.w #:backpal
sta.b tcc__r1h
lda.w #backpal + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; push2 imm r 0xf0
pea.w 16
; ldpush before load type 0x4 reg 0x1
; ldpush4 (type 0x4 reg 0x1) tcc__r1
pei (tcc__r1h)
pei (tcc__r1)
; push4 imm r 0x2f0
pea.w :pal
pea.w pal + 16
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [b,0]
lda.b tcc__r0
sta.l b + 0
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [j,0]
sep #$20
lda.b tcc__r0
sta.l j + 0
rep #$20
__local_20:
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [j + 0], tcc__r0
lda.w #0
sep #$20
lda.l j + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #10
ldx #1
lda.b tcc__r0
sec
sbc.w #10
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 32193 ind 32193
; gsym_addr t 0 a 32232 ind 32232
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 32322 ind 32322
; cmp op 0x95 inv 1 v 243 r 32322
; cmp ne
bne +
; gsym_addr t 0 a 32412 ind 32412
brl __local_18
+
; gtst finished; t 32322
; gjmp_addr 0 at 32488
jmp.w __local_19
; gsym_addr t 32528 a 0 ind 32528
__local_26:
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [j + 0], tcc__r0
lda.w #0
sep #$20
lda.l j + 0
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [j,0]
sep #$20
lda.b tcc__r0
sta.l j + 0
rep #$20
; gjmp_addr 31941 at 33032
jmp.w __local_20
; gsym_addr t 33076 a 31941 ind 33076
__local_19:
; gsym_addr t 32528 a 33114 ind 33114
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
__local_23:
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #20
ldx #1
lda.b tcc__r0
sec
sbc.w #20
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 33586 ind 33586
; gsym_addr t 0 a 33625 ind 33625
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 33715 ind 33715
; cmp op 0x95 inv 1 v 243 r 33715
; cmp ne
bne +
; gsym_addr t 0 a 33805 ind 33805
brl __local_21
+
; gtst finished; t 33715
; gjmp_addr 0 at 33881
jmp.w __local_22
; gsym_addr t 33921 a 0 ind 33921
__local_25:
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
; gjmp_addr 33334 at 34895
jmp.w __local_23
; gsym_addr t 34939 a 33334 ind 34939
__local_22:
; gsym_addr t 33921 a 34977 ind 34977
; load 0
; type 36 reg 0x2f0 extra 0x0
; ld100 #blocks + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blocks
sta.b tcc__r0h
lda.w #blocks + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x490c3e
; ld2 [b + 0], tcc__r1
lda.l b + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x24 c 0 r type 0x10)
; length xxy 100 vtop->type 0x24
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; store r 0x1 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r1, [a,0]
lda.b tcc__r1
sta.l a + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [a + 0], tcc__r0
lda.l a + 0
sta.b tcc__r0
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, #8
ldx #1
lda.b tcc__r0
sec
sbc.w #8
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 35872 ind 35872
; gsym_addr t 0 a 35911 ind 35911
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 36001 ind 36001
; cmp op 0x95 inv 1 v 243 r 36001
; cmp ne
bne +
; gsym_addr t 0 a 36091 ind 36091
brl __local_24
+
; gtst finished; t 36001
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [j + 0], tcc__r0
lda.w #0
sep #$20
lda.l j + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #5
lda.b tcc__r0
ldy.w #5
-
asl a
dey
bne -
+
sta.b tcc__r0
; load 1
; type 17 reg 0x53f0 extra 0x0
; ld1 [i + 0], tcc__r1
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x10)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [c,0]
lda.b tcc__r0
sta.l c + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [blockcount + 0], tcc__r0
lda.l blockcount + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x495060
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [blockcount,0]
lda.b tcc__r0
sta.l blockcount + 0
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #98
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld2048 #blockmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blockmap
sta.b tcc__r1h
lda.w #blockmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x6)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [a + 0], tcc__r0
lda.l a + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #10
lda.b tcc__r0
ldy.w #10
-
asl a
dey
bne -
+
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #13
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #99
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld2048 #blockmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blockmap
sta.b tcc__r1h
lda.w #blockmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x6)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [a + 0], tcc__r0
lda.l a + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #10
lda.b tcc__r0
ldy.w #10
-
asl a
dey
bne -
+
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #14
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #131
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld2048 #backmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:backmap
sta.b tcc__r1h
lda.w #backmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x6)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x490b40
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #132
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld2048 #backmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:backmap
sta.b tcc__r1h
lda.w #backmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x6)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x490b40
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
__local_24:
; gsym_addr t 36001 a 41518 ind 41518
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0xcd814120
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [b,0]
lda.b tcc__r0
sta.l b + 0
; gjmp_addr 33955 at 41988
jmp.w __local_25
; gsym_addr t 42032 a 33955 ind 42032
__local_21:
; gsym_addr t 33715 a 42070 ind 42070
; gsym_addr t 0 a 33955 ind 42108
; gjmp_addr 32562 at 42142
jmp.w __local_26
; gsym_addr t 42186 a 32562 ind 42186
__local_18:
; gsym_addr t 32322 a 42224 ind 42224
; gsym_addr t 0 a 32562 ind 42262
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 512
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x52f0
pea.w :pal
pea.w pal + 0
; call r 0x2f0
jsr.l dmaCopyCGram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x52f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 1024
; push4 imm r 0x52f0
pea.w :backmap
pea.w backmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; call r 0x2f0
jsr.l draw_screen
__local_28:
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 43102 ind 43102
; gsym_addr t 0 a 43141 ind 43141
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 43231 ind 43231
; cmp op 0x95 inv 1 v 243 r 43231
; cmp ne
bne +
; gsym_addr t 0 a 43321 ind 43321
brl __local_27
+
; gtst finished; t 43231
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 42889 at 43432
jmp.w __local_28
; gsym_addr t 43476 a 42889 ind 43476
__local_27:
; gsym_addr t 43231 a 43514 ind 43514
; gsym_addr t 0 a 42889 ind 43552
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 584
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x12f0
pea.w :tccs_L.9
pea.w tccs_L.9 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 649
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x12f0
pea.w :tccs_L.10
pea.w tccs_L.10 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x52f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; gsym_addr t 0 a 44275 ind 44275
; add sp, #__new_level_locals
.ifgr __new_level_locals 0
tsa
clc
adc #__new_level_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x5" SUPERFREE

die:
; sub sp,#__die_locals
.ifgr __die_locals 0
tsa
sec
sbc #__die_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [lives + 0], tcc__r0
lda.l lives + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 44745 ind 44745
; gsym_addr t 0 a 44784 ind 44784
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 44874 ind 44874
; cmp op 0x95 inv 1 v 243 r 44874
; cmp ne
bne +
; gsym_addr t 0 a 44964 ind 44964
brl __local_29
+
; gtst finished; t 44874
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 615
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x12f0
pea.w :tccs_L.11
pea.w tccs_L.11 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x52f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
__local_30:
; gtst inv 1 t 0 v 240 r 45492 ind 45492
; uncond jump: nop
; gtst finished; t 0
; gjmp_addr 45492 at 45573
jmp.w __local_30
; gsym_addr t 45617 a 45492 ind 45617
; gsym_addr t 0 a 45655 ind 45655
; gsym_addr t 0 a 45492 ind 45689
__local_29:
; gsym_addr t 44874 a 45723 ind 45723
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [lives + 0], tcc__r0
lda.l lives + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0xcd8143e0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
dec.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [lives,0]
lda.b tcc__r0
sta.l lives + 0
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #94,tcc__r0
lda.w #94
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [pos,0]
lda.b tcc__r0
sta.l pos + 0
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #109,tcc__r0
lda.w #109
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [pos,2]
lda.b tcc__r0
sta.l pos + 2
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #80,tcc__r0
lda.w #80
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
; push2 imm r 0xf0
pea.w 1062
; push2 imm r 0xf0
pea.w 310
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push1 imm r 0xf0
sep #$20
lda #8
pha
rep #$20
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [lives + 0], tcc__r0
lda.l lives + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l writenum
; add sp, #11
tsa
clc
adc #11
tas
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 584
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x12f0
pea.w :tccs_L.12
pea.w tccs_L.12 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x52f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; call r 0x2f0
jsr.l draw_screen
__local_32:
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 47825 ind 47825
; gsym_addr t 0 a 47864 ind 47864
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 47954 ind 47954
; cmp op 0x95 inv 1 v 243 r 47954
; cmp ne
bne +
; gsym_addr t 0 a 48044 ind 48044
brl __local_31
+
; gtst finished; t 47954
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 47612 at 48155
jmp.w __local_32
; gsym_addr t 48199 a 47612 ind 48199
__local_31:
; gsym_addr t 47954 a 48237 ind 48237
; gsym_addr t 0 a 47612 ind 48275
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 584
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x12f0
pea.w :tccs_L.13
pea.w tccs_L.13 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 649
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x12f0
pea.w :tccs_L.14
pea.w tccs_L.14 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x52f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; gsym_addr t 0 a 49000 ind 49000
; add sp, #__die_locals
.ifgr __die_locals 0
tsa
clc
adc #__die_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x6" SUPERFREE

handle_pause:
; sub sp,#__handle_pause_locals
.ifgr __handle_pause_locals 0
tsa
sec
sbc #__handle_pause_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x6)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #4096
sta.b tcc__r0
; gen_opi len 2 op 0x95
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
bne +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 49652 ind 49652
; gsym_addr t 0 a 49691 ind 49691
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 49781 ind 49781
; cmp op 0x95 inv 1 v 243 r 49781
; cmp ne
bne +
; gsym_addr t 0 a 49871 ind 49871
brl __local_33
+
; gtst finished; t 49781
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 617
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x12f0
pea.w :tccs_L.15
pea.w tccs_L.15 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x52f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
__local_35:
; load 0
; type 16 reg 0x3f0 extra 0x95
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; gen_opi len 2 op 0x95
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
bne +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 50612 ind 50612
; gsym_addr t 0 a 50651 ind 50651
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 50741 ind 50741
; cmp op 0x95 inv 1 v 243 r 50741
; cmp ne
bne +
; gsym_addr t 0 a 50831 ind 50831
brl __local_34
+
; gtst finished; t 50741
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 50399 at 50942
jmp.w __local_35
; gsym_addr t 50986 a 50399 ind 50986
__local_34:
; gsym_addr t 50741 a 51024 ind 51024
; gsym_addr t 0 a 50399 ind 51062
__local_37:
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x6)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #4096
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 51475 ind 51475
; gsym_addr t 0 a 51514 ind 51514
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 51604 ind 51604
; cmp op 0x95 inv 1 v 243 r 51604
; cmp ne
bne +
; gsym_addr t 0 a 51694 ind 51694
brl __local_36
+
; gtst finished; t 51604
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 51096 at 51805
jmp.w __local_37
; gsym_addr t 51849 a 51096 ind 51849
__local_36:
; gsym_addr t 51604 a 51887 ind 51887
; gsym_addr t 0 a 51096 ind 51925
__local_39:
; load 0
; type 16 reg 0x3f0 extra 0x95
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; gen_opi len 2 op 0x95
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
bne +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 52172 ind 52172
; gsym_addr t 0 a 52211 ind 52211
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 52301 ind 52301
; cmp op 0x95 inv 1 v 243 r 52301
; cmp ne
bne +
; gsym_addr t 0 a 52391 ind 52391
brl __local_38
+
; gtst finished; t 52301
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 51959 at 52502
jmp.w __local_39
; gsym_addr t 52546 a 51959 ind 52546
__local_38:
; gsym_addr t 52301 a 52584 ind 52584
; gsym_addr t 0 a 51959 ind 52622
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 617
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x12f0
pea.w :tccs_L.16
pea.w tccs_L.16 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x52f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
__local_33:
; gsym_addr t 49781 a 53108 ind 53108
; gsym_addr t 0 a 53146 ind 53146
; add sp, #__handle_pause_locals
.ifgr __handle_pause_locals 0
tsa
clc
adc #__handle_pause_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x7" SUPERFREE

run_frame:
; sub sp,#__run_frame_locals
.ifgr __run_frame_locals 0
tsa
sec
sbc #__run_frame_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [pad0,0]
lda.b tcc__r0
sta.l pad0 + 0
; call r 0x2f0
jsr.l handle_pause
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x6)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #128
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 53929 ind 53929
; gsym_addr t 0 a 53968 ind 53968
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 54058 ind 54058
; cmp op 0x95 inv 1 v 243 r 54058
; cmp ne
bne +
; gsym_addr t 0 a 54148 ind 54148
brl __local_40
+
; gtst finished; t 54058
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x6)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #256
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 54484 ind 54484
; gsym_addr t 0 a 54523 ind 54523
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 54613 ind 54613
; cmp op 0x95 inv 1 v 243 r 54613
; cmp ne
bne +
; gsym_addr t 0 a 54703 ind 54703
brl __local_41
+
; gtst finished; t 54613
; load 0
; type 16 reg 0x3f0 extra 0x490c3e
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
__local_41:
; gsym_addr t 54613 a 55123 ind 55123
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x6)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #512
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 55421 ind 55421
; gsym_addr t 0 a 55460 ind 55460
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 55550 ind 55550
; cmp op 0x95 inv 1 v 243 r 55550
; cmp ne
bne +
; gsym_addr t 0 a 55640 ind 55640
brl __local_42
+
; gtst finished; t 55550
; load 0
; type 16 reg 0x3f0 extra 0x490c3e
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #4
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
__local_42:
; gsym_addr t 55550 a 56060 ind 56060
; gjmp_addr 0 at 56098
jmp.w __local_43
; gsym_addr t 56138 a 0 ind 56138
__local_40:
; gsym_addr t 54058 a 56172 ind 56172
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x6)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #256
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 56470 ind 56470
; gsym_addr t 0 a 56509 ind 56509
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 56599 ind 56599
; cmp op 0x95 inv 1 v 243 r 56599
; cmp ne
bne +
; gsym_addr t 0 a 56689 ind 56689
brl __local_44
+
; gtst finished; t 56599
; load 0
; type 16 reg 0x3f0 extra 0x490c3e
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
__local_44:
; gsym_addr t 56599 a 57096 ind 57096
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x6)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #512
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 57394 ind 57394
; gsym_addr t 0 a 57433 ind 57433
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 57523 ind 57523
; cmp op 0x95 inv 1 v 243 r 57523
; cmp ne
bne +
; gsym_addr t 0 a 57613 ind 57613
brl __local_45
+
; gtst finished; t 57523
; load 0
; type 16 reg 0x3f0 extra 0x490c3e
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
dec.b tcc__r0
dec.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
__local_45:
; gsym_addr t 57523 a 58020 ind 58020
__local_43:
; gsym_addr t 56138 a 58058 ind 58058
; push2 imm r 0xf0
pea.w 144
; push2 imm r 0xf0
pea.w 16
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l clamp
; add sp, #6
tsa
clc
adc #6
tas
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
; load 0
; type 0 reg 0x3f0 extra 0xe2a4
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0xe2a4
; ld2 [vel + 0], tcc__r1
lda.l vel + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x0)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [pos,0]
lda.b tcc__r0
sta.l pos + 0
; load 0
; type 0 reg 0x3f0 extra 0xe2a4
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0xe2a4
; ld2 [vel + 2], tcc__r1
lda.l vel + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 2 r type 0x0)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [pos,2]
lda.b tcc__r0
sta.l pos + 2
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; gen_opi len 2 op 0x9f
; cmpcd tcc__r0, #171
ldx #1
lda.b tcc__r0
sec
sbc.w #171
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 59592 ind 59592
; gsym_addr t 0 a 59631 ind 59631
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 59721 ind 59721
; cmp op 0x95 inv 1 v 243 r 59721
; cmp ne
bne +
; gsym_addr t 0 a 59811 ind 59811
brl __local_46
+
; gtst finished; t 59721
; load 0
; type 0 reg 0xf0 extra 0x490000
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0x490000
; ld2 [vel + 0], tcc__r1
lda.l vel + 0
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x0)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [vel,0]
lda.b tcc__r0
sta.l vel + 0
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #171,tcc__r0
lda.w #171
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [pos,0]
lda.b tcc__r0
sta.l pos + 0
; gjmp_addr 0 at 60483
jmp.w __local_47
; gsym_addr t 60523 a 0 ind 60523
__local_46:
; gsym_addr t 59721 a 60557 ind 60557
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #16
ldx #1
lda.b tcc__r0
sec
sbc.w #16
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 60822 ind 60822
; gsym_addr t 0 a 60861 ind 60861
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 60951 ind 60951
; cmp op 0x95 inv 1 v 243 r 60951
; cmp ne
bne +
; gsym_addr t 0 a 61041 ind 61041
brl __local_48
+
; gtst finished; t 60951
; load 0
; type 0 reg 0xf0 extra 0x490000
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0x490000
; ld2 [vel + 0], tcc__r1
lda.l vel + 0
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x0)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [vel,0]
lda.b tcc__r0
sta.l vel + 0
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #16,tcc__r0
lda.w #16
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [pos,0]
lda.b tcc__r0
sta.l pos + 0
__local_48:
; gsym_addr t 60951 a 61711 ind 61711
__local_47:
; gsym_addr t 60523 a 61749 ind 61749
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #15
ldx #1
lda.b tcc__r0
sec
sbc.w #15
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 62014 ind 62014
; gsym_addr t 0 a 62053 ind 62053
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 62143 ind 62143
; cmp op 0x95 inv 1 v 243 r 62143
; cmp ne
bne +
; gsym_addr t 0 a 62233 ind 62233
brl __local_49
+
; gtst finished; t 62143
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0x0
; ld2 [vel + 2], tcc__r1
lda.l vel + 2
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x0)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [vel,2]
lda.b tcc__r0
sta.l vel + 2
; gjmp_addr 0 at 62726
jmp.w __local_50
; gsym_addr t 62766 a 0 ind 62766
__local_49:
; gsym_addr t 62143 a 62800 ind 62800
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; gen_opi len 2 op 0x9f
; cmpcd tcc__r0, #195
ldx #1
lda.b tcc__r0
sec
sbc.w #195
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 63074 ind 63074
; gsym_addr t 0 a 63113 ind 63113
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 63203 ind 63203
; cmp op 0x95 inv 1 v 243 r 63203
; cmp ne
bne +
; gsym_addr t 0 a 63293 ind 63293
brl __local_51
+
; gtst finished; t 63203
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #203
ldx #1
lda.b tcc__r0
sec
sbc.w #203
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 63598 ind 63598
; gsym_addr t 0 a 63637 ind 63637
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 63727 ind 63727
; cmp op 0x95 inv 1 v 243 r 63727
; cmp ne
bne +
; gsym_addr t 0 a 63817 ind 63817
brl __local_52
+
; gtst finished; t 63727
; load 0
; type 16 reg 0x3f0 extra 0x28
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x28
; ld2 [px + 0], tcc__r1
lda.l px + 0
sta.b tcc__r1
; gen_opi len 2 op 0x93
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 64200 ind 64200
; gsym_addr t 0 a 64239 ind 64239
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 64329 ind 64329
; cmp op 0x95 inv 1 v 243 r 64329
; cmp ne
bne +
; gsym_addr t 0 a 64419 ind 64419
brl __local_53
+
; gtst finished; t 64329
; load 0
; type 16 reg 0x3f0 extra 0x28
; ld2 [px + 0], tcc__r0
lda.l px + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #27
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x28
; ld2 [pos + 0], tcc__r1
lda.l pos + 0
sta.b tcc__r1
; gen_opi len 2 op 0x96
; ucmpcd tcc__r1, tcc__r0
ldx #1
lda.b tcc__r1
sec
sbc.b tcc__r0
tay
beq ++
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 64329 v 5 r 64971 ind 64971
; gsym_addr t 64329 a 65014 ind 65014
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 64329 v 243 r 65108 ind 65108
; cmp op 0x95 inv 1 v 243 r 65108
; cmp ne
bne +
__local_53:
; gsym_addr t 64329 a 65202 ind 65202
brl __local_54
+
; gtst finished; t 65108
; gtst inv 1 t 0 v 245 r 65282 ind 65282
; VT_jmp r 65282 t 0 ji 1 inv 1 vtop->c.i 65108
; gsym_addr t 0 a 65371 ind 65371
; gtst finished; t 65108
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [px + 0], tcc__r1
lda.l px + 0
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x11)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; gen_opi len 2 op 0xb0
; div #7, tcc__r0
ldx.b tcc__r0
lda.w #7
jsr.l tcc__udiv
lda.b tcc__r9
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [k,0]
sep #$20
lda.b tcc__r0
sta.l k + 0
rep #$20
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [k + 0], tcc__r0
lda.w #0
sep #$20
lda.l k + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld16 #dir + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:dir
sta.b tcc__r1h
lda.w #dir + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 16 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 0 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [vel,0]
lda.b tcc__r0
sta.l vel + 0
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [k + 0], tcc__r0
lda.w #0
sep #$20
lda.l k + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld16 #dir + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:dir
sta.b tcc__r1h
lda.w #dir + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 16 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 0 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [vel,2]
lda.b tcc__r0
sta.l vel + 2
__local_54:
; gsym_addr t 65108 a 67565 ind 67565
; gjmp_addr 0 at 67603
jmp.w __local_55
; gsym_addr t 67643 a 0 ind 67643
__local_52:
; gsym_addr t 63727 a 67677 ind 67677
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; gen_opi len 2 op 0x9f
; cmpcd tcc__r0, #224
ldx #1
lda.b tcc__r0
sec
sbc.w #224
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 67951 ind 67951
; gsym_addr t 0 a 67990 ind 67990
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 68080 ind 68080
; cmp op 0x95 inv 1 v 243 r 68080
; cmp ne
bne +
; gsym_addr t 0 a 68170 ind 68170
brl __local_56
+
; gtst finished; t 68080
; call r 0x2f0
jsr.l die
__local_56:
; gsym_addr t 68080 a 68271 ind 68271
__local_55:
; gsym_addr t 67643 a 68309 ind 68309
; gjmp_addr 0 at 68347
jmp.w __local_57
; gsym_addr t 68387 a 0 ind 68387
__local_51:
; gsym_addr t 63203 a 68421 ind 68421
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #112
ldx #1
lda.b tcc__r0
sec
sbc.w #112
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 68688 ind 68688
; gsym_addr t 0 a 68727 ind 68727
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 68817 ind 68817
; cmp op 0x95 inv 1 v 243 r 68817
; cmp ne
bne +
; gsym_addr t 0 a 68907 ind 68907
brl __local_58
+
; gtst finished; t 68817
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [bx + 0], tcc__r0
lda.l bx + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [obx,0]
lda.b tcc__r0
sta.l obx + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [by + 0], tcc__r0
lda.l by + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [oby,0]
lda.b tcc__r0
sta.l oby + 0
; load 0
; type 0 reg 0x3f0 extra 0xffffffff
; ld2 [pos + 0], tcc__r0
lda.l pos + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x10)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.w #14
sta.b tcc__r0
; gen_opi len 2 op 
; sar tcc__r0, #4
lda.b tcc__r0
cmp #$8000
ror a
cmp #$8000
ror a
cmp #$8000
ror a
cmp #$8000
ror a
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [bx,0]
lda.b tcc__r0
sta.l bx + 0
; load 0
; type 0 reg 0x3f0 extra 0xffffffff
; ld2 [pos + 2], tcc__r0
lda.l pos + 2
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 2 r type 0x10)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.w #14
sta.b tcc__r0
; gen_opi len 2 op 
; sar tcc__r0, #3
lda.b tcc__r0
cmp #$8000
ror a
cmp #$8000
ror a
cmp #$8000
ror a
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [by,0]
lda.b tcc__r0
sta.l by + 0
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [by + 0], tcc__r0
lda.l by + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #3
lda.b tcc__r0
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [bx + 0], tcc__r1
lda.l bx + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [by + 0], tcc__r0
lda.l by + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r1
sbc.w #10
sta.b tcc__r1
; store r 0x1 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r1, [b,0]
lda.b tcc__r1
sta.l b + 0
; load 0
; type 16 reg 0x3f0 extra 0x28
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; gen_opi len 2 op 0x93
; ucmpcd tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc.w #0
tay
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 71493 ind 71493
; gsym_addr t 0 a 71532 ind 71532
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 71622 ind 71622
; cmp op 0x95 inv 1 v 243 r 71622
; cmp ne
bne +
; gsym_addr t 0 a 71712 ind 71712
brl __local_59
+
; gtst finished; t 71622
; load 0
; type 16 reg 0x3f0 extra 0x28
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, #100
ldx #1
lda.b tcc__r0
sec
sbc.w #100
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 71622 v 5 r 71994 ind 71994
; gsym_addr t 71622 a 72037 ind 72037
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 71622 v 243 r 72131 ind 72131
; cmp op 0x95 inv 1 v 243 r 72131
; cmp ne
bne +
__local_59:
; gsym_addr t 71622 a 72225 ind 72225
brl __local_60
+
; gtst finished; t 72131
; gtst inv 1 t 0 v 245 r 72305 ind 72305
; VT_jmp r 72305 t 0 ji 1 inv 1 vtop->c.i 72131
; gsym_addr t 0 a 72394 ind 72394
; gtst finished; t 72131
; load 0
; type 36 reg 0x2f0 extra 0x0
; ld100 #blocks + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blocks
sta.b tcc__r0h
lda.w #blocks + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [b + 0], tcc__r1
lda.l b + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x24 c 0 r type 0x6)
; length xxy 100 vtop->type 0x24
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; gen_opi len 2 op 0x95
; cmpr(n)eq tcc__r1, #8
ldx #1
lda.b tcc__r1
sec
sbc #8
tay
bne +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 73135 ind 73135
; gsym_addr t 0 a 73174 ind 73174
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 73264 ind 73264
; cmp op 0x95 inv 1 v 243 r 73264
; cmp ne
bne +
; gsym_addr t 0 a 73354 ind 73354
brl __local_61
+
; gtst finished; t 73264
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [blockcount + 0], tcc__r0
lda.l blockcount + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
dec.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [blockcount,0]
lda.b tcc__r0
sta.l blockcount + 0
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
__local_64:
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x12159
; ld2 [level + 0], tcc__r1
lda.l level + 0
sta.b tcc__r1
; gen_opi len 2 op 0x96
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
beq ++
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 74419 ind 74419
; gsym_addr t 0 a 74458 ind 74458
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 74548 ind 74548
; cmp op 0x95 inv 1 v 243 r 74548
; cmp ne
bne +
; gsym_addr t 0 a 74638 ind 74638
brl __local_62
+
; gtst finished; t 74548
; gjmp_addr 0 at 74714
jmp.w __local_63
; gsym_addr t 74754 a 0 ind 74754
__local_65:
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
; gjmp_addr 74073 at 75258
jmp.w __local_64
; gsym_addr t 75302 a 74073 ind 75302
__local_63:
; gsym_addr t 74754 a 75340 ind 75340
; load 0
; type 36 reg 0x2f0 extra 0x0
; ld100 #blocks + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blocks
sta.b tcc__r0h
lda.w #blocks + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [b + 0], tcc__r1
lda.l b + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x24 c 0 r type 0x10)
; length xxy 100 vtop->type 0x24
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c 0 r type 0x10)
; length xxy 2 vtop->type 0x0
inc.b tcc__r1
; load 0
; type 16 reg 0x3f0 extra 0x490b40
; ld2 [score + 0], tcc__r0
lda.l score + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [score,0]
lda.b tcc__r0
sta.l score + 0
; gjmp_addr 74788 at 76435
jmp.w __local_65
; gsym_addr t 76479 a 74788 ind 76479
__local_62:
; gsym_addr t 74548 a 76517 ind 76517
; gsym_addr t 0 a 74788 ind 76555
; load 0
; type 16 reg 0x3f0 extra 0x95
; ld2 [oby + 0], tcc__r0
lda.l oby + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x95
; ld2 [by + 0], tcc__r1
lda.l by + 0
sta.b tcc__r1
; gen_opi len 2 op 0x95
; cmpr(n)eq tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bne +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 76895 ind 76895
; gsym_addr t 0 a 76934 ind 76934
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 77024 ind 77024
; cmp op 0x95 inv 1 v 243 r 77024
; cmp ne
bne +
; gsym_addr t 0 a 77114 ind 77114
brl __local_66
+
; gtst finished; t 77024
; load 0
; type 0 reg 0xf0 extra 0xcd813c80
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0xcd813c80
; ld2 [vel + 2], tcc__r1
lda.l vel + 2
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x0)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [vel,2]
lda.b tcc__r0
sta.l vel + 2
__local_66:
; gsym_addr t 77024 a 77621 ind 77621
; load 0
; type 16 reg 0x3f0 extra 0x95
; ld2 [obx + 0], tcc__r0
lda.l obx + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x95
; ld2 [bx + 0], tcc__r1
lda.l bx + 0
sta.b tcc__r1
; gen_opi len 2 op 0x95
; cmpr(n)eq tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bne +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 77965 ind 77965
; gsym_addr t 0 a 78004 ind 78004
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 78094 ind 78094
; cmp op 0x95 inv 1 v 243 r 78094
; cmp ne
bne +
; gsym_addr t 0 a 78184 ind 78184
brl __local_67
+
; gtst finished; t 78094
; load 0
; type 0 reg 0xf0 extra 0xcd813c80
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; load 1
; type 0 reg 0x3f0 extra 0xcd813c80
; ld2 [vel + 0], tcc__r1
lda.l vel + 0
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x0)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [vel,0]
lda.b tcc__r0
sta.l vel + 0
__local_67:
; gsym_addr t 78094 a 78691 ind 78691
; load 0
; type 36 reg 0x2f0 extra 0x0
; ld100 #blocks + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blocks
sta.b tcc__r0h
lda.w #blocks + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x37490c3e
; ld2 [b + 0], tcc__r1
lda.l b + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x24 c 0 r type 0x6)
; length xxy 100 vtop->type 0x24
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #8,tcc__r1
lda.w #8
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0x0
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [by + 0], tcc__r0
lda.l by + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #5
lda.b tcc__r0
ldy.w #5
-
asl a
dey
bne -
+
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [bx + 0], tcc__r1
lda.l bx + 0
sta.b tcc__r1
; gen_opi len 2 op 
; shl tcc__r1, #1
asl.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [b,0]
lda.b tcc__r0
sta.l b + 0
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #66
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld2048 #blockmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blockmap
sta.b tcc__r1h
lda.w #blockmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x6)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #67
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld2048 #blockmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blockmap
sta.b tcc__r1h
lda.w #blockmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x6)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #99
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld2048 #backmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:backmap
sta.b tcc__r1h
lda.w #backmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x6)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #100
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld2048 #backmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:backmap
sta.b tcc__r1h
lda.w #backmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x6)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; push2 imm r 0xf0
pea.w 1062
; push2 imm r 0xf0
pea.w 245
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push1 imm r 0xf0
sep #$20
lda #8
pha
rep #$20
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [score + 0], tcc__r0
lda.l score + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l writenum
; add sp, #11
tsa
clc
adc #11
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [score + 0], tcc__r0
lda.l score + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [hiscore + 0], tcc__r1
lda.l hiscore + 0
sta.b tcc__r1
; gen_opi len 2 op 0x97
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
beq +
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 84445 ind 84445
; gsym_addr t 0 a 84484 ind 84484
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 84574 ind 84574
; cmp op 0x95 inv 1 v 243 r 84574
; cmp ne
bne +
; gsym_addr t 0 a 84664 ind 84664
brl __local_68
+
; gtst finished; t 84574
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [score + 0], tcc__r0
lda.l score + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [hiscore,0]
lda.b tcc__r0
sta.l hiscore + 0
; push2 imm r 0xf0
pea.w 1062
; push2 imm r 0xf0
pea.w 149
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push1 imm r 0xf0
sep #$20
lda #8
pha
rep #$20
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [score + 0], tcc__r0
lda.l score + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l writenum
; add sp, #11
tsa
clc
adc #11
tas
__local_68:
; gsym_addr t 84574 a 85348 ind 85348
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x52f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 1024
; push4 imm r 0x52f0
pea.w :backmap
pea.w backmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [blockcount + 0], tcc__r0
lda.l blockcount + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 85995 ind 85995
; gsym_addr t 0 a 86034 ind 86034
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 86124 ind 86124
; cmp op 0x95 inv 1 v 243 r 86124
; cmp ne
bne +
; gsym_addr t 0 a 86214 ind 86214
brl __local_69
+
; gtst finished; t 86124
; call r 0x2f0
jsr.l new_level
__local_69:
; gsym_addr t 86124 a 86321 ind 86321
__local_61:
; gsym_addr t 73264 a 86359 ind 86359
__local_60:
; gsym_addr t 72131 a 86397 ind 86397
__local_58:
; gsym_addr t 68817 a 86435 ind 86435
__local_57:
; gsym_addr t 68387 a 86473 ind 86473
__local_50:
; gsym_addr t 62766 a 86511 ind 86511
; call r 0x2f0
jsr.l draw_screen
; call r 0x2f0
jsr.l WaitForVBlank
; gsym_addr t 0 a 86617 ind 86617
; add sp, #__run_frame_locals
.ifgr __run_frame_locals 0
tsa
clc
adc #__run_frame_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x8" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; call r 0x2f0
jsr.l consoleInit
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l setBrightness
; add sp, #1
tsa
clc
adc #1
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 3840
; push2 imm r 0xf0
pea.w 4096
; push4 imm r 0x52f0
pea.w :tiles1
pea.w tiles1 + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 592
; push2 imm r 0xf0
pea.w 8192
; push4 imm r 0x52f0
pea.w :tiles2
pea.w tiles2 + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 2048
; push4 imm r 0x2f0
pea.w :bg1map
pea.w bg1map + 0
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; push2 imm r 0xf0
pea.w 2048
; push4 imm r 0x2f0
pea.w :bg2map
pea.w bg2map + 0
; push4 imm r 0x2f0
pea.w :backmap
pea.w backmap + 0
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; push2 imm r 0xf0
pea.w 100
; push4 imm r 0x2f0
pea.w :map
pea.w map + 0
; push4 imm r 0x2f0
pea.w :blocks
pea.w blocks + 0
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; push2 imm r 0xf0
pea.w 512
; push4 imm r 0x2f0
pea.w :palette
pea.w palette + 0
; push4 imm r 0x2f0
pea.w :pal
pea.w pal + 0
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [blockcount,0]
lda.b tcc__r0
sta.l blockcount + 0
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #5,tcc__r0
lda.w #5
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [bx,0]
lda.b tcc__r0
sta.l bx + 0
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #11,tcc__r0
lda.w #11
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [by,0]
lda.b tcc__r0
sta.l by + 0
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [score,0]
lda.b tcc__r0
sta.l score + 0
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #50000,tcc__r0
lda.w #50000
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [hiscore,0]
lda.b tcc__r0
sta.l hiscore + 0
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [level2,0]
lda.b tcc__r0
sta.l level2 + 0
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [color,0]
lda.b tcc__r0
sta.l color + 0
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [level,0]
lda.b tcc__r0
sta.l level + 0
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #4,tcc__r0
lda.w #4
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [lives,0]
lda.b tcc__r0
sta.l lives + 0
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #80,tcc__r0
lda.w #80
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [px,0]
lda.b tcc__r0
sta.l px + 0
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #2,tcc__r0
lda.w #2
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [vel,0]
lda.b tcc__r0
sta.l vel + 0
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [vel,2]
lda.b tcc__r0
sta.l vel + 2
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #94,tcc__r0
lda.w #94
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [pos,0]
lda.b tcc__r0
sta.l pos + 0
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #109,tcc__r0
lda.w #109
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x2
; st2 tcc__r0, [pos,2]
lda.b tcc__r0
sta.l pos + 2
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [b,0]
lda.b tcc__r0
sta.l b + 0
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [j,0]
sep #$20
lda.b tcc__r0
sta.l j + 0
rep #$20
__local_72:
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [j + 0], tcc__r0
lda.w #0
sep #$20
lda.l j + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #10
ldx #1
lda.b tcc__r0
sec
sbc.w #10
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 91173 ind 91173
; gsym_addr t 0 a 91212 ind 91212
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 91302 ind 91302
; cmp op 0x95 inv 1 v 243 r 91302
; cmp ne
bne +
; gsym_addr t 0 a 91392 ind 91392
brl __local_70
+
; gtst finished; t 91302
; gjmp_addr 0 at 91468
jmp.w __local_71
; gsym_addr t 91508 a 0 ind 91508
__local_78:
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [j + 0], tcc__r0
lda.w #0
sep #$20
lda.l j + 0
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [j,0]
sep #$20
lda.b tcc__r0
sta.l j + 0
rep #$20
; gjmp_addr 90921 at 92012
jmp.w __local_72
; gsym_addr t 92056 a 90921 ind 92056
__local_71:
; gsym_addr t 91508 a 92094 ind 92094
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
__local_75:
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #20
ldx #1
lda.b tcc__r0
sec
sbc.w #20
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 92566 ind 92566
; gsym_addr t 0 a 92605 ind 92605
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 92695 ind 92695
; cmp op 0x95 inv 1 v 243 r 92695
; cmp ne
bne +
; gsym_addr t 0 a 92785 ind 92785
brl __local_73
+
; gtst finished; t 92695
; gjmp_addr 0 at 92861
jmp.w __local_74
; gsym_addr t 92901 a 0 ind 92901
__local_77:
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
; gjmp_addr 92314 at 93302
jmp.w __local_75
; gsym_addr t 93346 a 92314 ind 93346
__local_74:
; gsym_addr t 92901 a 93384 ind 93384
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [b + 0], tcc__r0
lda.l b + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x1998a10
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [b,0]
lda.b tcc__r0
sta.l b + 0
; load 0
; type 36 reg 0x2f0 extra 0x0
; ld100 #blocks + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blocks
sta.b tcc__r0h
lda.w #blocks + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x24 c 0 r type 0x10)
; length xxy 100 vtop->type 0x24
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; store r 0x1 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r1, [a,0]
lda.b tcc__r1
sta.l a + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [a + 0], tcc__r0
lda.l a + 0
sta.b tcc__r0
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, #8
ldx #1
lda.b tcc__r0
sec
sbc.w #8
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 94617 ind 94617
; gsym_addr t 0 a 94656 ind 94656
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 94746 ind 94746
; cmp op 0x95 inv 1 v 243 r 94746
; cmp ne
bne +
; gsym_addr t 0 a 94836 ind 94836
brl __local_76
+
; gtst finished; t 94746
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [j + 0], tcc__r0
lda.w #0
sep #$20
lda.l j + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #5
lda.b tcc__r0
ldy.w #5
-
asl a
dey
bne -
+
sta.b tcc__r0
; load 1
; type 17 reg 0x53f0 extra 0x0
; ld1 [i + 0], tcc__r1
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x10)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [c,0]
lda.b tcc__r0
sta.l c + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [blockcount + 0], tcc__r0
lda.l blockcount + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x495060
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [blockcount,0]
lda.b tcc__r0
sta.l blockcount + 0
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #98
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld2048 #blockmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blockmap
sta.b tcc__r1h
lda.w #blockmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x6)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [a + 0], tcc__r0
lda.l a + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #10
lda.b tcc__r0
ldy.w #10
-
asl a
dey
bne -
+
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #13
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #99
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld2048 #blockmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:blockmap
sta.b tcc__r1h
lda.w #blockmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x6)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [a + 0], tcc__r0
lda.l a + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #10
lda.b tcc__r0
ldy.w #10
-
asl a
dey
bne -
+
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #14
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #131
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld2048 #backmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:backmap
sta.b tcc__r1h
lda.w #backmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x6)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x490b40
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0xffffffff
; ld2 [c + 0], tcc__r0
lda.l c + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #132
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld2048 #backmap + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:backmap
sta.b tcc__r1h
lda.w #backmap + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x6)
; length xxy 2048 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x490b40
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
__local_76:
; gsym_addr t 94746 a 100263 ind 100263
; gjmp_addr 92935 at 100303
jmp.w __local_77
; gsym_addr t 100348 a 92935 ind 100348
__local_73:
; gsym_addr t 92695 a 100388 ind 100388
; gsym_addr t 0 a 92935 ind 100428
; gjmp_addr 91542 at 100463
jmp.w __local_78
; gsym_addr t 100508 a 91542 ind 100508
__local_70:
; gsym_addr t 91302 a 100548 ind 100548
; gsym_addr t 0 a 91542 ind 100588
; push2 imm r 0xf0
pea.w 1062
; push2 imm r 0xf0
pea.w 310
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push1 imm r 0xf0
sep #$20
lda #8
pha
rep #$20
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [lives + 0], tcc__r0
lda.l lives + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l writenum
; add sp, #11
tsa
clc
adc #11
tas
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 584
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x12f0
pea.w :tccs_L.17
pea.w tccs_L.17 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 2048
; push4 imm r 0x52f0
pea.w :blockmap
pea.w blockmap + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; push2 imm r 0xf0
pea.w 1024
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 2048
; push4 imm r 0x52f0
pea.w :backmap
pea.w backmap + 0
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; push2 imm r 0xf0
pea.w 512
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x52f0
pea.w :pal
pea.w pal + 0
; call r 0x2f0
jsr.l dmaCopyCGram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 4096
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgSetGfxPtr
; add sp, #3
tsa
clc
adc #3
tas
; push2 imm r 0xf0
pea.w 8192
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetGfxPtr
; add sp, #3
tsa
clc
adc #3
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; call r 0x2f0
jsr.l setScreenOn
; call r 0x2f0
jsr.l draw_screen
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
__local_81:
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #40
ldx #1
lda.b tcc__r0
sec
sbc.w #40
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 103077 ind 103077
; gsym_addr t 0 a 103118 ind 103118
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 103210 ind 103210
; cmp op 0x95 inv 1 v 243 r 103210
; cmp ne
bne +
; gsym_addr t 0 a 103303 ind 103303
brl __local_79
+
; gtst finished; t 103210
; gjmp_addr 0 at 103382
jmp.w __local_80
; gsym_addr t 103423 a 0 ind 103423
__local_82:
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [i,0]
sep #$20
lda.b tcc__r0
sta.l i + 0
rep #$20
; gjmp_addr 102825 at 103839
jmp.w __local_81
; gsym_addr t 103885 a 102825 ind 103885
__local_80:
; gsym_addr t 103423 a 103926 ind 103926
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [i + 0], tcc__r0
lda.w #0
sep #$20
lda.l i + 0
rep #$20
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; gjmp_addr 103459 at 104332
jmp.w __local_82
; gsym_addr t 104378 a 103459 ind 104378
__local_79:
; gsym_addr t 103210 a 104419 ind 104419
; gsym_addr t 0 a 103459 ind 104460
__local_84:
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 104709 ind 104709
; gsym_addr t 0 a 104750 ind 104750
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 104842 ind 104842
; cmp op 0x95 inv 1 v 243 r 104842
; cmp ne
bne +
; gsym_addr t 0 a 104935 ind 104935
brl __local_83
+
; gtst finished; t 104842
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 104496 at 105049
jmp.w __local_84
; gsym_addr t 105095 a 104496 ind 105095
__local_83:
; gsym_addr t 104842 a 105136 ind 105136
; gsym_addr t 0 a 104496 ind 105177
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 584
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x12f0
pea.w :tccs_L.18
pea.w tccs_L.18 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; push2 imm r 0xf0
pea.w 1014
; push2 imm r 0xf0
pea.w 649
; push4 imm r 0x2f0
pea.w :blockmap
pea.w blockmap + 0
; push4 imm r 0x12f0
pea.w :tccs_L.19
pea.w tccs_L.19 + 0
; call r 0x2f0
jsr.l writestring
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; push2 imm r 0xf0
pea.w 2048
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x52f0
pea.w :blockmap
pea.w blockmap + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
__local_85:
; gtst inv 1 t 0 v 240 r 105904 ind 105904
; uncond jump: nop
; gtst finished; t 0
; call r 0x2f0
jsr.l run_frame
; gjmp_addr 105904 at 106018
jmp.w __local_85
; gsym_addr t 106064 a 105904 ind 106064
; gsym_addr t 0 a 106105 ind 106105
; gsym_addr t 0 a 105904 ind 106141
; load 0
; type 0 reg 0xf0 extra 0x5f202020
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 106261
jmp.w __local_86
; gsym_addr t 106302 a 0 ind 106302
__local_86:
; gsym_addr t 106302 a 106338 ind 106338
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ram.data" APPENDTO "globram.data"

dir dsb 16
map dsb 100

.ENDS

.SECTION ".data" APPENDTO "glob.data"

.db $fe,$ff,$ff,$ff,$ff,$ff,$fe,$ff,$1,$0,$fe,$ff,$2,$0,$ff,$ff
.db $7,$8,$8,$8,$8,$8,$8,$8,$8,$7,$8,$7,$8,$7,$8,$8,$7,$8,$7,$8,$8,$8,$7,$8,$7,$7,$8,$7,$8,$8,$8,$8,$8,$1,$3,$3,$1,$8,$8,$8,$8,$0,$4,$8,$8,$8,$8,$4,$0,$8,$8,$0,$8,$8,$5,$5,$8,$8,$0,$8,$8,$0,$4,$8,$8,$8,$8,$4,$0,$8,$8,$8,$8,$1,$3,$3,$1,$8,$8,$8,$8,$8,$6,$8,$6,$6,$8,$6,$8,$8,$7,$7,$7,$7,$8,$8,$7,$7,$7,$7
.ENDS

.SECTION ".rodata" SUPERFREE

tccs_L.8: .db $50,$4c,$41,$59,$45,$52,$20,$31,$a,$a,$20,$52,$45,$41,$44,$59,$0
tccs_L.9: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
tccs_L.10: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
tccs_L.11: .db $47,$41,$4d,$45,$20,$4f,$56,$45,$52,$0
tccs_L.12: .db $50,$4c,$41,$59,$45,$52,$20,$31,$a,$a,$20,$52,$45,$41,$44,$59,$0
tccs_L.13: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
tccs_L.14: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
tccs_L.15: .db $50,$41,$55,$53,$45,$0
tccs_L.16: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
tccs_L.17: .db $50,$4c,$41,$59,$45,$52,$20,$31,$a,$a,$20,$52,$45,$41,$44,$59,$0
tccs_L.18: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
tccs_L.19: .db $20,$20,$20,$20,$20,$20,$20,$20,$0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
blockmap dsb 2048
backmap dsb 2048
pal dsb 512
blocks dsb 100
i dsb 1
j dsb 1
k dsb 1
a dsb 2
c dsb 2
b dsb 2
blockcount dsb 2
bx dsb 2
by dsb 2
obx dsb 2
oby dsb 2
score dsb 2
hiscore dsb 2
level2 dsb 2
color dsb 2
level dsb 2
lives dsb 2
px dsb 2
vel dsb 4
pos dsb 4
pad0 dsb 2
.ENDS
