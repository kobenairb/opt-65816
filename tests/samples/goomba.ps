.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __goombainit_locals 0
.define __goombaupdate_locals 0

.SECTION ".text_0x0" SUPERFREE

goombainit:
; sub sp,#__goombainit_locals
.ifgr __goombainit_locals 0
tsa
sec
sbc #__goombainit_locals
tas
.endif
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x88af6e8
; ld2 [sp,5],tcc__r0
; stack adjust: fc + disp - loc 7
lda 5 + __goombainit_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x88af6e8
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 7
lda 5 + __goombainit_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfilex1J0Eg8
pea.w tccs_L.tmpxfilex1J0Eg8 + 0
; call r 0x2f0
jsr.l consoleNocashMessage
; add sp, #8
tsa
clc
adc #8
tas
; load 0
; type 16 reg 0x1f2 extra 0xffdc3fe0
; ld2 [sp,7],tcc__r0
; stack adjust: fc + disp - loc 9
lda 7 + __goombainit_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 7 r type 0x86)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #255
sta.b tcc__r0
; ldpush before load type 0x10 reg 0x1f2
; load 1
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc 7
lda 5 + __goombainit_locals + 1,s
sta.b tcc__r1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x1f2
; load 1
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r1
; stack adjust: fc + disp - loc 7
lda 5 + __goombainit_locals + 1,s
sta.b tcc__r1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x11 reg 0x0
; ldpush1 (type 0x11 reg 0x0) tcc__r0
sep #$20
lda.b tcc__r0
pha
rep #$20
; call r 0x2f0
jsr.l objNew
; add sp, #5
tsa
clc
adc #5
tas
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 1854 ind 1854
; gsym_addr t 0 a 1891 ind 1891
; ERROR no jump found to patch
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 2010 ind 2010
; cmp op 0x95 inv 1 v 243 r 2010
; cmp ne
bne +
; gsym_addr t 0 a 2097 ind 2097
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 2010
; gjmp_addr 0 at 2200
jmp.w __local_1
; gsym_addr t 2238 a 0 ind 2238
__local_0:
; gsym_addr t 2010 a 2270 ind 2270
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [objgetid + 0], tcc__r0
lda.l objgetid + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l objGetPointer
; add sp, #2
pla
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [objptr + 0], tcc__r0
lda.l objptr + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0xa4)
; length xxy 2 vtop->type 0x10
dec.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #6
lda.b tcc__r0
ldy.w #6
-
asl a
dey
bne -
+
sta.b tcc__r0
; load 1
; type 164 reg 0x2f0 extra 0x0
; ld4096 #objbuffers + 0, tcc__r1 (type 0xa4)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:objbuffers
sta.b tcc__r1h
lda.w #objbuffers + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0xa4 c 0 r type 0x4)
; length xxy 4096 vtop->type 0xa4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; store r 0x1 fr 0x3f0 ft 0x4 fc 0x0
; st4 tcc__r1, [goombaobj,0]
lda.b tcc__r1
sta.l goombaobj + 0
lda.b tcc__r1h
sta.l goombaobj + 0 + 2
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #26
sta.b tcc__r0
; load 1
; type 16 reg 0xf0 extra 0x0
; ld2 #16,tcc__r1
lda.w #16
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #28
sta.b tcc__r0
; load 1
; type 16 reg 0xf0 extra 0x0
; ld2 #16,tcc__r1
lda.w #16
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #14
sta.b tcc__r0
; load 1
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r1
lda.w #0
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #50
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #10,tcc__r1
lda.w #10
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0x0
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #51
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r1
lda.w #1
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0x0
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #34
sta.b tcc__r0
; load 1
; type 16 reg 0xf0 extra 0x0
; ld2 #64886,tcc__r1
lda.w #64886
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #30
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,9],tcc__r1
; stack adjust: fc + disp - loc 11
lda 9 + __goombainit_locals + 1,s
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #32
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,11],tcc__r1
; stack adjust: fc + disp - loc 13
lda 11 + __goombainit_locals + 1,s
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #6
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [nbobjects + 0], tcc__r1
lda.l nbobjects + 0
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [nbobjects + 0], tcc__r0
lda.l nbobjects + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #4
lda.b tcc__r0
asl a
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 164 reg 0x2f0 extra 0x0
; ld2048 #oambuffer + 0, tcc__r1 (type 0xa4)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:oambuffer
sta.b tcc__r1h
lda.w #oambuffer + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0xa4 c 0 r type 0x0)
; length xxy 2048 vtop->type 0xa4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 0 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda 3 + __goombainit_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x0 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [nbobjects + 0], tcc__r0
lda.l nbobjects + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #4
lda.b tcc__r0
asl a
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 164 reg 0x2f0 extra 0x0
; ld2048 #oambuffer + 0, tcc__r1 (type 0xa4)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:oambuffer
sta.b tcc__r1h
lda.w #oambuffer + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0xa4 c 0 r type 0x0)
; length xxy 2048 vtop->type 0xa4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 0 reg 0x1f2 extra 0x0
; ld2 [sp,5],tcc__r0
; stack adjust: fc + disp - loc 7
lda 5 + __goombainit_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x0 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [nbobjects + 0], tcc__r0
lda.l nbobjects + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #4
lda.b tcc__r0
asl a
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 164 reg 0x2f0 extra 0x0
; ld2048 #oambuffer + 0, tcc__r1 (type 0xa4)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:oambuffer
sta.b tcc__r1h
lda.w #oambuffer + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0xa4 c 0 r type 0x0)
; length xxy 2048 vtop->type 0xa4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #4
sta.b tcc__r1
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [nbobjects + 0], tcc__r0
lda.l nbobjects + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #4
lda.b tcc__r0
asl a
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 164 reg 0x2f0 extra 0x0
; ld2048 #oambuffer + 0, tcc__r1 (type 0xa4)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:oambuffer
sta.b tcc__r1h
lda.w #oambuffer + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0xa4 c 0 r type 0x0)
; length xxy 2048 vtop->type 0xa4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #7
sta.b tcc__r1
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x5101 ft 0x11 fc 0x0
; st1 tcc__r0, [tcc__r1,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r1]
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [nbobjects + 0], tcc__r0
lda.l nbobjects + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #4
lda.b tcc__r0
asl a
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 164 reg 0x2f0 extra 0x0
; ld2048 #oambuffer + 0, tcc__r1 (type 0xa4)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:oambuffer
sta.b tcc__r1h
lda.w #oambuffer + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0xa4 c 0 r type 0x0)
; length xxy 2048 vtop->type 0xa4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #6
sta.b tcc__r1
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #32,tcc__r0
lda.w #32
sta.b tcc__r0
; store r 0x0 fr 0x5101 ft 0x11 fc 0x0
; st1 tcc__r0, [tcc__r1,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r1]
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [nbobjects + 0], tcc__r0
lda.l nbobjects + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #4
lda.b tcc__r0
asl a
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 164 reg 0x2f0 extra 0x0
; ld2048 #oambuffer + 0, tcc__r1 (type 0xa4)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:oambuffer
sta.b tcc__r1h
lda.w #oambuffer + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0xa4 c 0 r type 0x0)
; length xxy 2048 vtop->type 0xa4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #8
sta.b tcc__r1
; load 0
; type 4 reg 0x52f0 extra 0x0
; ld4 #sprgoomba + 0, tcc__r0 (type 0x4)
lda.w #:sprgoomba
sta.b tcc__r0h
lda.w #sprgoomba + 0
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x4 fc 0x0
; st4 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
ldy #0
sta.b [tcc__r1],y
lda.b tcc__r0h
iny
iny
sta.b [tcc__r1],y
; load 0
; type 144 reg 0x3f0 extra 0x0
; ld2 [nbobjects + 0], tcc__r0
lda.l nbobjects + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x3d
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x90)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x90 fc 0x0
; st2 tcc__r0, [nbobjects,0]
lda.b tcc__r0
sta.l nbobjects + 0
__local_1:
; gsym_addr t 2238 a 13801 ind 13801
; add sp, #__goombainit_locals
.ifgr __goombainit_locals 0
tsa
clc
adc #__goombainit_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x1" SUPERFREE

goombaupdate:
; sub sp,#__goombaupdate_locals
.ifgr __goombaupdate_locals 0
tsa
sec
sbc #__goombaupdate_locals
tas
.endif
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda.w #0
sep #$20
lda 3 + __goombaupdate_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #6
lda.b tcc__r0
ldy.w #6
-
asl a
dey
bne -
+
sta.b tcc__r0
; load 1
; type 164 reg 0x2f0 extra 0x0
; ld4096 #objbuffers + 0, tcc__r1 (type 0xa4)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:objbuffers
sta.b tcc__r1h
lda.w #objbuffers + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0xa4 c 0 r type 0x4)
; length xxy 4096 vtop->type 0xa4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; store r 0x1 fr 0x3f0 ft 0x4 fc 0x0
; st4 tcc__r1, [goombaobj,0]
lda.b tcc__r1
sta.l goombaobj + 0
lda.b tcc__r1h
sta.l goombaobj + 0 + 2
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x4)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #16
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x24 c 0 r type 0x4)
; length xxy 3 vtop->type 0x24
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x4 fc 0x0
; st4 tcc__r0, [goombaox,0]
lda.b tcc__r0
sta.l goombaox + 0
lda.b tcc__r0h
sta.l goombaox + 0 + 2
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x4)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #19
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x24 c 0 r type 0x4)
; length xxy 3 vtop->type 0x24
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x4 fc 0x0
; st4 tcc__r0, [goombaoy,0]
lda.b tcc__r0
sta.l goombaoy + 0
lda.b tcc__r0h
sta.l goombaoy + 0 + 2
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaox + 0], tcc__r0
lda.l goombaox + 0
sta.b tcc__r0
lda.l goombaox + 0 + 2
sta.b tcc__r0h
; load 1
; type 0 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; store r 0x1 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r1, [goombax,0]
lda.b tcc__r1
sta.l goombax + 0
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x10)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #6
sta.b tcc__r0
; load 1
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; store r 0x1 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r1, [goombanum,0]
lda.b tcc__r1
sta.l goombanum + 0
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #50
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; load 2
; type 0 reg 0x1 extra 0x3d
; mov tcc__r1, tcc__r2
lda.b tcc__r1
sta.b tcc__r2
lda.b tcc__r1h
sta.b tcc__r2h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0x0
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #50
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; gen_opi len 2 op 0x9d
; cmpcd tcc__r1, #10
ldx #1
lda.b tcc__r1
sec
sbc.w #10
tay
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 18203 ind 18203
; gsym_addr t 0 a 18242 ind 18242
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 18332 ind 18332
; cmp op 0x95 inv 1 v 243 r 18332
; cmp ne
bne +
; gsym_addr t 0 a 18422 ind 18422
brl __local_2
+
; gtst finished; t 18332
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #50
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r1
lda.w #0
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0x0
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #14
sta.b tcc__r0
; load 1
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r1
lda.l goombaobj + 0
sta.b tcc__r1
lda.l goombaobj + 0 + 2
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #14
sta.b tcc__r1
; load 2
; type 16 reg 0xf0 extra 0x0
; ld2 #1,tcc__r2
lda.w #1
sta.b tcc__r2
; load 3
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r3
lda.b [tcc__r1]
sta.b tcc__r3
; gen_opi len 2 op -
; sbc tcc__r3 (0x3), tcc__r2 (0x2) (fr type 0x10 c 1 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r2
sbc.b tcc__r3
sta.b tcc__r2
; store r 0x2 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r2, [tcc__r0,0]
lda.b tcc__r2
sta.b [tcc__r0]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [goombanum + 0], tcc__r0
lda.l goombanum + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #4
lda.b tcc__r0
asl a
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 164 reg 0x2f0 extra 0x0
; ld2048 #oambuffer + 0, tcc__r1 (type 0xa4)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:oambuffer
sta.b tcc__r1h
lda.w #oambuffer + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0xa4 c 0 r type 0x0)
; length xxy 2048 vtop->type 0xa4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #4
sta.b tcc__r1
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x10)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #14
sta.b tcc__r0
; load 2
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r2
lda.b [tcc__r0]
sta.b tcc__r2
; store r 0x2 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r2, [tcc__r1,0]
lda.b tcc__r2
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [goombanum + 0], tcc__r0
lda.l goombanum + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #4
lda.b tcc__r0
asl a
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 164 reg 0x2f0 extra 0x0
; ld2048 #oambuffer + 0, tcc__r1 (type 0xa4)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:oambuffer
sta.b tcc__r1h
lda.w #oambuffer + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0xa4 c 0 r type 0x0)
; length xxy 2048 vtop->type 0xa4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #7
sta.b tcc__r1
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x5101 ft 0x11 fc 0x0
; st1 tcc__r0, [tcc__r1,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r1]
rep #$20
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #51
sta.b tcc__r0
; load 1
; type 17 reg 0x5100 extra 0x0
; ld1 [tcc__r0,0],tcc__r1
lda.w #0
sep #$20
lda.b [tcc__r0]
rep #$20
sta.b tcc__r1
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r1, #1
ldx #1
lda.b tcc__r1
sec
sbc #1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 22687 ind 22687
; gsym_addr t 0 a 22726 ind 22726
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 22816 ind 22816
; cmp op 0x95 inv 1 v 243 r 22816
; cmp ne
bne +
; gsym_addr t 0 a 22906 ind 22906
brl __local_3
+
; gtst finished; t 22816
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #30
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [goombax + 0], tcc__r1
lda.l goombax + 0
sta.b tcc__r1
; load 2
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r2
lda.b [tcc__r0]
sta.b tcc__r2
; gen_opi len 2 op 0x96
; ucmpcd tcc__r1, tcc__r2
ldx #1
lda.b tcc__r1
sec
sbc.b tcc__r2
tay
beq ++
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 23608 ind 23608
; gsym_addr t 0 a 23647 ind 23647
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 23737 ind 23737
; cmp op 0x95 inv 1 v 243 r 23737
; cmp ne
bne +
; gsym_addr t 0 a 23827 ind 23827
brl __local_4
+
; gtst finished; t 23737
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #51
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #2,tcc__r1
lda.w #2
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0x0
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #34
sta.b tcc__r0
; load 1
; type 16 reg 0xf0 extra 0x0
; ld2 #650,tcc__r1
lda.w #650
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #36
sta.b tcc__r0
; load 1
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r1
lda.w #0
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; gjmp_addr 0 at 25350
jmp.w __local_5
; gsym_addr t 25389 a 0 ind 25389
__local_4:
; gsym_addr t 23737 a 25423 ind 25423
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #34
sta.b tcc__r0
; load 1
; type 16 reg 0xf0 extra 0x0
; ld2 #64886,tcc__r1
lda.w #64886
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
__local_5:
; gsym_addr t 25389 a 25944 ind 25944
; gjmp_addr 0 at 25982
jmp.w __local_6
; gsym_addr t 26021 a 0 ind 26021
__local_3:
; gsym_addr t 22816 a 26055 ind 26055
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #32
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [goombax + 0], tcc__r1
lda.l goombax + 0
sta.b tcc__r1
; load 2
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r2
lda.b [tcc__r0]
sta.b tcc__r2
; gen_opi len 2 op 0x93
; ucmpcd tcc__r1, tcc__r2
ldx #1
lda.b tcc__r1
sec
sbc.b tcc__r2
tay
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 26713 ind 26713
; gsym_addr t 0 a 26752 ind 26752
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 26842 ind 26842
; cmp op 0x95 inv 1 v 243 r 26842
; cmp ne
bne +
; gsym_addr t 0 a 26932 ind 26932
brl __local_7
+
; gtst finished; t 26842
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #51
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r1
lda.w #1
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0x0
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #34
sta.b tcc__r0
; load 1
; type 16 reg 0xf0 extra 0x0
; ld2 #64886,tcc__r1
lda.w #64886
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #36
sta.b tcc__r0
; load 1
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r1
lda.w #0
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; gjmp_addr 0 at 28459
jmp.w __local_8
; gsym_addr t 28498 a 0 ind 28498
__local_7:
; gsym_addr t 26842 a 28532 ind 28532
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaobj + 0], tcc__r0
lda.l goombaobj + 0
sta.b tcc__r0
lda.l goombaobj + 0 + 2
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #34
sta.b tcc__r0
; load 1
; type 16 reg 0xf0 extra 0x0
; ld2 #650,tcc__r1
lda.w #650
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0x0
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
__local_8:
; gsym_addr t 28498 a 29049 ind 29049
__local_6:
; gsym_addr t 26021 a 29087 ind 29087
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda.w #0
sep #$20
lda 3 + __goombaupdate_locals + 1,s
rep #$20
sta.b tcc__r0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l objUpdateXY
; add sp, #2
pla
__local_2:
; gsym_addr t 18332 a 29437 ind 29437
; load 0
; type 4 reg 0x3f0 extra 0x0
; ld4 [goombaoy + 0], tcc__r0
lda.l goombaoy + 0
sta.b tcc__r0
lda.l goombaoy + 0 + 2
sta.b tcc__r0h
; load 1
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [y_pos + 0], tcc__r0
lda.l y_pos + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r1
sbc.b tcc__r0
sta.b tcc__r1
; store r 0x1 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r1, [goombay,0]
lda.b tcc__r1
sta.l goombay + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [goombax + 0], tcc__r0
lda.l goombax + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [x_pos + 0], tcc__r1
lda.l x_pos + 0
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x0
; st2 tcc__r0, [goombax,0]
lda.b tcc__r0
sta.l goombax + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [goombanum + 0], tcc__r0
lda.l goombanum + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #4
lda.b tcc__r0
asl a
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 164 reg 0x2f0 extra 0x0
; ld2048 #oambuffer + 0, tcc__r1 (type 0xa4)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:oambuffer
sta.b tcc__r1h
lda.w #oambuffer + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0xa4 c 0 r type 0x0)
; length xxy 2048 vtop->type 0xa4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [goombax + 0], tcc__r0
lda.l goombax + 0
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x0 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [goombanum + 0], tcc__r0
lda.l goombanum + 0
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #4
lda.b tcc__r0
asl a
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 164 reg 0x2f0 extra 0x0
; ld2048 #oambuffer + 0, tcc__r1 (type 0xa4)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:oambuffer
sta.b tcc__r1h
lda.w #oambuffer + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0xa4 c 0 r type 0x0)
; length xxy 2048 vtop->type 0xa4
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 0 reg 0x3f0 extra 0x0
; ld2 [goombay + 0], tcc__r0
lda.l goombay + 0
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x0 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [goombanum + 0], tcc__r0
lda.l goombanum + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamDynamic16Draw
; add sp, #2
pla
; gsym_addr t 0 a 32425 ind 32425
; add sp, #__goombaupdate_locals
.ifgr __goombaupdate_locals 0
tsa
clc
adc #__goombaupdate_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ramtmpxfilex1J0Eg.data" APPENDTO "globram.data"
__local_dummytmpxfilex1J0Eg.data dsb 1

.ENDS

.SECTION "tmpxfilex1J0Eg.data" APPENDTO "glob.data"

__local_dummytmpxfilex1J0Eg.data: .db 0
.ENDS

.SECTION ".rodata" SUPERFREE

tccs_L.tmpxfilex1J0Eg8: .db $67,$6f,$6f,$6d,$62,$61,$69,$6e,$69,$74,$20,$25,$64,$20,$25,$64,$a,$0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
goombaobj dsb 4
goombaox dsb 4
goombaoy dsb 4
goombax dsb 2
goombay dsb 2
goombanum dsb 2
.ENDS
