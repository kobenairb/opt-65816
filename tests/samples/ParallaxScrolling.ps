.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __main_locals 0

.SECTION ".text_0x0" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; call r 0x2f0
jsr.l consoleInit
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #back_end + 0, tcc__r0 (type 0x84)
lda.w #:back_end
sta.b tcc__r0h
lda.w #back_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #back + 0, tcc__r1 (type 0x84)
lda.w #:back
sta.b tcc__r1h
lda.w #back + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 4096
; push2 imm r 0xf0
pea.w 16
; push2 imm r 0xf0
pea.w 64
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push4 imm r 0x12f0
pea.w :palette
pea.w palette + 0
; push4 imm r 0x12f0
pea.w :back
pea.w back + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 4096
; push4 imm r 0x12f0
pea.w :map
pea.w map + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; call r 0x2f0
jsr.l setScreenOn
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #72,tcc__r0
lda.w #72
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [HDMATable16,0]
sep #$20
lda.b tcc__r0
sta.l HDMATable16 + 0
rep #$20
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x1
; st2 tcc__r0, [HDMATable16,1]
lda.b tcc__r0
sta.l HDMATable16 + 1
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #88,tcc__r0
lda.w #88
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x3
; st1 tcc__r0, [HDMATable16,3]
sep #$20
lda.b tcc__r0
sta.l HDMATable16 + 3
rep #$20
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #2,tcc__r0
lda.w #2
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x4
; st2 tcc__r0, [HDMATable16,4]
lda.b tcc__r0
sta.l HDMATable16 + 4
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #64,tcc__r0
lda.w #64
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x6
; st1 tcc__r0, [HDMATable16,6]
sep #$20
lda.b tcc__r0
sta.l HDMATable16 + 6
rep #$20
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #4,tcc__r0
lda.w #4
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x7
; st2 tcc__r0, [HDMATable16,7]
lda.b tcc__r0
sta.l HDMATable16 + 7
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x9
; st1 tcc__r0, [HDMATable16,9]
sep #$20
lda.b tcc__r0
sta.l HDMATable16 + 9
rep #$20
__local_0:
; gtst inv 1 t 0 v 240 r 3081 ind 3081
; uncond jump: nop
; gtst finished; t 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l setParallaxScrolling
; add sp, #1
tsa
clc
adc #1
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [HDMATable16 + 1], tcc__r0
lda.l HDMATable16 + 1
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 1 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x1
; st2 tcc__r0, [HDMATable16,1]
lda.b tcc__r0
sta.l HDMATable16 + 1
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [HDMATable16 + 4], tcc__r0
lda.l HDMATable16 + 4
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 4 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x4
; st2 tcc__r0, [HDMATable16,4]
lda.b tcc__r0
sta.l HDMATable16 + 4
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [HDMATable16 + 7], tcc__r0
lda.l HDMATable16 + 7
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 7 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x7
; st2 tcc__r0, [HDMATable16,7]
lda.b tcc__r0
sta.l HDMATable16 + 7
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 3081 at 4402
jmp.w __local_0
; gsym_addr t 4443 a 3081 ind 4443
; gsym_addr t 0 a 4478 ind 4478
; gsym_addr t 0 a 3081 ind 4510
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 4619
jmp.w __local_1
; gsym_addr t 4657 a 0 ind 4657
__local_1:
; gsym_addr t 4657 a 4689 ind 4689
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ramtmpxfilezJqx2U.data" APPENDTO "globram.data"
__local_dummytmpxfilezJqx2U.data dsb 1

.ENDS

.SECTION "tmpxfilezJqx2U.data" APPENDTO "glob.data"

__local_dummytmpxfilezJqx2U.data: .db 0
.ENDS

.SECTION ".rodata" SUPERFREE

__local_dummytmpxfilezJqx2U.rodata: .db 0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
__local_dummybss dsb 1
.ENDS
