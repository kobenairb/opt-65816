.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __draw_locals 0
.define __changeObjSize_locals 0
.define __main_locals 2

.SECTION ".text_0x0" SUPERFREE

draw:
; sub sp,#__draw_locals
.ifgr __draw_locals 0
tsa
sec
sbc #__draw_locals
tas
.endif
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfile2OJBeK8
pea.w tccs_L.tmpxfile2OJBeK8 + 0
; push2 imm r 0xf0
pea.w 2
; push2 imm r 0xf0
pea.w 3
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 550 ind 550
; gsym_addr t 0 a 585 ind 585
; ERROR no jump found to patch
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 702 ind 702
; cmp op 0x95 inv 1 v 243 r 702
; cmp ne
bne +
; gsym_addr t 0 a 786 ind 786
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 702
; gjmp_addr 0 at 886
jmp.w __local_1
; gsym_addr t 923 a 0 ind 923
__local_0:
; gsym_addr t 702 a 953 ind 953
; load 0
; type 36 reg 0x2f0 extra 0xffe8f90c
; ld2 #tccs_L.tmpxfile2OJBeK11 + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:tccs_L.tmpxfile2OJBeK11
sta.b tcc__r0h
lda.w #tccs_L.tmpxfile2OJBeK11 + 0
sta.b tcc__r0
; gjmp_addr 0 at 1230
jmp.w __local_2
; gsym_addr t 1268 a 0 ind 1268
__local_1:
; gsym_addr t 923 a 1300 ind 1300
; load 0
; type 36 reg 0x2f0 extra 0xffe8f90c
; ld2 #tccs_L.tmpxfile2OJBeK10 + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:tccs_L.tmpxfile2OJBeK10
sta.b tcc__r0h
lda.w #tccs_L.tmpxfile2OJBeK10 + 0
sta.b tcc__r0
__local_2:
; gsym_addr t 1268 a 1579 ind 1579
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfile2OJBeK12
pea.w tccs_L.tmpxfile2OJBeK12 + 0
; ldpush before load type 0x24 reg 0x0
; ldpush4 (type 0x24 reg 0x0) tcc__r0
pei (tcc__r0h)
pei (tcc__r0)
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfile2OJBeK9
pea.w tccs_L.tmpxfile2OJBeK9 + 0
; push2 imm r 0xf0
pea.w 3
; push2 imm r 0xf0
pea.w 3
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #16
tsa
clc
adc #16
tas
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #1
ldx #1
lda.b tcc__r0
sec
sbc #1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 2234 ind 2234
; gsym_addr t 0 a 2271 ind 2271
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 2359 ind 2359
; cmp op 0x95 inv 1 v 243 r 2359
; cmp ne
bne +
; gsym_addr t 0 a 2446 ind 2446
brl __local_3
+
; gtst finished; t 2359
; gjmp_addr 0 at 2518
jmp.w __local_4
; gsym_addr t 2556 a 0 ind 2556
__local_3:
; gsym_addr t 2359 a 2588 ind 2588
; load 0
; type 36 reg 0x2f0 extra 0xffe8f90c
; ld2 #tccs_L.tmpxfile2OJBeK15 + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:tccs_L.tmpxfile2OJBeK15
sta.b tcc__r0h
lda.w #tccs_L.tmpxfile2OJBeK15 + 0
sta.b tcc__r0
; gjmp_addr 0 at 2868
jmp.w __local_5
; gsym_addr t 2906 a 0 ind 2906
__local_4:
; gsym_addr t 2556 a 2938 ind 2938
; load 0
; type 36 reg 0x2f0 extra 0xffe8f90c
; ld2 #tccs_L.tmpxfile2OJBeK14 + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:tccs_L.tmpxfile2OJBeK14
sta.b tcc__r0h
lda.w #tccs_L.tmpxfile2OJBeK14 + 0
sta.b tcc__r0
__local_5:
; gsym_addr t 2906 a 3218 ind 3218
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfile2OJBeK16
pea.w tccs_L.tmpxfile2OJBeK16 + 0
; ldpush before load type 0x24 reg 0x0
; ldpush4 (type 0x24 reg 0x0) tcc__r0
pei (tcc__r0h)
pei (tcc__r0)
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfile2OJBeK13
pea.w tccs_L.tmpxfile2OJBeK13 + 0
; push2 imm r 0xf0
pea.w 4
; push2 imm r 0xf0
pea.w 3
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #16
tsa
clc
adc #16
tas
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #2
ldx #1
lda.b tcc__r0
sec
sbc #2
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 3875 ind 3875
; gsym_addr t 0 a 3912 ind 3912
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 4000 ind 4000
; cmp op 0x95 inv 1 v 243 r 4000
; cmp ne
bne +
; gsym_addr t 0 a 4087 ind 4087
brl __local_6
+
; gtst finished; t 4000
; gjmp_addr 0 at 4159
jmp.w __local_7
; gsym_addr t 4197 a 0 ind 4197
__local_6:
; gsym_addr t 4000 a 4229 ind 4229
; load 0
; type 36 reg 0x2f0 extra 0xffe8f90c
; ld2 #tccs_L.tmpxfile2OJBeK19 + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:tccs_L.tmpxfile2OJBeK19
sta.b tcc__r0h
lda.w #tccs_L.tmpxfile2OJBeK19 + 0
sta.b tcc__r0
; gjmp_addr 0 at 4509
jmp.w __local_8
; gsym_addr t 4547 a 0 ind 4547
__local_7:
; gsym_addr t 4197 a 4579 ind 4579
; load 0
; type 36 reg 0x2f0 extra 0xffe8f90c
; ld2 #tccs_L.tmpxfile2OJBeK18 + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:tccs_L.tmpxfile2OJBeK18
sta.b tcc__r0h
lda.w #tccs_L.tmpxfile2OJBeK18 + 0
sta.b tcc__r0
__local_8:
; gsym_addr t 4547 a 4859 ind 4859
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfile2OJBeK20
pea.w tccs_L.tmpxfile2OJBeK20 + 0
; ldpush before load type 0x24 reg 0x0
; ldpush4 (type 0x24 reg 0x0) tcc__r0
pei (tcc__r0h)
pei (tcc__r0)
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfile2OJBeK17
pea.w tccs_L.tmpxfile2OJBeK17 + 0
; push2 imm r 0xf0
pea.w 5
; push2 imm r 0xf0
pea.w 3
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #16
tsa
clc
adc #16
tas
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #3
ldx #1
lda.b tcc__r0
sec
sbc #3
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 5516 ind 5516
; gsym_addr t 0 a 5553 ind 5553
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 5641 ind 5641
; cmp op 0x95 inv 1 v 243 r 5641
; cmp ne
bne +
; gsym_addr t 0 a 5728 ind 5728
brl __local_9
+
; gtst finished; t 5641
; gjmp_addr 0 at 5800
jmp.w __local_10
; gsym_addr t 5839 a 0 ind 5839
__local_9:
; gsym_addr t 5641 a 5871 ind 5871
; load 0
; type 36 reg 0x2f0 extra 0xffe8f90c
; ld2 #tccs_L.tmpxfile2OJBeK23 + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:tccs_L.tmpxfile2OJBeK23
sta.b tcc__r0h
lda.w #tccs_L.tmpxfile2OJBeK23 + 0
sta.b tcc__r0
; gjmp_addr 0 at 6151
jmp.w __local_11
; gsym_addr t 6190 a 0 ind 6190
__local_10:
; gsym_addr t 5839 a 6222 ind 6222
; load 0
; type 36 reg 0x2f0 extra 0xffe8f90c
; ld2 #tccs_L.tmpxfile2OJBeK22 + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:tccs_L.tmpxfile2OJBeK22
sta.b tcc__r0h
lda.w #tccs_L.tmpxfile2OJBeK22 + 0
sta.b tcc__r0
__local_11:
; gsym_addr t 6190 a 6502 ind 6502
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfile2OJBeK24
pea.w tccs_L.tmpxfile2OJBeK24 + 0
; ldpush before load type 0x24 reg 0x0
; ldpush4 (type 0x24 reg 0x0) tcc__r0
pei (tcc__r0h)
pei (tcc__r0)
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfile2OJBeK21
pea.w tccs_L.tmpxfile2OJBeK21 + 0
; push2 imm r 0xf0
pea.w 6
; push2 imm r 0xf0
pea.w 3
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #16
tsa
clc
adc #16
tas
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #4
ldx #1
lda.b tcc__r0
sec
sbc #4
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 7159 ind 7159
; gsym_addr t 0 a 7196 ind 7196
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 7284 ind 7284
; cmp op 0x95 inv 1 v 243 r 7284
; cmp ne
bne +
; gsym_addr t 0 a 7371 ind 7371
brl __local_12
+
; gtst finished; t 7284
; gjmp_addr 0 at 7444
jmp.w __local_13
; gsym_addr t 7483 a 0 ind 7483
__local_12:
; gsym_addr t 7284 a 7515 ind 7515
; load 0
; type 36 reg 0x2f0 extra 0xffe8f90c
; ld2 #tccs_L.tmpxfile2OJBeK27 + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:tccs_L.tmpxfile2OJBeK27
sta.b tcc__r0h
lda.w #tccs_L.tmpxfile2OJBeK27 + 0
sta.b tcc__r0
; gjmp_addr 0 at 7795
jmp.w __local_14
; gsym_addr t 7834 a 0 ind 7834
__local_13:
; gsym_addr t 7483 a 7866 ind 7866
; load 0
; type 36 reg 0x2f0 extra 0xffe8f90c
; ld2 #tccs_L.tmpxfile2OJBeK26 + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:tccs_L.tmpxfile2OJBeK26
sta.b tcc__r0h
lda.w #tccs_L.tmpxfile2OJBeK26 + 0
sta.b tcc__r0
__local_14:
; gsym_addr t 7834 a 8146 ind 8146
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfile2OJBeK28
pea.w tccs_L.tmpxfile2OJBeK28 + 0
; ldpush before load type 0x24 reg 0x0
; ldpush4 (type 0x24 reg 0x0) tcc__r0
pei (tcc__r0h)
pei (tcc__r0)
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfile2OJBeK25
pea.w tccs_L.tmpxfile2OJBeK25 + 0
; push2 imm r 0xf0
pea.w 7
; push2 imm r 0xf0
pea.w 3
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #16
tsa
clc
adc #16
tas
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #5
ldx #1
lda.b tcc__r0
sec
sbc #5
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 8803 ind 8803
; gsym_addr t 0 a 8840 ind 8840
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 8928 ind 8928
; cmp op 0x95 inv 1 v 243 r 8928
; cmp ne
bne +
; gsym_addr t 0 a 9015 ind 9015
brl __local_15
+
; gtst finished; t 8928
; gjmp_addr 0 at 9088
jmp.w __local_16
; gsym_addr t 9127 a 0 ind 9127
__local_15:
; gsym_addr t 8928 a 9159 ind 9159
; load 0
; type 36 reg 0x2f0 extra 0xffe8f90c
; ld2 #tccs_L.tmpxfile2OJBeK31 + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:tccs_L.tmpxfile2OJBeK31
sta.b tcc__r0h
lda.w #tccs_L.tmpxfile2OJBeK31 + 0
sta.b tcc__r0
; gjmp_addr 0 at 9439
jmp.w __local_17
; gsym_addr t 9478 a 0 ind 9478
__local_16:
; gsym_addr t 9127 a 9510 ind 9510
; load 0
; type 36 reg 0x2f0 extra 0xffe8f90c
; ld2 #tccs_L.tmpxfile2OJBeK30 + 0, tcc__r0 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:tccs_L.tmpxfile2OJBeK30
sta.b tcc__r0h
lda.w #tccs_L.tmpxfile2OJBeK30 + 0
sta.b tcc__r0
__local_17:
; gsym_addr t 9478 a 9790 ind 9790
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfile2OJBeK32
pea.w tccs_L.tmpxfile2OJBeK32 + 0
; ldpush before load type 0x24 reg 0x0
; ldpush4 (type 0x24 reg 0x0) tcc__r0
pei (tcc__r0h)
pei (tcc__r0)
; push4 imm r 0x2f0
pea.w :tccs_L.tmpxfile2OJBeK29
pea.w tccs_L.tmpxfile2OJBeK29 + 0
; push2 imm r 0xf0
pea.w 8
; push2 imm r 0xf0
pea.w 3
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #16
tsa
clc
adc #16
tas
; gsym_addr t 0 a 10226 ind 10226
; add sp, #__draw_locals
.ifgr __draw_locals 0
tsa
clc
adc #__draw_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x1" SUPERFREE

changeObjSize:
; sub sp,#__changeObjSize_locals
.ifgr __changeObjSize_locals 0
tsa
sec
sbc #__changeObjSize_locals
tas
.endif
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l setBrightness
; add sp, #1
tsa
clc
adc #1
tas
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 10850 ind 10850
; gsym_addr t 0 a 10889 ind 10889
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 10979 ind 10979
; cmp op 0x95 inv 1 v 243 r 10979
; cmp ne
bne +
; gsym_addr t 0 a 11069 ind 11069
brl __local_18
+
; gtst finished; t 10979
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite8_end + 0, tcc__r0 (type 0x84)
lda.w #:sprite8_end
sta.b tcc__r0h
lda.w #sprite8_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite8 + 0, tcc__r1 (type 0x84)
lda.w #:sprite8
sta.b tcc__r1h
lda.w #sprite8 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 8192
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 32
; push4 imm r 0x12f0
pea.w :palsprite8
pea.w palsprite8 + 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :sprite8
pea.w sprite8 + 0
; call r 0x2f0
jsr.l oamInitGfxSet
; add sp, #16
tsa
clc
adc #16
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite16_end + 0, tcc__r0 (type 0x84)
lda.w #:sprite16_end
sta.b tcc__r0h
lda.w #sprite16_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite16 + 0, tcc__r1 (type 0x84)
lda.w #:sprite16
sta.b tcc__r1h
lda.w #sprite16 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x10)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 9216
; push4 imm r 0x12f0
pea.w :sprite16
pea.w sprite16 + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 32
; push2 imm r 0xf0
pea.w 144
; push4 imm r 0x12f0
pea.w :palsprite16
pea.w palsprite16 + 0
; call r 0x2f0
jsr.l dmaCopyCGram
; add sp, #8
tsa
clc
adc #8
tas
; gjmp_addr 0 at 12937
jmp.w __local_19
; gsym_addr t 12977 a 0 ind 12977
__local_18:
; gsym_addr t 10979 a 13011 ind 13011
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #1
ldx #1
lda.b tcc__r0
sec
sbc #1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 13270 ind 13270
; gsym_addr t 0 a 13309 ind 13309
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 13399 ind 13399
; cmp op 0x95 inv 1 v 243 r 13399
; cmp ne
bne +
; gsym_addr t 0 a 13489 ind 13489
brl __local_20
+
; gtst finished; t 13399
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite8_end + 0, tcc__r0 (type 0x84)
lda.w #:sprite8_end
sta.b tcc__r0h
lda.w #sprite8_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite8 + 0, tcc__r1 (type 0x84)
lda.w #:sprite8
sta.b tcc__r1h
lda.w #sprite8 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #32
pha
rep #$20
; push2 imm r 0xf0
pea.w 8192
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 32
; push4 imm r 0x12f0
pea.w :palsprite8
pea.w palsprite8 + 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :sprite8
pea.w sprite8 + 0
; call r 0x2f0
jsr.l oamInitGfxSet
; add sp, #16
tsa
clc
adc #16
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite32_end + 0, tcc__r0 (type 0x84)
lda.w #:sprite32_end
sta.b tcc__r0h
lda.w #sprite32_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite32 + 0, tcc__r1 (type 0x84)
lda.w #:sprite32
sta.b tcc__r1h
lda.w #sprite32 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x10)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 9216
; push4 imm r 0x12f0
pea.w :sprite32
pea.w sprite32 + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 32
; push2 imm r 0xf0
pea.w 144
; push4 imm r 0x12f0
pea.w :palsprite32
pea.w palsprite32 + 0
; call r 0x2f0
jsr.l dmaCopyCGram
; add sp, #8
tsa
clc
adc #8
tas
; gjmp_addr 0 at 15358
jmp.w __local_21
; gsym_addr t 15398 a 0 ind 15398
__local_20:
; gsym_addr t 13399 a 15432 ind 15432
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #2
ldx #1
lda.b tcc__r0
sec
sbc #2
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 15691 ind 15691
; gsym_addr t 0 a 15730 ind 15730
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 15820 ind 15820
; cmp op 0x95 inv 1 v 243 r 15820
; cmp ne
bne +
; gsym_addr t 0 a 15910 ind 15910
brl __local_22
+
; gtst finished; t 15820
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite8_end + 0, tcc__r0 (type 0x84)
lda.w #:sprite8_end
sta.b tcc__r0h
lda.w #sprite8_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite8 + 0, tcc__r1 (type 0x84)
lda.w #:sprite8
sta.b tcc__r1h
lda.w #sprite8 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #64
pha
rep #$20
; push2 imm r 0xf0
pea.w 8192
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 32
; push4 imm r 0x12f0
pea.w :palsprite8
pea.w palsprite8 + 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :sprite8
pea.w sprite8 + 0
; call r 0x2f0
jsr.l oamInitGfxSet
; add sp, #16
tsa
clc
adc #16
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite64_end + 0, tcc__r0 (type 0x84)
lda.w #:sprite64_end
sta.b tcc__r0h
lda.w #sprite64_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite64 + 0, tcc__r1 (type 0x84)
lda.w #:sprite64
sta.b tcc__r1h
lda.w #sprite64 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x10)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 9216
; push4 imm r 0x12f0
pea.w :sprite64
pea.w sprite64 + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 32
; push2 imm r 0xf0
pea.w 144
; push4 imm r 0x12f0
pea.w :palsprite64
pea.w palsprite64 + 0
; call r 0x2f0
jsr.l dmaCopyCGram
; add sp, #8
tsa
clc
adc #8
tas
; gjmp_addr 0 at 17779
jmp.w __local_23
; gsym_addr t 17819 a 0 ind 17819
__local_22:
; gsym_addr t 15820 a 17853 ind 17853
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #3
ldx #1
lda.b tcc__r0
sec
sbc #3
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 18112 ind 18112
; gsym_addr t 0 a 18151 ind 18151
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 18241 ind 18241
; cmp op 0x95 inv 1 v 243 r 18241
; cmp ne
bne +
; gsym_addr t 0 a 18331 ind 18331
brl __local_24
+
; gtst finished; t 18241
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite16_end + 0, tcc__r0 (type 0x84)
lda.w #:sprite16_end
sta.b tcc__r0h
lda.w #sprite16_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite16 + 0, tcc__r1 (type 0x84)
lda.w #:sprite16
sta.b tcc__r1h
lda.w #sprite16 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #96
pha
rep #$20
; push2 imm r 0xf0
pea.w 8192
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 32
; push4 imm r 0x12f0
pea.w :palsprite16
pea.w palsprite16 + 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :sprite16
pea.w sprite16 + 0
; call r 0x2f0
jsr.l oamInitGfxSet
; add sp, #16
tsa
clc
adc #16
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite32_end + 0, tcc__r0 (type 0x84)
lda.w #:sprite32_end
sta.b tcc__r0h
lda.w #sprite32_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite32 + 0, tcc__r1 (type 0x84)
lda.w #:sprite32
sta.b tcc__r1h
lda.w #sprite32 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x10)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 9216
; push4 imm r 0x12f0
pea.w :sprite32
pea.w sprite32 + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 32
; push2 imm r 0xf0
pea.w 144
; push4 imm r 0x12f0
pea.w :palsprite32
pea.w palsprite32 + 0
; call r 0x2f0
jsr.l dmaCopyCGram
; add sp, #8
tsa
clc
adc #8
tas
; gjmp_addr 0 at 20210
jmp.w __local_25
; gsym_addr t 20250 a 0 ind 20250
__local_24:
; gsym_addr t 18241 a 20284 ind 20284
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #4
ldx #1
lda.b tcc__r0
sec
sbc #4
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 20543 ind 20543
; gsym_addr t 0 a 20582 ind 20582
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 20672 ind 20672
; cmp op 0x95 inv 1 v 243 r 20672
; cmp ne
bne +
; gsym_addr t 0 a 20762 ind 20762
brl __local_26
+
; gtst finished; t 20672
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite16_end + 0, tcc__r0 (type 0x84)
lda.w #:sprite16_end
sta.b tcc__r0h
lda.w #sprite16_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite16 + 0, tcc__r1 (type 0x84)
lda.w #:sprite16
sta.b tcc__r1h
lda.w #sprite16 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #128
pha
rep #$20
; push2 imm r 0xf0
pea.w 8192
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 32
; push4 imm r 0x12f0
pea.w :palsprite16
pea.w palsprite16 + 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :sprite16
pea.w sprite16 + 0
; call r 0x2f0
jsr.l oamInitGfxSet
; add sp, #16
tsa
clc
adc #16
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite64_end + 0, tcc__r0 (type 0x84)
lda.w #:sprite64_end
sta.b tcc__r0h
lda.w #sprite64_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite64 + 0, tcc__r1 (type 0x84)
lda.w #:sprite64
sta.b tcc__r1h
lda.w #sprite64 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x10)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 9216
; push4 imm r 0x12f0
pea.w :sprite64
pea.w sprite64 + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 32
; push2 imm r 0xf0
pea.w 144
; push4 imm r 0x12f0
pea.w :palsprite64
pea.w palsprite64 + 0
; call r 0x2f0
jsr.l dmaCopyCGram
; add sp, #8
tsa
clc
adc #8
tas
; gjmp_addr 0 at 22642
jmp.w __local_27
; gsym_addr t 22682 a 0 ind 22682
__local_26:
; gsym_addr t 20672 a 22716 ind 22716
; load 0
; type 16 reg 0x3f0 extra 0x94
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #5
ldx #1
lda.b tcc__r0
sec
sbc #5
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 22975 ind 22975
; gsym_addr t 0 a 23014 ind 23014
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 23104 ind 23104
; cmp op 0x95 inv 1 v 243 r 23104
; cmp ne
bne +
; gsym_addr t 0 a 23194 ind 23194
brl __local_28
+
; gtst finished; t 23104
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite32_end + 0, tcc__r0 (type 0x84)
lda.w #:sprite32_end
sta.b tcc__r0h
lda.w #sprite32_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite32 + 0, tcc__r1 (type 0x84)
lda.w #:sprite32
sta.b tcc__r1h
lda.w #sprite32 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #160
pha
rep #$20
; push2 imm r 0xf0
pea.w 8192
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 32
; push4 imm r 0x12f0
pea.w :palsprite32
pea.w palsprite32 + 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :sprite32
pea.w sprite32 + 0
; call r 0x2f0
jsr.l oamInitGfxSet
; add sp, #16
tsa
clc
adc #16
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite64_end + 0, tcc__r0 (type 0x84)
lda.w #:sprite64_end
sta.b tcc__r0h
lda.w #sprite64_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprite64 + 0, tcc__r1 (type 0x84)
lda.w #:sprite64
sta.b tcc__r1h
lda.w #sprite64 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x10)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 9216
; push4 imm r 0x12f0
pea.w :sprite64
pea.w sprite64 + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 32
; push2 imm r 0xf0
pea.w 144
; push4 imm r 0x12f0
pea.w :palsprite64
pea.w palsprite64 + 0
; call r 0x2f0
jsr.l dmaCopyCGram
; add sp, #8
tsa
clc
adc #8
tas
__local_28:
; gsym_addr t 23104 a 25074 ind 25074
__local_27:
; gsym_addr t 22682 a 25112 ind 25112
__local_25:
; gsym_addr t 20250 a 25150 ind 25150
__local_23:
; gsym_addr t 17819 a 25188 ind 25188
__local_21:
; gsym_addr t 15398 a 25226 ind 25226
__local_19:
; gsym_addr t 12977 a 25264 ind 25264
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 120
; push2 imm r 0xf0
pea.w 70
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 64
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 120
; push2 imm r 0xf0
pea.w 170
; push2 imm r 0xf0
pea.w 4
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 4
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #15
pha
rep #$20
; call r 0x2f0
jsr.l setBrightness
; add sp, #1
tsa
clc
adc #1
tas
; gsym_addr t 0 a 26520 ind 26520
; add sp, #__changeObjSize_locals
.ifgr __changeObjSize_locals 0
tsa
clc
adc #__changeObjSize_locals
tas
.endif
rtl
.ENDS

.SECTION ".text_0x2" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; call r 0x2f0
jsr.l consoleInit
; push2 imm r 0xf0
pea.w 26624
; call r 0x2f0
jsr.l consoleSetTextVramBGAdr
; add sp, #2
pla
; push2 imm r 0xf0
pea.w 12288
; call r 0x2f0
jsr.l consoleSetTextVramAdr
; add sp, #2
pla
; push2 imm r 0xf0
pea.w 256
; call r 0x2f0
jsr.l consoleSetTextOffset
; add sp, #2
pla
; push4 imm r 0x12f0
pea.w :snespal
pea.w snespal + 0
; push4 imm r 0x12f0
pea.w :snesfont
pea.w snesfont + 0
; push1 imm r 0xf0
sep #$20
lda #32
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l consoleInitText
; add sp, #10
tsa
clc
adc #10
tas
; push2 imm r 0xf0
pea.w 8192
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgSetGfxPtr
; add sp, #3
tsa
clc
adc #3
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 26624
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgSetMapPtr
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [selectedItem,0]
lda.b tcc__r0
sta.l selectedItem + 0
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [keyPressed,0]
sep #$20
lda.b tcc__r0
sta.l keyPressed + 0
rep #$20
; call r 0x2f0
jsr.l draw
; call r 0x2f0
jsr.l changeObjSize
; call r 0x2f0
jsr.l setScreenOn
__local_39:
; gtst inv 1 t 0 v 240 r 28566 ind 28566
; uncond jump: nop
; gtst finished; t 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -2 + __main_locals + 1,s
; gtst inv 1 t 0 v 242 r 28894 ind 28894
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __main_locals + 1,s
sta.b tcc__r0
; gsym_addr t 0 a 29073 ind 29073
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 29163 ind 29163
; cmp op 0x95 inv 1 v 243 r 29163
; cmp ne
bne +
; gsym_addr t 0 a 29253 ind 29253
brl __local_29
+
; gtst finished; t 29163
; load 0
; type 16 reg 0x1f2 extra 0x26
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __main_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #2048
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 29635 ind 29635
; gsym_addr t 0 a 29674 ind 29674
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 29764 ind 29764
; cmp op 0x95 inv 1 v 243 r 29764
; cmp ne
bne +
; gsym_addr t 0 a 29854 ind 29854
brl __local_30
+
; gtst finished; t 29764
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x97
; ucmpcd tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc.w #0
tay
beq +
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 30159 ind 30159
; gsym_addr t 0 a 30198 ind 30198
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 30288 ind 30288
; cmp op 0x95 inv 1 v 243 r 30288
; cmp ne
bne +
; gsym_addr t 0 a 30378 ind 30378
brl __local_31
+
; gtst finished; t 30288
; gtst inv 1 t 0 v 240 r 30454 ind 30454
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [keyPressed + 0], tcc__r0
lda.w #0
sep #$20
lda.l keyPressed + 0
rep #$20
sta.b tcc__r0
; gsym_addr t 0 a 30629 ind 30629
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 30719 ind 30719
; cmp op 0x95 inv 1 v 243 r 30719
; cmp ne
bne +
; gsym_addr t 0 a 30809 ind 30809
brl __local_32
+
; gtst finished; t 30719
; gtst inv 1 t 30288 v 244 r 30885 ind 30885
; VT_jmp r 30885 t 30288 ji 0 inv 1 vtop->c.i 30719
; gjmp_addr 30288 at 30982
jmp.w __local_33
; gsym_addr t 31026 a 30288 ind 31026
__local_32:
; gsym_addr t 30719 a 31064 ind 31064
; gtst finished; t 31026
; gtst inv 1 t 0 v 245 r 31127 ind 31127
; VT_jmp r 31127 t 0 ji 1 inv 1 vtop->c.i 31026
; gsym_addr t 0 a 31216 ind 31216
; gtst finished; t 31026
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0xffe8f728
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #65535
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [selectedItem,0]
lda.b tcc__r0
sta.l selectedItem + 0
; call r 0x2f0
jsr.l draw
; call r 0x2f0
jsr.l changeObjSize
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #255,tcc__r0
lda.w #255
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [keyPressed,0]
sep #$20
lda.b tcc__r0
sta.l keyPressed + 0
rep #$20
__local_31:
__local_33:
; gsym_addr t 31026 a 32047 ind 32047
__local_30:
; gsym_addr t 29764 a 32085 ind 32085
; load 0
; type 16 reg 0x1f2 extra 0x26
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __main_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #1024
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 32429 ind 32429
; gsym_addr t 0 a 32468 ind 32468
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 32558 ind 32558
; cmp op 0x95 inv 1 v 243 r 32558
; cmp ne
bne +
; gsym_addr t 0 a 32648 ind 32648
brl __local_34
+
; gtst finished; t 32558
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, #5
ldx #1
lda.b tcc__r0
sec
sbc.w #5
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 32947 ind 32947
; gsym_addr t 0 a 32986 ind 32986
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 33076 ind 33076
; cmp op 0x95 inv 1 v 243 r 33076
; cmp ne
bne +
; gsym_addr t 0 a 33166 ind 33166
brl __local_35
+
; gtst finished; t 33076
; gtst inv 1 t 0 v 240 r 33242 ind 33242
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [keyPressed + 0], tcc__r0
lda.w #0
sep #$20
lda.l keyPressed + 0
rep #$20
sta.b tcc__r0
; gsym_addr t 0 a 33417 ind 33417
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 33507 ind 33507
; cmp op 0x95 inv 1 v 243 r 33507
; cmp ne
bne +
; gsym_addr t 0 a 33597 ind 33597
brl __local_36
+
; gtst finished; t 33507
; gtst inv 1 t 33076 v 244 r 33673 ind 33673
; VT_jmp r 33673 t 33076 ji 0 inv 1 vtop->c.i 33507
; gjmp_addr 33076 at 33770
jmp.w __local_37
; gsym_addr t 33814 a 33076 ind 33814
__local_36:
; gsym_addr t 33507 a 33852 ind 33852
; gtst finished; t 33814
; gtst inv 1 t 0 v 245 r 33915 ind 33915
; VT_jmp r 33915 t 0 ji 1 inv 1 vtop->c.i 33814
; gsym_addr t 0 a 34004 ind 34004
; gtst finished; t 33814
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [selectedItem + 0], tcc__r0
lda.l selectedItem + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0xffe8f728
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [selectedItem,0]
lda.b tcc__r0
sta.l selectedItem + 0
; call r 0x2f0
jsr.l draw
; call r 0x2f0
jsr.l changeObjSize
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #255,tcc__r0
lda.w #255
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [keyPressed,0]
sep #$20
lda.b tcc__r0
sta.l keyPressed + 0
rep #$20
__local_35:
__local_37:
; gsym_addr t 33814 a 34804 ind 34804
__local_34:
; gsym_addr t 32558 a 34842 ind 34842
; gjmp_addr 0 at 34880
jmp.w __local_38
; gsym_addr t 34920 a 0 ind 34920
__local_29:
; gsym_addr t 29163 a 34954 ind 34954
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [keyPressed,0]
sep #$20
lda.b tcc__r0
sta.l keyPressed + 0
rep #$20
__local_38:
; gsym_addr t 34920 a 35192 ind 35192
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 28566 at 35265
jmp.w __local_39
; gsym_addr t 35309 a 28566 ind 35309
; gsym_addr t 0 a 35347 ind 35347
; gsym_addr t 0 a 28566 ind 35381
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 35492
jmp.w __local_40
; gsym_addr t 35532 a 0 ind 35532
__local_40:
; gsym_addr t 35532 a 35566 ind 35566
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ramtmpxfile2OJBeK.data" APPENDTO "globram.data"
__local_dummytmpxfile2OJBeK.data dsb 1

.ENDS

.SECTION "tmpxfile2OJBeK.data" APPENDTO "glob.data"

__local_dummytmpxfile2OJBeK.data: .db 0
.ENDS

.SECTION ".rodata" SUPERFREE

tccs_L.tmpxfile2OJBeK8: .db $4f,$62,$6a,$65,$63,$74,$20,$73,$69,$7a,$65,$20,$3a,$0
tccs_L.tmpxfile2OJBeK9: .db $25,$73,$20,$25,$73,$0
tccs_L.tmpxfile2OJBeK10: .db $3e,$0
tccs_L.tmpxfile2OJBeK11: .db $20,$0
tccs_L.tmpxfile2OJBeK12: .db $53,$6d,$61,$6c,$6c,$3a,$20,$20,$38,$20,$2d,$20,$4c,$61,$72,$67,$65,$3a,$20,$31,$36,$0
tccs_L.tmpxfile2OJBeK13: .db $25,$73,$20,$25,$73,$0
tccs_L.tmpxfile2OJBeK14: .db $3e,$0
tccs_L.tmpxfile2OJBeK15: .db $20,$0
tccs_L.tmpxfile2OJBeK16: .db $53,$6d,$61,$6c,$6c,$3a,$20,$20,$38,$20,$2d,$20,$4c,$61,$72,$67,$65,$3a,$20,$33,$32,$0
tccs_L.tmpxfile2OJBeK17: .db $25,$73,$20,$25,$73,$0
tccs_L.tmpxfile2OJBeK18: .db $3e,$0
tccs_L.tmpxfile2OJBeK19: .db $20,$0
tccs_L.tmpxfile2OJBeK20: .db $53,$6d,$61,$6c,$6c,$3a,$20,$20,$38,$20,$2d,$20,$4c,$61,$72,$67,$65,$3a,$20,$36,$34,$0
tccs_L.tmpxfile2OJBeK21: .db $25,$73,$20,$25,$73,$0
tccs_L.tmpxfile2OJBeK22: .db $3e,$0
tccs_L.tmpxfile2OJBeK23: .db $20,$0
tccs_L.tmpxfile2OJBeK24: .db $53,$6d,$61,$6c,$6c,$3a,$20,$31,$36,$20,$2d,$20,$4c,$61,$72,$67,$65,$3a,$20,$33,$32,$0
tccs_L.tmpxfile2OJBeK25: .db $25,$73,$20,$25,$73,$0
tccs_L.tmpxfile2OJBeK26: .db $3e,$0
tccs_L.tmpxfile2OJBeK27: .db $20,$0
tccs_L.tmpxfile2OJBeK28: .db $53,$6d,$61,$6c,$6c,$3a,$20,$31,$36,$20,$2d,$20,$4c,$61,$72,$67,$65,$3a,$20,$36,$34,$0
tccs_L.tmpxfile2OJBeK29: .db $25,$73,$20,$25,$73,$0
tccs_L.tmpxfile2OJBeK30: .db $3e,$0
tccs_L.tmpxfile2OJBeK31: .db $20,$0
tccs_L.tmpxfile2OJBeK32: .db $53,$6d,$61,$6c,$6c,$3a,$20,$33,$32,$20,$2d,$20,$4c,$61,$72,$67,$65,$3a,$20,$36,$34,$0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
selectedItem dsb 2
keyPressed dsb 1
.ENDS
