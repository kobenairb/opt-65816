.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __main_locals 0

.SECTION ".text_0x0" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; call r 0x2f0
jsr.l consoleInit
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #gfxpsrite_end + 0, tcc__r0 (type 0x84)
lda.w #:gfxpsrite_end
sta.b tcc__r0h
lda.w #gfxpsrite_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #gfxpsrite + 0, tcc__r1 (type 0x84)
lda.w #:gfxpsrite
sta.b tcc__r1h
lda.w #gfxpsrite + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #palsprite_end + 0, tcc__r1 (type 0x84)
lda.w #:palsprite_end
sta.b tcc__r1h
lda.w #palsprite_end + 0
sta.b tcc__r1
; load 2
; type 132 reg 0x12f0 extra 0x0
; ld4 #palsprite + 0, tcc__r2 (type 0x84)
lda.w #:palsprite
sta.b tcc__r2h
lda.w #palsprite + 0
sta.b tcc__r2
; gen_opi len 4 op -
; sbc tcc__r2 (0x2), tcc__r1 (0x1) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r1
sbc.b tcc__r2
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #160
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; push4 imm r 0x12f0
pea.w :palsprite
pea.w palsprite + 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :gfxpsrite
pea.w gfxpsrite + 0
; call r 0x2f0
jsr.l oamInitGfxSet
; add sp, #16
tsa
clc
adc #16
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; push2 imm r 0xf0
pea.w 100
; push2 imm r 0xf0
pea.w 100
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; call r 0x2f0
jsr.l setScreenOn
__local_0:
; gtst inv 1 t 0 v 240 r 2670 ind 2670
; uncond jump: nop
; gtst finished; t 0
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 2670 at 2784
jmp.w __local_0
; gsym_addr t 2825 a 2670 ind 2825
; gsym_addr t 0 a 2860 ind 2860
; gsym_addr t 0 a 2670 ind 2892
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 3001
jmp.w __local_1
; gsym_addr t 3039 a 0 ind 3039
__local_1:
; gsym_addr t 3039 a 3071 ind 3071
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ramtmpxfile8uE7Bk.data" APPENDTO "globram.data"
__local_dummytmpxfile8uE7Bk.data dsb 1

.ENDS

.SECTION "tmpxfile8uE7Bk.data" APPENDTO "glob.data"

__local_dummytmpxfile8uE7Bk.data: .db 0
.ENDS

.SECTION ".rodata" SUPERFREE

__local_dummytmpxfile8uE7Bk.rodata: .db 0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
__local_dummybss dsb 1
.ENDS
