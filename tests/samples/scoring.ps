.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __main_locals 0

.SECTION ".text_0x0" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; call r 0x2f0
jsr.l consoleInit
; push4 imm r 0x52f0
pea.w :snesfont
pea.w snesfont + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l consoleInitText
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #18,tcc__r0
lda.w #18
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x2
; st2 tcc__r0, [scoretst,2]
lda.b tcc__r0
sta.l scoretst + 2
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #900,tcc__r0
lda.w #900
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [scoretst,0]
lda.b tcc__r0
sta.l scoretst + 0
; push4 imm r 0x2f0
pea.w :scoretst
pea.w scoretst + 0
; call r 0x2f0
jsr.l scoreClear
; add sp, #4
tsa
clc
adc #4
tas
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x1
; ld2 [scoretst + 0], tcc__r0
lda.l scoretst + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x1
; ld2 [scoretst + 2], tcc__r0
lda.l scoretst + 2
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :tccs_L.7
pea.w tccs_L.7 + 0
; push4 imm r 0x12f0
pea.w :sz
pea.w sz + 0
; call r 0x2f0
jsr.l sprintf
; add sp, #12
tsa
clc
adc #12
tas
; push4 imm r 0x12f0
pea.w :sz
pea.w sz + 0
; push2 imm r 0xf0
pea.w 8
; push2 imm r 0xf0
pea.w 2
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 1243
; push4 imm r 0x2f0
pea.w :scoretst
pea.w scoretst + 0
; call r 0x2f0
jsr.l scoreAdd
; add sp, #6
tsa
clc
adc #6
tas
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x1
; ld2 [scoretst + 0], tcc__r0
lda.l scoretst + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x1
; ld2 [scoretst + 2], tcc__r0
lda.l scoretst + 2
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :tccs_L.8
pea.w tccs_L.8 + 0
; push4 imm r 0x12f0
pea.w :sz
pea.w sz + 0
; call r 0x2f0
jsr.l sprintf
; add sp, #12
tsa
clc
adc #12
tas
; push4 imm r 0x12f0
pea.w :sz
pea.w sz + 0
; push2 imm r 0xf0
pea.w 9
; push2 imm r 0xf0
pea.w 2
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
; push2 imm r 0xf0
pea.w 10000
; push4 imm r 0x2f0
pea.w :scoretst
pea.w scoretst + 0
; call r 0x2f0
jsr.l scoreAdd
; add sp, #6
tsa
clc
adc #6
tas
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [scoretst + 0], tcc__r0
lda.l scoretst + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [scoretst + 2], tcc__r0
lda.l scoretst + 2
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :tccs_L.9
pea.w tccs_L.9 + 0
; push4 imm r 0x12f0
pea.w :sz
pea.w sz + 0
; call r 0x2f0
jsr.l sprintf
; add sp, #12
tsa
clc
adc #12
tas
; push4 imm r 0x12f0
pea.w :sz
pea.w sz + 0
; push2 imm r 0xf0
pea.w 10
; push2 imm r 0xf0
pea.w 2
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #18,tcc__r0
lda.w #18
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x2
; st2 tcc__r0, [scoretst,2]
lda.b tcc__r0
sta.l scoretst + 2
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #900,tcc__r0
lda.w #900
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [scoretst,0]
lda.b tcc__r0
sta.l scoretst + 0
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #17,tcc__r0
lda.w #17
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x2
; st2 tcc__r0, [scoretst1,2]
lda.b tcc__r0
sta.l scoretst1 + 2
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #900,tcc__r0
lda.w #900
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [scoretst1,0]
lda.b tcc__r0
sta.l scoretst1 + 0
; push4 imm r 0x2f0
pea.w :scoretst1
pea.w scoretst1 + 0
; push4 imm r 0x2f0
pea.w :scoretst
pea.w scoretst + 0
; call r 0x2f0
jsr.l scoreCmp
; add sp, #8
tsa
clc
adc #8
tas
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 4320 ind 4320
; gsym_addr t 0 a 4357 ind 4357
; ERROR no jump found to patch
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 4476 ind 4476
; cmp op 0x95 inv 1 v 243 r 4476
; cmp ne
bne +
; gsym_addr t 0 a 4563 ind 4563
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 4476
; push4 imm r 0x12f0
pea.w :tccs_L.10
pea.w tccs_L.10 + 0
; push2 imm r 0xf0
pea.w 12
; push2 imm r 0xf0
pea.w 2
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
; gjmp_addr 0 at 4848
jmp.w __local_1
; gsym_addr t 4886 a 0 ind 4886
__local_0:
; gsym_addr t 4476 a 4918 ind 4918
; push4 imm r 0x2f0
pea.w :scoretst1
pea.w scoretst1 + 0
; push4 imm r 0x2f0
pea.w :scoretst
pea.w scoretst + 0
; call r 0x2f0
jsr.l scoreCmp
; add sp, #8
tsa
clc
adc #8
tas
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #255
ldx #1
lda.b tcc__r0
sec
sbc #255
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 5241 ind 5241
; gsym_addr t 0 a 5278 ind 5278
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 5366 ind 5366
; cmp op 0x95 inv 1 v 243 r 5366
; cmp ne
bne +
; gsym_addr t 0 a 5453 ind 5453
brl __local_2
+
; gtst finished; t 5366
; push4 imm r 0x12f0
pea.w :tccs_L.11
pea.w tccs_L.11 + 0
; push2 imm r 0xf0
pea.w 12
; push2 imm r 0xf0
pea.w 2
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
; gjmp_addr 0 at 5707
jmp.w __local_3
; gsym_addr t 5745 a 0 ind 5745
__local_2:
; gsym_addr t 5366 a 5777 ind 5777
; push4 imm r 0x2f0
pea.w :scoretst1
pea.w scoretst1 + 0
; push4 imm r 0x2f0
pea.w :scoretst
pea.w scoretst + 0
; call r 0x2f0
jsr.l scoreCmp
; add sp, #8
tsa
clc
adc #8
tas
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #1
ldx #1
lda.b tcc__r0
sec
sbc #1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 6096 ind 6096
; gsym_addr t 0 a 6133 ind 6133
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 6221 ind 6221
; cmp op 0x95 inv 1 v 243 r 6221
; cmp ne
bne +
; gsym_addr t 0 a 6308 ind 6308
brl __local_4
+
; gtst finished; t 6221
; push4 imm r 0x12f0
pea.w :tccs_L.12
pea.w tccs_L.12 + 0
; push2 imm r 0xf0
pea.w 12
; push2 imm r 0xf0
pea.w 2
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
__local_4:
; gsym_addr t 6221 a 6562 ind 6562
__local_3:
; gsym_addr t 5745 a 6597 ind 6597
__local_1:
; gsym_addr t 4886 a 6632 ind 6632
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #18,tcc__r0
lda.w #18
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x2
; st2 tcc__r0, [scoretst1,2]
lda.b tcc__r0
sta.l scoretst1 + 2
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #901,tcc__r0
lda.w #901
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [scoretst1,0]
lda.b tcc__r0
sta.l scoretst1 + 0
; push4 imm r 0x2f0
pea.w :scoretst1
pea.w scoretst1 + 0
; push4 imm r 0x2f0
pea.w :scoretst
pea.w scoretst + 0
; call r 0x2f0
jsr.l scoreCmp
; add sp, #8
tsa
clc
adc #8
tas
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 7315 ind 7315
; gsym_addr t 0 a 7352 ind 7352
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 7440 ind 7440
; cmp op 0x95 inv 1 v 243 r 7440
; cmp ne
bne +
; gsym_addr t 0 a 7527 ind 7527
brl __local_5
+
; gtst finished; t 7440
; push4 imm r 0x12f0
pea.w :tccs_L.13
pea.w tccs_L.13 + 0
; push2 imm r 0xf0
pea.w 13
; push2 imm r 0xf0
pea.w 2
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
; gjmp_addr 0 at 7781
jmp.w __local_6
; gsym_addr t 7819 a 0 ind 7819
__local_5:
; gsym_addr t 7440 a 7851 ind 7851
; push4 imm r 0x2f0
pea.w :scoretst1
pea.w scoretst1 + 0
; push4 imm r 0x2f0
pea.w :scoretst
pea.w scoretst + 0
; call r 0x2f0
jsr.l scoreCmp
; add sp, #8
tsa
clc
adc #8
tas
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #-1
ldx #1
lda.b tcc__r0
sec
sbc #-1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 8172 ind 8172
; gsym_addr t 0 a 8209 ind 8209
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 8297 ind 8297
; cmp op 0x95 inv 1 v 243 r 8297
; cmp ne
bne +
; gsym_addr t 0 a 8384 ind 8384
brl __local_7
+
; gtst finished; t 8297
; push4 imm r 0x12f0
pea.w :tccs_L.14
pea.w tccs_L.14 + 0
; push2 imm r 0xf0
pea.w 13
; push2 imm r 0xf0
pea.w 2
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
; gjmp_addr 0 at 8638
jmp.w __local_8
; gsym_addr t 8676 a 0 ind 8676
__local_7:
; gsym_addr t 8297 a 8708 ind 8708
; push4 imm r 0x2f0
pea.w :scoretst1
pea.w scoretst1 + 0
; push4 imm r 0x2f0
pea.w :scoretst
pea.w scoretst + 0
; call r 0x2f0
jsr.l scoreCmp
; add sp, #8
tsa
clc
adc #8
tas
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #1
ldx #1
lda.b tcc__r0
sec
sbc #1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 9027 ind 9027
; gsym_addr t 0 a 9064 ind 9064
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 9152 ind 9152
; cmp op 0x95 inv 1 v 243 r 9152
; cmp ne
bne +
; gsym_addr t 0 a 9239 ind 9239
brl __local_9
+
; gtst finished; t 9152
; push4 imm r 0x12f0
pea.w :tccs_L.15
pea.w tccs_L.15 + 0
; push2 imm r 0xf0
pea.w 13
; push2 imm r 0xf0
pea.w 2
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
__local_9:
; gsym_addr t 9152 a 9493 ind 9493
__local_8:
; gsym_addr t 8676 a 9528 ind 9528
__local_6:
; gsym_addr t 7819 a 9563 ind 9563
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #19,tcc__r0
lda.w #19
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x2
; st2 tcc__r0, [scoretst1,2]
lda.b tcc__r0
sta.l scoretst1 + 2
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #900,tcc__r0
lda.w #900
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [scoretst1,0]
lda.b tcc__r0
sta.l scoretst1 + 0
; push4 imm r 0x2f0
pea.w :scoretst
pea.w scoretst + 0
; push4 imm r 0x2f0
pea.w :scoretst
pea.w scoretst + 0
; call r 0x2f0
jsr.l scoreCmp
; add sp, #8
tsa
clc
adc #8
tas
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 10244 ind 10244
; gsym_addr t 0 a 10283 ind 10283
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 10373 ind 10373
; cmp op 0x95 inv 1 v 243 r 10373
; cmp ne
bne +
; gsym_addr t 0 a 10463 ind 10463
brl __local_10
+
; gtst finished; t 10373
; push4 imm r 0x12f0
pea.w :tccs_L.16
pea.w tccs_L.16 + 0
; push2 imm r 0xf0
pea.w 14
; push2 imm r 0xf0
pea.w 2
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
; gjmp_addr 0 at 10721
jmp.w __local_11
; gsym_addr t 10761 a 0 ind 10761
__local_10:
; gsym_addr t 10373 a 10795 ind 10795
; push4 imm r 0x2f0
pea.w :scoretst1
pea.w scoretst1 + 0
; push4 imm r 0x2f0
pea.w :scoretst
pea.w scoretst + 0
; call r 0x2f0
jsr.l scoreCmp
; add sp, #8
tsa
clc
adc #8
tas
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #-1
ldx #1
lda.b tcc__r0
sec
sbc #-1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 11119 ind 11119
; gsym_addr t 0 a 11158 ind 11158
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 11248 ind 11248
; cmp op 0x95 inv 1 v 243 r 11248
; cmp ne
bne +
; gsym_addr t 0 a 11338 ind 11338
brl __local_12
+
; gtst finished; t 11248
; push4 imm r 0x12f0
pea.w :tccs_L.17
pea.w tccs_L.17 + 0
; push2 imm r 0xf0
pea.w 14
; push2 imm r 0xf0
pea.w 2
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
; gjmp_addr 0 at 11596
jmp.w __local_13
; gsym_addr t 11636 a 0 ind 11636
__local_12:
; gsym_addr t 11248 a 11670 ind 11670
; push4 imm r 0x2f0
pea.w :scoretst1
pea.w scoretst1 + 0
; push4 imm r 0x2f0
pea.w :scoretst
pea.w scoretst + 0
; call r 0x2f0
jsr.l scoreCmp
; add sp, #8
tsa
clc
adc #8
tas
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #1
ldx #1
lda.b tcc__r0
sec
sbc #1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 11992 ind 11992
; gsym_addr t 0 a 12031 ind 12031
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 12121 ind 12121
; cmp op 0x95 inv 1 v 243 r 12121
; cmp ne
bne +
; gsym_addr t 0 a 12211 ind 12211
brl __local_14
+
; gtst finished; t 12121
; push4 imm r 0x12f0
pea.w :tccs_L.18
pea.w tccs_L.18 + 0
; push2 imm r 0xf0
pea.w 14
; push2 imm r 0xf0
pea.w 2
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
__local_14:
; gsym_addr t 12121 a 12469 ind 12469
__local_13:
; gsym_addr t 11636 a 12507 ind 12507
__local_11:
; gsym_addr t 10761 a 12545 ind 12545
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; push1 imm r 0xf0
sep #$20
lda #15
pha
rep #$20
; call r 0x2f0
jsr.l setBrightness
; add sp, #1
tsa
clc
adc #1
tas
__local_15:
; gtst inv 1 t 0 v 240 r 13069 ind 13069
; uncond jump: nop
; gtst finished; t 0
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 13069 at 13185
jmp.w __local_15
; gsym_addr t 13229 a 13069 ind 13229
; gsym_addr t 0 a 13267 ind 13267
; gsym_addr t 0 a 13069 ind 13301
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 13412
jmp.w __local_16
; gsym_addr t 13452 a 0 ind 13452
__local_16:
; gsym_addr t 13452 a 13486 ind 13486
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ram.data" APPENDTO "globram.data"
__local_dummy.data dsb 1

.ENDS

.SECTION ".data" APPENDTO "glob.data"

__local_dummy.data: .db 0
.ENDS

.SECTION ".rodata" SUPERFREE

tccs_L.7: .db $73,$63,$6f,$72,$65,$20,$68,$69,$20,$25,$30,$34,$78,$20,$73,$63,$6f,$72,$65,$20,$6c,$6f,$20,$25,$30,$34,$78,$0
tccs_L.8: .db $73,$63,$6f,$72,$65,$20,$68,$69,$20,$25,$30,$34,$78,$20,$73,$63,$6f,$72,$65,$20,$6c,$6f,$20,$25,$30,$34,$78,$0
tccs_L.9: .db $73,$63,$6f,$72,$65,$20,$68,$69,$20,$25,$30,$34,$78,$20,$73,$63,$6f,$72,$65,$20,$6c,$6f,$20,$25,$30,$34,$78,$0
tccs_L.10: .db $31,$20,$73,$63,$6f,$72,$65,$73,$20,$65,$71,$75,$61,$6c,$73,$0
tccs_L.11: .db $31,$20,$73,$63,$6f,$72,$65,$74,$73,$74,$20,$68,$69,$67,$68,$65,$72,$0
tccs_L.12: .db $31,$20,$73,$63,$6f,$72,$65,$74,$73,$74,$20,$6c,$6f,$77,$65,$72,$0
tccs_L.13: .db $32,$20,$73,$63,$6f,$72,$65,$73,$20,$65,$71,$75,$61,$6c,$73,$0
tccs_L.14: .db $32,$20,$73,$63,$6f,$72,$65,$74,$73,$74,$20,$68,$69,$67,$68,$65,$72,$0
tccs_L.15: .db $32,$20,$73,$63,$6f,$72,$65,$74,$73,$74,$20,$6c,$6f,$77,$65,$72,$0
tccs_L.16: .db $33,$20,$73,$63,$6f,$72,$65,$73,$20,$65,$71,$75,$61,$6c,$73,$0
tccs_L.17: .db $33,$20,$73,$63,$6f,$72,$65,$74,$73,$74,$20,$68,$69,$67,$68,$65,$72,$0
tccs_L.18: .db $33,$20,$73,$63,$6f,$72,$65,$74,$73,$74,$20,$6c,$6f,$77,$65,$72,$0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
scoretst dsb 4
scoretst1 dsb 4
sz dsb 128
.ENDS
