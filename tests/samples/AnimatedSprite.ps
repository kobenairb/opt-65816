.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __main_locals 14

.SECTION ".text_0x0" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; push2 imm r 0xf0
pea.w 10
; push2 imm r 0xf0
pea.w 0
; ldpush before load type 0x4 reg 0xf2
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-10 + __main_locals + 1)
sta.b tcc__r0
; ldpush4 (type 0x4 reg 0x0) tcc__r0
pei (tcc__r0h)
pei (tcc__r0)
; call r 0x2f0
jsr.l memset
; add sp, #8
tsa
clc
adc #8
tas
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #100,tcc__r0
lda.w #100
sta.b tcc__r0
; store r 0x0 fr 0xf2 ft 0x0 fc 0xfffffff2
; st2 tcc__r0, [sp,-14]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -14 + __main_locals + 1,s
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #100,tcc__r0
lda.w #100
sta.b tcc__r0
; store r 0x0 fr 0xf2 ft 0x0 fc 0xfffffff4
; st2 tcc__r0, [sp,-12]
; stack adjust: fc + disp - loc 4
lda.b tcc__r0
sta -12 + __main_locals + 1,s
; call r 0x2f0
jsr.l consoleInit
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #gfxpsrite_end + 0, tcc__r0 (type 0x84)
lda.w #:gfxpsrite_end
sta.b tcc__r0h
lda.w #gfxpsrite_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #gfxpsrite + 0, tcc__r1 (type 0x84)
lda.w #:gfxpsrite
sta.b tcc__r1h
lda.w #gfxpsrite + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #palsprite_end + 0, tcc__r1 (type 0x84)
lda.w #:palsprite_end
sta.b tcc__r1h
lda.w #palsprite_end + 0
sta.b tcc__r1
; load 2
; type 132 reg 0x12f0 extra 0x0
; ld4 #palsprite + 0, tcc__r2 (type 0x84)
lda.w #:palsprite
sta.b tcc__r2h
lda.w #palsprite + 0
sta.b tcc__r2
; gen_opi len 4 op -
; sbc tcc__r2 (0x2), tcc__r1 (0x1) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r1
sbc.b tcc__r2
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #96
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; push4 imm r 0x12f0
pea.w :palsprite
pea.w palsprite + 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :gfxpsrite
pea.w gfxpsrite + 0
; call r 0x2f0
jsr.l oamInitGfxSet
; add sp, #16
tsa
clc
adc #16
tas
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x10)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x100
; load 1
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-14],tcc__r0
; stack adjust: fc + disp - loc 10
lda -6 + __main_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamSetVisible
; add sp, #3
tsa
clc
adc #3
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; call r 0x2f0
jsr.l setScreenOn
__local_10:
; gtst inv 1 t 0 v 240 r 4319 ind 4319
; uncond jump: nop
; gtst finished; t 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 14
lda.b tcc__r0
sta -2 + __main_locals + 1,s
; gtst inv 1 t 0 v 242 r 4646 ind 4646
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 14
lda -2 + __main_locals + 1,s
sta.b tcc__r0
; gsym_addr t 0 a 4824 ind 4824
; ERROR no jump found to patch
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 4943 ind 4943
; cmp op 0x95 inv 1 v 243 r 4943
; cmp ne
bne +
; gsym_addr t 0 a 5030 ind 5030
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 4943
; load 0
; type 16 reg 0x1f2 extra 0x26
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 14
lda -2 + __main_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #2048
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 5440 ind 5440
; gsym_addr t 0 a 5477 ind 5477
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 5565 ind 5565
; cmp op 0x95 inv 1 v 243 r 5565
; cmp ne
bne +
; gsym_addr t 0 a 5652 ind 5652
brl __local_1
+
; gtst finished; t 5565
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 0 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op 0x9d
; cmpcd tcc__r1, #-16
ldx #1
lda.b tcc__r1
sec
sbc.w #-16
tay
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 6266 ind 6266
; gsym_addr t 0 a 6303 ind 6303
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 6391 ind 6391
; cmp op 0x95 inv 1 v 243 r 6391
; cmp ne
bne +
; gsym_addr t 0 a 6478 ind 6478
brl __local_2
+
; gtst finished; t 6391
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 0 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; load 2
; type 0 reg 0x1 extra 0x0
; mov tcc__r1, tcc__r2
lda.b tcc__r1
sta.b tcc__r2
lda.b tcc__r1h
sta.b tcc__r2h
; gen_opi len 2 op +
; sbc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c -14 r type 0x0)
; length xxy 2 vtop->type 0x0
dec.b tcc__r1
; store r 0x1 fr 0x100 ft 0x0 fc 0xfffffff2
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
__local_2:
; gsym_addr t 6391 a 7306 ind 7306
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #8
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r1
lda.w #1
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0xfffffff2
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #9
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r1
lda.w #0
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0xfffffff2
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
__local_1:
; gsym_addr t 5565 a 8385 ind 8385
; load 0
; type 16 reg 0x1f2 extra 0x26
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 14
lda -2 + __main_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #512
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 8726 ind 8726
; gsym_addr t 0 a 8763 ind 8763
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 8851 ind 8851
; cmp op 0x95 inv 1 v 243 r 8851
; cmp ne
bne +
; gsym_addr t 0 a 8938 ind 8938
brl __local_3
+
; gtst finished; t 8851
; load 0
; type 0 reg 0x1f2 extra 0x0
; ld2 [sp,-14],tcc__r0
; stack adjust: fc + disp - loc 2
lda -14 + __main_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 0x9d
; cmpcd tcc__r0, #-16
ldx #1
lda.b tcc__r0
sec
sbc.w #-16
tay
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 9287 ind 9287
; gsym_addr t 0 a 9324 ind 9324
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 9412 ind 9412
; cmp op 0x95 inv 1 v 243 r 9412
; cmp ne
bne +
; gsym_addr t 0 a 9499 ind 9499
brl __local_4
+
; gtst finished; t 9412
; load 0
; type 0 reg 0x1f2 extra 0x0
; ld2 [sp,-14],tcc__r0
; stack adjust: fc + disp - loc 2
lda -14 + __main_locals + 1,s
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -14 r type 0x0)
; length xxy 2 vtop->type 0x0
dec.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x0 fc 0xfffffff2
; st2 tcc__r0, [sp,-14]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -14 + __main_locals + 1,s
__local_4:
; gsym_addr t 9412 a 10107 ind 10107
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #8
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #2,tcc__r1
lda.w #2
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0xfffffff2
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #9
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r1
lda.w #1
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0xfffffff2
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
__local_3:
; gsym_addr t 8851 a 11188 ind 11188
; load 0
; type 16 reg 0x1f2 extra 0x26
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 14
lda -2 + __main_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #256
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 11531 ind 11531
; gsym_addr t 0 a 11570 ind 11570
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 11660 ind 11660
; cmp op 0x95 inv 1 v 243 r 11660
; cmp ne
bne +
; gsym_addr t 0 a 11750 ind 11750
brl __local_5
+
; gtst finished; t 11660
; load 0
; type 0 reg 0x1f2 extra 0x0
; ld2 [sp,-14],tcc__r0
; stack adjust: fc + disp - loc 2
lda -14 + __main_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 0x9e
; cmpcd tcc__r0, #256
ldx #1
lda.b tcc__r0
sec
sbc.w #256
tay
beq +++
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 12110 ind 12110
; gsym_addr t 0 a 12149 ind 12149
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 12239 ind 12239
; cmp op 0x95 inv 1 v 243 r 12239
; cmp ne
bne +
; gsym_addr t 0 a 12329 ind 12329
brl __local_6
+
; gtst finished; t 12239
; load 0
; type 0 reg 0x1f2 extra 0x0
; ld2 [sp,-14],tcc__r0
; stack adjust: fc + disp - loc 2
lda -14 + __main_locals + 1,s
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -14 r type 0x0)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x0 fc 0xfffffff2
; st2 tcc__r0, [sp,-14]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -14 + __main_locals + 1,s
__local_6:
; gsym_addr t 12239 a 12940 ind 12940
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #8
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #2,tcc__r1
lda.w #2
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0xfffffff2
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #9
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r1
lda.w #0
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0xfffffff2
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
__local_5:
; gsym_addr t 11660 a 14022 ind 14022
; load 0
; type 16 reg 0x1f2 extra 0x26
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 14
lda -2 + __main_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #1024
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 14367 ind 14367
; gsym_addr t 0 a 14406 ind 14406
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 14496 ind 14496
; cmp op 0x95 inv 1 v 243 r 14496
; cmp ne
bne +
; gsym_addr t 0 a 14586 ind 14586
brl __local_7
+
; gtst finished; t 14496
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 0 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op 0x9e
; cmpcd tcc__r1, #224
ldx #1
lda.b tcc__r1
sec
sbc.w #224
tay
beq +++
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 15211 ind 15211
; gsym_addr t 0 a 15250 ind 15250
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 15340 ind 15340
; cmp op 0x95 inv 1 v 243 r 15340
; cmp ne
bne +
; gsym_addr t 0 a 15430 ind 15430
brl __local_8
+
; gtst finished; t 15340
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 0 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; load 2
; type 0 reg 0x1 extra 0x0
; mov tcc__r1, tcc__r2
lda.b tcc__r1
sta.b tcc__r2
lda.b tcc__r1h
sta.b tcc__r2h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x0 c -14 r type 0x0)
; length xxy 2 vtop->type 0x0
inc.b tcc__r1
; store r 0x1 fr 0x100 ft 0x0 fc 0xfffffff2
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
__local_8:
; gsym_addr t 15340 a 16261 ind 16261
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #8
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r1
lda.w #0
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0xfffffff2
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #9
sta.b tcc__r0
; load 1
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r1
lda.w #0
sta.b tcc__r1
; store r 0x1 fr 0x5100 ft 0x11 fc 0xfffffff2
; st1 tcc__r1, [tcc__r0,0]
sep #$20
lda.b tcc__r1
sta.b [tcc__r0]
rep #$20
__local_7:
; gsym_addr t 14496 a 17343 ind 17343
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #6
sta.b tcc__r0
; load 1
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; load 2
; type 0 reg 0x1 extra 0x0
; mov tcc__r1, tcc__r2
lda.b tcc__r1
sta.b tcc__r2
lda.b tcc__r1h
sta.b tcc__r2h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c -14 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0xfffffff2
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #6
sta.b tcc__r0
; load 1
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; gen_opi len 2 op 0x93
; ucmpcd tcc__r1, #3
ldx #1
lda.b tcc__r1
sec
sbc.w #3
tay
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 18686 ind 18686
; gsym_addr t 0 a 18725 ind 18725
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 18815 ind 18815
; cmp op 0x95 inv 1 v 243 r 18815
; cmp ne
bne +
; gsym_addr t 0 a 18905 ind 18905
brl __local_9
+
; gtst finished; t 18815
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #6
sta.b tcc__r0
; load 1
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r1
lda.w #0
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0xfffffff2
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
__local_9:
; gsym_addr t 18815 a 19483 ind 19483
__local_0:
; gsym_addr t 4943 a 19521 ind 19521
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; load 1
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r1 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r1h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c -14 r type 0x24)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #6
sta.b tcc__r1
; load 2
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r2 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r2h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r2
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r2 (0x2) (fr type 0x4 c -14 r type 0x10)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r2
adc.w #8
sta.b tcc__r2
; load 3
; type 17 reg 0x5102 extra 0x0
; ld1 [tcc__r2,0],tcc__r3
lda.w #0
sep #$20
lda.b [tcc__r2]
rep #$20
sta.b tcc__r3
; gen_opi len 2 op *
lda.b tcc__r3
asl a
clc
adc.b tcc__r3
sta.b tcc__r3
; load 2
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r2
lda.b [tcc__r1]
sta.b tcc__r2
; gen_opi len 2 op +
; adc tcc__r3 (0x3), tcc__r2 (0x2) (fr type 0x10 c -14 r type 0x24)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r2
adc.b tcc__r3
sta.b tcc__r2
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld9 #sprTiles + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:sprTiles
sta.b tcc__r1h
lda.w #sprTiles + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r2 (0x2), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x10)
; length xxy 9 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r2
sta.b tcc__r1
; load 2
; type 1 reg 0x1101 extra 0x0
; ld1 [tcc__r1,0],tcc__r2
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
xba
xba
bpl +
ora.w #$ff00
+
sta.b tcc__r2
; store r 0x2 fr 0x100 ft 0x10 fc 0xfffffff2
; st2 tcc__r2, [tcc__r0,0]
lda.b tcc__r2
sta.b [tcc__r0]
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r0h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -14 r type 0x10)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r1 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r1h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c -14 r type 0x11)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #9
sta.b tcc__r1
; load 2
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -14,tcc__r2 (fr 0xf2 ft 0x4 fc 0xfffffff2)
stz.b tcc__r2h
tsa
clc
adc #(-14 + __main_locals + 1)
sta.b tcc__r2
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r2 (0x2) (fr type 0x4 c -14 r type 0x11)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r2
adc.w #4
sta.b tcc__r2
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x102
; load 3
; type 16 reg 0x102 extra 0x0
; ld2 [tcc__r2,0],tcc__r3
lda.b [tcc__r2]
sta.b tcc__r3
; ldpush2 (type 0x10 reg 0x3) tcc__r3
pei (tcc__r3)
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x11 reg 0x5101
; load 2
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r2
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r2
; ldpush1 (type 0x11 reg 0x2) tcc__r2
sep #$20
lda.b tcc__r2
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x100
; load 1
; type 16 reg 0x100 extra 0x0
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-14],tcc__r0
; stack adjust: fc + disp - loc 10
lda -6 + __main_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 4319 at 23671
jmp.w __local_10
; gsym_addr t 23714 a 4319 ind 23714
; gsym_addr t 0 a 23751 ind 23751
; gsym_addr t 0 a 4319 ind 23785
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 23895
jmp.w __local_11
; gsym_addr t 23935 a 0 ind 23935
__local_11:
; gsym_addr t 23935 a 23969 ind 23969
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ramtmpxfileUOKKBN.data" APPENDTO "globram.data"

sprTiles dsb 9

.ENDS

.SECTION "tmpxfileUOKKBN.data" APPENDTO "glob.data"

.db $0,$2,$4,$6,$8,$a,$c,$e,$20
.ENDS

.SECTION ".rodata" SUPERFREE

__local_dummytmpxfileUOKKBN.rodata: .db 0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
__local_dummybss dsb 1
.ENDS
