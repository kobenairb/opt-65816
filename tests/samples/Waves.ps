.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __main_locals 0

.SECTION ".text_0x0" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; call r 0x2f0
jsr.l consoleInit
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #patterns_end + 0, tcc__r0 (type 0x84)
lda.w #:patterns_end
sta.b tcc__r0h
lda.w #patterns_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #patterns + 0, tcc__r1 (type 0x84)
lda.w #:patterns
sta.b tcc__r1h
lda.w #patterns + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #palette_end + 0, tcc__r1 (type 0x84)
lda.w #:palette_end
sta.b tcc__r1h
lda.w #palette_end + 0
sta.b tcc__r1
; load 2
; type 132 reg 0x12f0 extra 0x0
; ld4 #palette + 0, tcc__r2 (type 0x84)
lda.w #:palette
sta.b tcc__r2h
lda.w #palette + 0
sta.b tcc__r2
; gen_opi len 4 op -
; sbc tcc__r2 (0x2), tcc__r1 (0x1) (fr type 0x84 c 0 r type 0x10)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r1
sbc.b tcc__r2
sta.b tcc__r1
; push2 imm r 0xf0
pea.w 16384
; push2 imm r 0xf0
pea.w 16
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push4 imm r 0x12f0
pea.w :palette
pea.w palette + 0
; push4 imm r 0x12f0
pea.w :patterns
pea.w patterns + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #map_end + 0, tcc__r0 (type 0x84)
lda.w #:map_end
sta.b tcc__r0h
lda.w #map_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #map + 0, tcc__r1 (type 0x84)
lda.w #:map
sta.b tcc__r1h
lda.w #map + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :map
pea.w map + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; call r 0x2f0
jsr.l setScreenOn
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l setModeHdmaWaves
; add sp, #1
tsa
clc
adc #1
tas
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [pada,0]
sep #$20
lda.b tcc__r0
sta.l pada + 0
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [padb,0]
sep #$20
lda.b tcc__r0
sta.l padb + 0
rep #$20
__local_6:
; gtst inv 1 t 0 v 240 r 3276 ind 3276
; uncond jump: nop
; gtst finished; t 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [pad0,0]
lda.b tcc__r0
sta.l pad0 + 0
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #128
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 3808 ind 3808
; gsym_addr t 0 a 3845 ind 3845
; ERROR no jump found to patch
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 3964 ind 3964
; cmp op 0x95 inv 1 v 243 r 3964
; cmp ne
bne +
; gsym_addr t 0 a 4051 ind 4051
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 3964
; gtst inv 1 t 0 v 240 r 4154 ind 4154
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [pada + 0], tcc__r0
lda.w #0
sep #$20
lda.l pada + 0
rep #$20
sta.b tcc__r0
; gsym_addr t 0 a 4315 ind 4315
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 4403 ind 4403
; cmp op 0x95 inv 1 v 243 r 4403
; cmp ne
bne +
; gsym_addr t 0 a 4490 ind 4490
brl __local_1
+
; gtst finished; t 4403
; gtst inv 1 t 0 v 244 r 4562 ind 4562
; VT_jmp r 4562 t 0 ji 0 inv 1 vtop->c.i 4403
; gjmp_addr 0 at 4647
jmp.w __local_2
; gsym_addr t 4685 a 0 ind 4685
__local_1:
; gsym_addr t 4403 a 4717 ind 4717
; gtst finished; t 4685
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [pada,0]
sep #$20
lda.b tcc__r0
sta.l pada + 0
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l setModeHdmaReset
; add sp, #1
tsa
clc
adc #1
tas
__local_2:
; gsym_addr t 4685 a 5082 ind 5082
; gjmp_addr 0 at 5117
jmp.w __local_3
; gsym_addr t 5155 a 0 ind 5155
__local_0:
; gsym_addr t 3964 a 5187 ind 5187
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [pada,0]
sep #$20
lda.b tcc__r0
sta.l pada + 0
rep #$20
__local_3:
; gsym_addr t 5155 a 5410 ind 5410
; load 0
; type 16 reg 0x3f0 extra 0x26
; ld2 [pad0 + 0], tcc__r0
lda.l pad0 + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #32768
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 5707 ind 5707
; gsym_addr t 0 a 5744 ind 5744
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 5832 ind 5832
; cmp op 0x95 inv 1 v 243 r 5832
; cmp ne
bne +
; gsym_addr t 0 a 5919 ind 5919
brl __local_4
+
; gtst finished; t 5832
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [padb,0]
sep #$20
lda.b tcc__r0
sta.l padb + 0
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l setModeHdmaWaves
; add sp, #1
tsa
clc
adc #1
tas
; gjmp_addr 0 at 6297
jmp.w __local_5
; gsym_addr t 6335 a 0 ind 6335
__local_4:
; gsym_addr t 5832 a 6367 ind 6367
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [padb,0]
sep #$20
lda.b tcc__r0
sta.l padb + 0
rep #$20
__local_5:
; gsym_addr t 6335 a 6590 ind 6590
; call r 0x2f0
jsr.l setModeHdmaWavesMove
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 3276 at 6702
jmp.w __local_6
; gsym_addr t 6743 a 3276 ind 6743
; gsym_addr t 0 a 6778 ind 6778
; gsym_addr t 0 a 3276 ind 6810
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 6919
jmp.w __local_7
; gsym_addr t 6957 a 0 ind 6957
__local_7:
; gsym_addr t 6957 a 6989 ind 6989
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ramtmpxfile2hmPHI.data" APPENDTO "globram.data"
__local_dummytmpxfile2hmPHI.data dsb 1

.ENDS

.SECTION "tmpxfile2hmPHI.data" APPENDTO "glob.data"

__local_dummytmpxfile2hmPHI.data: .db 0
.ENDS

.SECTION ".rodata" SUPERFREE

__local_dummytmpxfile2hmPHI.rodata: .db 0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
pada dsb 1
padb dsb 1
pad0 dsb 2
.ENDS
