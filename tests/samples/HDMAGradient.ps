.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __main_locals 5

.SECTION ".text_0x0" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; load 0
; type 16 reg 0xf0 extra 0x8aee840
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0xf2 ft 0x10 fc 0xfffffffc
; st2 tcc__r0, [sp,-4]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -4 + __main_locals + 1,s
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #15,tcc__r0
lda.w #15
sta.b tcc__r0
; store r 0x0 fr 0xf2 ft 0x11 fc 0xfffffffb
; st1 tcc__r0, [sp,-5]
; stack adjust: fc + disp - loc 2
sep #$20
lda.b tcc__r0
sta -5 + __main_locals + 1,s
rep #$20
; call r 0x2f0
jsr.l consoleInit
; push2 imm r 0xf0
pea.w 4096
; push2 imm r 0xf0
pea.w 256
; push2 imm r 0xf0
pea.w 512
; push2 imm r 0xf0
pea.w 32768
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push4 imm r 0x12f0
pea.w :palette
pea.w palette + 0
; push4 imm r 0x12f0
pea.w :patterns
pea.w patterns + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; push2 imm r 0xf0
pea.w 24576
; push2 imm r 0xf0
pea.w 20480
; push4 imm r 0x12f0
pea.w :patterns1
pea.w patterns1 + 0
; call r 0x2f0
jsr.l dmaCopyVram
; add sp, #8
tsa
clc
adc #8
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #map_end + 0, tcc__r0 (type 0x84)
lda.w #:map_end
sta.b tcc__r0h
lda.w #map_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #map + 0, tcc__r1 (type 0x84)
lda.w #:map
sta.b tcc__r1h
lda.w #map + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :map
pea.w map + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; call r 0x2f0
jsr.l setScreenOn
__local_2:
; gtst inv 1 t 0 v 240 r 2263 ind 2263
; uncond jump: nop
; gtst finished; t 0
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l padsDown
; add sp, #2
pla
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #128
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 2581 ind 2581
; gsym_addr t 0 a 2618 ind 2618
; ERROR no jump found to patch
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 2737 ind 2737
; cmp op 0x95 inv 1 v 243 r 2737
; cmp ne
bne +
; gsym_addr t 0 a 2824 ind 2824
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 2737
; ldpush before load type 0x11 reg 0x51f2
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-5],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -5 + __main_locals + 1,s
rep #$20
sta.b tcc__r0
; ldpush1 (type 0x11 reg 0x0) tcc__r0
sep #$20
lda.b tcc__r0
pha
rep #$20
; call r 0x2f0
jsr.l setModeHdmaGradient
; add sp, #1
tsa
clc
adc #1
tas
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-5],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -5 + __main_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -5 r type 0x11)
; length xxy 2 vtop->type 0x0
dec.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -5 r type 0x11)
; length xxy 2 vtop->type 0x0
; nop
lda.b tcc__r0
and.w #15
sta.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xfffffffb
; st1 tcc__r0, [sp,-5]
; stack adjust: fc + disp - loc 2
sep #$20
lda.b tcc__r0
sta -5 + __main_locals + 1,s
rep #$20
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-5],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -5 + __main_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #1
ldx #1
lda.b tcc__r0
sec
sbc #1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 4186 ind 4186
; gsym_addr t 0 a 4223 ind 4223
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 4311 ind 4311
; cmp op 0x95 inv 1 v 243 r 4311
; cmp ne
bne +
; gsym_addr t 0 a 4398 ind 4398
brl __local_1
+
; gtst finished; t 4311
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #15,tcc__r0
lda.w #15
sta.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xfffffffb
; st1 tcc__r0, [sp,-5]
; stack adjust: fc + disp - loc 2
sep #$20
lda.b tcc__r0
sta -5 + __main_locals + 1,s
rep #$20
__local_1:
; gsym_addr t 4311 a 4714 ind 4714
__local_0:
; gsym_addr t 2737 a 4749 ind 4749
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 2263 at 4819
jmp.w __local_2
; gsym_addr t 4860 a 2263 ind 4860
; gsym_addr t 0 a 4895 ind 4895
; gsym_addr t 0 a 2263 ind 4927
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 5036
jmp.w __local_3
; gsym_addr t 5074 a 0 ind 5074
__local_3:
; gsym_addr t 5074 a 5106 ind 5106
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ramtmpxfileDPdSI6.data" APPENDTO "globram.data"
__local_dummytmpxfileDPdSI6.data dsb 1

.ENDS

.SECTION "tmpxfileDPdSI6.data" APPENDTO "glob.data"

__local_dummytmpxfileDPdSI6.data: .db 0
.ENDS

.SECTION ".rodata" SUPERFREE

__local_dummytmpxfileDPdSI6.rodata: .db 0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
__local_dummybss dsb 1
.ENDS
