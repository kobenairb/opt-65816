.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __main_locals 8

.SECTION ".text_0x0" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; load 0
; type 16 reg 0xf0 extra 0x80
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -2 + __main_locals + 1,s
; load 0
; type 16 reg 0xf0 extra 0x80
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffc
; st2 tcc__r0, [sp,-4]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -4 + __main_locals + 1,s
; call r 0x2f0
jsr.l consoleInit
; push4 imm r 0x52f0
pea.w :snesfont
pea.w snesfont + 0
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l consoleInitText
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #patterns_end + 0, tcc__r0 (type 0x84)
lda.w #:patterns_end
sta.b tcc__r0h
lda.w #patterns_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #patterns + 0, tcc__r1 (type 0x84)
lda.w #:patterns
sta.b tcc__r1h
lda.w #patterns + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 16384
; push2 imm r 0xf0
pea.w 16
; push2 imm r 0xf0
pea.w 32
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push4 imm r 0x52f0
pea.w :palette
pea.w palette + 0
; push4 imm r 0x52f0
pea.w :patterns
pea.w patterns + 0
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #map_end + 0, tcc__r0 (type 0x84)
lda.w #:map_end
sta.b tcc__r0h
lda.w #map_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #map + 0, tcc__r1 (type 0x84)
lda.w #:map
sta.b tcc__r1h
lda.w #map + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 4096
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x52f0
pea.w :map
pea.w map + 0
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; call r 0x2f0
jsr.l setScreenOn
__local_14:
; gtst inv 1 t 0 v 240 r 2811 ind 2811
; uncond jump: nop
; gtst finished; t 0
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffff8
; st2 tcc__r0, [sp,-8]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -8 + __main_locals + 1,s
; call r 0x2f0
jsr.l scanPads
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [pad_keys + 0], tcc__r0
lda.l pad_keys + 0
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffa
; st2 tcc__r0, [sp,-6]
; stack adjust: fc + disp - loc 4
lda.b tcc__r0
sta -6 + __main_locals + 1,s
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-6],tcc__r0
; stack adjust: fc + disp - loc 4
lda -6 + __main_locals + 1,s
sta.b tcc__r0
; gjmp_addr 0 at 3528
jmp.w __local_0
; gsym_addr t 3566 a 0 ind 3566
; gjmp_addr 0 at 3598
jmp.w __local_1
; gsym_addr t 3636 a 0 ind 3636
__local_0:
; gsym_addr t 3566 a 3668 ind 3668
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #256
ldx #1
lda.b tcc__r0
sec
sbc #256
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 3817 ind 3817
; gsym_addr t 0 a 3854 ind 3854
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 3942 ind 3942
; cmp op 0x95 inv 1 v 243 r 3942
; cmp ne
bne +
; gsym_addr t 0 a 4029 ind 4029
brl __local_2
+
; gtst finished; t 3942
__local_1:
; gsym_addr t 3636 a 4101 ind 4101
; load 0
; type 16 reg 0x1f2 extra 0x490b40
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 8
lda -2 + __main_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 8
lda.b tcc__r0
sta -2 + __main_locals + 1,s
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffff8
; st2 tcc__r0, [sp,-8]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -8 + __main_locals + 1,s
; gjmp_addr 0 at 4797
jmp.w __local_3
; gsym_addr t 4835 a 0 ind 4835
; gjmp_addr 0 at 4867
jmp.w __local_4
; gsym_addr t 4905 a 0 ind 4905
__local_2:
; gsym_addr t 3942 a 4937 ind 4937
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #512
ldx #1
lda.b tcc__r0
sec
sbc #512
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 5086 ind 5086
; gsym_addr t 0 a 5123 ind 5123
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 5211 ind 5211
; cmp op 0x95 inv 1 v 243 r 5211
; cmp ne
bne +
; gsym_addr t 0 a 5298 ind 5298
brl __local_5
+
; gtst finished; t 5211
__local_4:
; gsym_addr t 4905 a 5370 ind 5370
; load 0
; type 16 reg 0x1f2 extra 0x490b40
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 8
lda -2 + __main_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x10)
; length xxy 2 vtop->type 0x10
dec.b tcc__r0
dec.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 8
lda.b tcc__r0
sta -2 + __main_locals + 1,s
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffff8
; st2 tcc__r0, [sp,-8]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -8 + __main_locals + 1,s
; gjmp_addr 4835 at 6066
jmp.w __local_6
; gsym_addr t 6107 a 4835 ind 6107
; gjmp_addr 0 at 6142
jmp.w __local_7
; gsym_addr t 6180 a 0 ind 6180
__local_5:
; gsym_addr t 5211 a 6212 ind 6212
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #1024
ldx #1
lda.b tcc__r0
sec
sbc #1024
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 6363 ind 6363
; gsym_addr t 0 a 6400 ind 6400
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 6488 ind 6488
; cmp op 0x95 inv 1 v 243 r 6488
; cmp ne
bne +
; gsym_addr t 0 a 6575 ind 6575
brl __local_8
+
; gtst finished; t 6488
__local_7:
; gsym_addr t 6180 a 6647 ind 6647
; load 0
; type 16 reg 0x1f2 extra 0x490b40
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc 6
lda -4 + __main_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -4 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffc
; st2 tcc__r0, [sp,-4]
; stack adjust: fc + disp - loc 6
lda.b tcc__r0
sta -4 + __main_locals + 1,s
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffff8
; st2 tcc__r0, [sp,-8]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -8 + __main_locals + 1,s
; gjmp_addr 6107 at 7343
jmp.w __local_9
; gsym_addr t 7384 a 6107 ind 7384
; gjmp_addr 0 at 7419
jmp.w __local_10
; gsym_addr t 7458 a 0 ind 7458
__local_8:
; gsym_addr t 6488 a 7490 ind 7490
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #2048
ldx #1
lda.b tcc__r0
sec
sbc #2048
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 7641 ind 7641
; gsym_addr t 0 a 7678 ind 7678
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 7766 ind 7766
; cmp op 0x95 inv 1 v 243 r 7766
; cmp ne
bne +
; gsym_addr t 0 a 7853 ind 7853
brl __local_11
+
; gtst finished; t 7766
__local_10:
; gsym_addr t 7458 a 7926 ind 7926
; load 0
; type 16 reg 0x1f2 extra 0x490b40
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc 6
lda -4 + __main_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -4 r type 0x10)
; length xxy 2 vtop->type 0x10
dec.b tcc__r0
dec.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffc
; st2 tcc__r0, [sp,-4]
; stack adjust: fc + disp - loc 6
lda.b tcc__r0
sta -4 + __main_locals + 1,s
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffff8
; st2 tcc__r0, [sp,-8]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -8 + __main_locals + 1,s
; gjmp_addr 7384 at 8622
jmp.w __local_12
; gsym_addr t 8664 a 7384 ind 8664
__local_11:
; gsym_addr t 7766 a 8699 ind 8699
__local_3:
__local_6:
__local_9:
__local_12:
; gsym_addr t 8664 a 8734 ind 8734
; gtst inv 1 t 0 v 242 r 8769 ind 8769
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-8],tcc__r0
; stack adjust: fc + disp - loc 2
lda -8 + __main_locals + 1,s
sta.b tcc__r0
; gsym_addr t 0 a 8946 ind 8946
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 9034 ind 9034
; cmp op 0x95 inv 1 v 243 r 9034
; cmp ne
bne +
; gsym_addr t 0 a 9121 ind 9121
brl __local_13
+
; gtst finished; t 9034
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc 6
lda -4 + __main_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 10
lda 0 + __main_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetScroll
; add sp, #5
tsa
clc
adc #5
tas
__local_13:
; gsym_addr t 9034 a 9769 ind 9769
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc 6
lda -4 + __main_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 10
lda 0 + __main_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :tccs_L.7
pea.w tccs_L.7 + 0
; push2 imm r 0xf0
pea.w 0
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 2811 at 10482
jmp.w __local_14
; gsym_addr t 10525 a 2811 ind 10525
; gsym_addr t 0 a 10562 ind 10562
; gsym_addr t 0 a 2811 ind 10596
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 10706
jmp.w __local_15
; gsym_addr t 10746 a 0 ind 10746
__local_15:
; gsym_addr t 10746 a 10780 ind 10780
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ram.data" APPENDTO "globram.data"
__local_dummy.data dsb 1

.ENDS

.SECTION ".data" APPENDTO "glob.data"

__local_dummy.data: .db 0
.ENDS

.SECTION ".rodata" SUPERFREE

tccs_L.7: .db $53,$43,$52,$20,$58,$3d,$25,$64,$20,$59,$3d,$25,$64,$0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
__local_dummybss dsb 1
.ENDS
