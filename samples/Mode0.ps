.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __main_locals 0

.SECTION ".text_0x0" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; call r 0x2f0
jsr.l consoleInit
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #t0_end + 0, tcc__r0 (type 0x84)
lda.w #:t0_end
sta.b tcc__r0h
lda.w #t0_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #t0 + 0, tcc__r1 (type 0x84)
lda.w #:t0
sta.b tcc__r1h
lda.w #t0 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 8192
; push2 imm r 0xf0
pea.w 32
; push2 imm r 0xf0
pea.w 8
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push4 imm r 0x52f0
pea.w :p0
pea.w p0 + 0
; push4 imm r 0x52f0
pea.w :t0
pea.w t0 + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #t1_end + 0, tcc__r0 (type 0x84)
lda.w #:t1_end
sta.b tcc__r0h
lda.w #t1_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #t1 + 0, tcc__r1 (type 0x84)
lda.w #:t1
sta.b tcc__r1h
lda.w #t1 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 12288
; push2 imm r 0xf0
pea.w 32
; push2 imm r 0xf0
pea.w 8
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push4 imm r 0x52f0
pea.w :p1
pea.w p1 + 0
; push4 imm r 0x52f0
pea.w :t1
pea.w t1 + 0
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #t2_end + 0, tcc__r0 (type 0x84)
lda.w #:t2_end
sta.b tcc__r0h
lda.w #t2_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #t2 + 0, tcc__r1 (type 0x84)
lda.w #:t2
sta.b tcc__r1h
lda.w #t2 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 16384
; push2 imm r 0xf0
pea.w 32
; push2 imm r 0xf0
pea.w 8
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push4 imm r 0x52f0
pea.w :p2
pea.w p2 + 0
; push4 imm r 0x52f0
pea.w :t2
pea.w t2 + 0
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #t3_end + 0, tcc__r0 (type 0x84)
lda.w #:t3_end
sta.b tcc__r0h
lda.w #t3_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #t3 + 0, tcc__r1 (type 0x84)
lda.w #:t3
sta.b tcc__r1h
lda.w #t3 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 20480
; push2 imm r 0xf0
pea.w 32
; push2 imm r 0xf0
pea.w 16
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push4 imm r 0x52f0
pea.w :p3
pea.w p3 + 0
; push4 imm r 0x52f0
pea.w :t3
pea.w t3 + 0
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #m0_end + 0, tcc__r0 (type 0x84)
lda.w #:m0_end
sta.b tcc__r0h
lda.w #m0_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #m0 + 0, tcc__r1 (type 0x84)
lda.w #:m0
sta.b tcc__r1h
lda.w #m0 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x52f0
pea.w :m0
pea.w m0 + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #m1_end + 0, tcc__r0 (type 0x84)
lda.w #:m1_end
sta.b tcc__r0h
lda.w #m1_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #m1 + 0, tcc__r1 (type 0x84)
lda.w #:m1
sta.b tcc__r1h
lda.w #m1 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 1024
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x52f0
pea.w :m1
pea.w m1 + 0
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #m2_end + 0, tcc__r0 (type 0x84)
lda.w #:m2_end
sta.b tcc__r0h
lda.w #m2_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #m2 + 0, tcc__r1 (type 0x84)
lda.w #:m2
sta.b tcc__r1h
lda.w #m2 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 2048
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x52f0
pea.w :m2
pea.w m2 + 0
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #m3_end + 0, tcc__r0 (type 0x84)
lda.w #:m3_end
sta.b tcc__r0h
lda.w #m3_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #m3 + 0, tcc__r1 (type 0x84)
lda.w #:m3
sta.b tcc__r1h
lda.w #m3 + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 3072
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x52f0
pea.w :m3
pea.w m3 + 0
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; call r 0x2f0
jsr.l setScreenOn
__local_1:
; gtst inv 1 t 0 v 240 r 6848 ind 6848
; uncond jump: nop
; gtst finished; t 0
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [flip + 0], tcc__r0
lda.w #0
sep #$20
lda.l flip + 0
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [flip,0]
sep #$20
lda.b tcc__r0
sta.l flip + 0
rep #$20
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [flip + 0], tcc__r0
lda.w #0
sep #$20
lda.l flip + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #3
ldx #1
lda.b tcc__r0
sec
sbc #3
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 7641 ind 7641
; gsym_addr t 0 a 7678 ind 7678
; ERROR no jump found to patch
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 7797 ind 7797
; cmp op 0x95 inv 1 v 243 r 7797
; cmp ne
bne +
; gsym_addr t 0 a 7884 ind 7884
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 7797
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [flip,0]
sep #$20
lda.b tcc__r0
sta.l flip + 0
rep #$20
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [sxbg3 + 0], tcc__r0
lda.w #0
sep #$20
lda.l sxbg3 + 0
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x495060
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [sxbg3,0]
sep #$20
lda.b tcc__r0
sta.l sxbg3 + 0
rep #$20
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [sxbg2 + 0], tcc__r0
lda.w #0
sep #$20
lda.l sxbg2 + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [sxbg2,0]
sep #$20
lda.b tcc__r0
sta.l sxbg2 + 0
rep #$20
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [sxbg1 + 0], tcc__r0
lda.w #0
sep #$20
lda.l sxbg1 + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.w #3
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [sxbg1,0]
sep #$20
lda.b tcc__r0
sta.l sxbg1 + 0
rep #$20
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [sxbg1 + 0], tcc__r0
lda.w #0
sep #$20
lda.l sxbg1 + 0
rep #$20
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetScroll
; add sp, #5
tsa
clc
adc #5
tas
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [sxbg2 + 0], tcc__r0
lda.w #0
sep #$20
lda.l sxbg2 + 0
rep #$20
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetScroll
; add sp, #5
tsa
clc
adc #5
tas
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [sxbg3 + 0], tcc__r0
lda.w #0
sep #$20
lda.l sxbg3 + 0
rep #$20
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; call r 0x2f0
jsr.l bgSetScroll
; add sp, #5
tsa
clc
adc #5
tas
__local_0:
; gsym_addr t 7797 a 10510 ind 10510
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 6848 at 10582
jmp.w __local_1
; gsym_addr t 10624 a 6848 ind 10624
; gsym_addr t 0 a 10661 ind 10661
; gsym_addr t 0 a 6848 ind 10695
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 10805
jmp.w __local_2
; gsym_addr t 10844 a 0 ind 10844
__local_2:
; gsym_addr t 10844 a 10878 ind 10878
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ram.data" APPENDTO "globram.data"

sxbg1 dsb 1
sxbg2 dsb 1
sxbg3 dsb 1
flip dsb 1

.ENDS

.SECTION ".data" APPENDTO "glob.data"

.db $0
.db $0
.db $0
.db $0
.ENDS

.SECTION ".rodata" SUPERFREE

__local_dummy.rodata: .db 0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
__local_dummybss dsb 1
.ENDS
